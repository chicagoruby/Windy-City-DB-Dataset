{"posts":[{"Id":"299723","CreationDate":"2008-11-18T18:46:24.323","OwnerUserId":"31655","Tags":["couchdb","database","nosql"],"Body":"&lt;p&gt;I need to do transactions (begin, commit or rollback), locks (select for update).\nHow can I do it in a document model db?&lt;\/p&gt;\n\n&lt;p&gt;Edit:&lt;\/p&gt;\n\n&lt;p&gt;The case is this:&lt;\/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;I want to run an auctions site.&lt;\/li&gt;\n&lt;li&gt;And I think how to direct purchase as well.&lt;\/li&gt;\n&lt;li&gt;In a direct purchase I have to decrement the quantity field in the item record, but only if the quantity is greater than zero. That is why I need locks and transactions.&lt;\/li&gt;\n&lt;li&gt;I don't know how to address that without locks and\/or transactions.&lt;\/li&gt;\n&lt;\/ul&gt;\n\n&lt;p&gt;Can I solve this with CouchDB?&lt;\/p&gt;\n"},{"Id":"337344","CreationDate":"2008-12-03T14:44:29.580","OwnerUserId":"31655","Tags":["couchdb","database","nosql"],"Body":"&lt;p&gt;I've been trying to see if I can accomplish some requirements with a document based database, in this case CouchDB.  Two generic requirements:  &lt;\/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;CRUD of entities with some fields which have unique index on it  &lt;\/li&gt;\n&lt;li&gt;ecommerce web app like eBay (&lt;a href=&quot;http:\/\/stackoverflow.com\/questions\/299723\/can-i-do-transactions-and-locks-in-couchdb&quot;&gt;better description here&lt;\/a&gt;).&lt;\/li&gt;\n&lt;\/ul&gt;\n\n&lt;p&gt;And I'm begining to think that a Document-based database isn't the best choice to address these requirements. Furthermore, I can\u00b4t imagine a use for a Document based database (maybe my imagination is too little).  &lt;\/p&gt;\n\n&lt;p&gt;Can you explain me if &lt;em&gt;I am asking pears to an elm&lt;\/em&gt; when I try to use a Document based database for this requirements?&lt;\/p&gt;\n"},{"Id":"667141","CreationDate":"2009-03-20T17:25:24.987","OwnerUserId":"17398","Tags":["database","sql","relational-database","nosql"],"Body":"&lt;p&gt;Apart from the google\/bigtable scenario, when shouldn't you use a relational database? Why not, and what should you use? (did you learn 'the hard way'?) &lt;\/p&gt;\n"},{"Id":"1145726","CreationDate":"2009-07-17T21:15:06.547","OwnerUserId":"133535","Tags":["sql","bottleneck","database","nosql"],"Body":"&lt;p&gt;I've been hearing things about NoSQL and that it may eventually become the replacement for SQL DB storage methods due to the fact that DB interaction is often a bottle neck for speed on the web.&lt;\/p&gt;\n\n&lt;p&gt;So I just have a few questions:&lt;\/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;What exactly is it?&lt;\/p&gt;&lt;\/li&gt;\n&lt;li&gt;&lt;p&gt;How does it work?&lt;\/p&gt;&lt;\/li&gt;\n&lt;li&gt;&lt;p&gt;Why would it be better than using a SQL Database? And how much better is it?&lt;\/p&gt;&lt;\/li&gt;\n&lt;li&gt;&lt;p&gt;Is the technology too new to start implementing yet or is it worth taking a look into?&lt;\/p&gt;&lt;\/li&gt;\n&lt;\/ol&gt;\n"},{"Id":"1165185","CreationDate":"2009-07-22T13:17:58.217","OwnerUserId":"97572","Tags":["nosql"],"Body":"&lt;p&gt;Hi Guys,&lt;\/p&gt;\n\n&lt;p&gt;I have been stumbled on things like RDBMS alternatives very often now a days... And i am following some of the open source implementation.. &lt;\/p&gt;\n\n&lt;p&gt;wat i understaing is, its best suited for the web apps in large scale (like google &amp;#38;amp; amazon).. they mainly concentrated on very large distributed data stores..&lt;\/p&gt;\n\n&lt;p&gt;how this could help small start ups looking for a existing costly alternative data stores.. and is this really yield both performance &amp;#38;amp; maintanance gain for small applications?&lt;\/p&gt;\n\n&lt;p&gt;I just started this discussion and belive somebody here already got same frustration trying these new approaches earlier and may gain experience in it.. this may help start ups like us..&lt;\/p&gt;\n\n&lt;p&gt;Cheers&lt;\/p&gt;\n\n&lt;p&gt;Ramesh vel&lt;\/p&gt;\n"},{"Id":"1189911","CreationDate":"2009-07-27T18:46:43.863","OwnerUserId":"37539","Tags":["nosql","database","couchdb","hypertable","simpledb"],"Body":"&lt;p&gt;I'm interested in hearing about design strategies you have used with &lt;strong&gt;non-relational &quot;nosql&quot; databases&lt;\/strong&gt; - that is, the (mostly new) class of data stores that don't use traditional relational design or SQL (such as Hypertable, CouchDB, SimpleDB, Google App Engine datastore, Voldemort, Cassandra, SQL Data Services, etc.). They're also often referred to as &quot;key\/value stores&quot;, and at base they act like giant distributed persistent hash tables.&lt;\/p&gt;\n\n&lt;p&gt;Specifically, I want to learn about the differences in &lt;em&gt;conceptual data design&lt;\/em&gt; with these new databases. What's easier, what's harder, what can't be done at all?&lt;\/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Have you come up with alternate designs that work much better in the non-relational world?&lt;\/p&gt;&lt;\/li&gt;\n&lt;li&gt;&lt;p&gt;Have you hit your head against anything that seems impossible? &lt;\/p&gt;&lt;\/li&gt;\n&lt;li&gt;&lt;p&gt;Have you bridged the gap with any design patterns, e.g. to translate from one to the other? &lt;\/p&gt;&lt;\/li&gt;\n&lt;li&gt;&lt;p&gt;Do you even do explicit data models at all now (e.g. in UML) or have you chucked them entirely in favor of semi-structured \/ document-oriented data blobs?&lt;\/p&gt;&lt;\/li&gt;\n&lt;li&gt;&lt;p&gt;Do you miss any of the major extra services that RDBMSes provide, like relational integrity, arbitrarily complex transaction support, triggers, etc?&lt;\/p&gt;&lt;\/li&gt;\n&lt;\/ul&gt;\n\n&lt;p&gt;I come from a SQL relational DB background, so normalization is in my blood. That said, I get the advantages of non-relational databases for simplicity and scaling, and my gut tells me that there has to be a richer overlap of design capabilities. What have you done?&lt;\/p&gt;\n\n&lt;p&gt;FYI, there have been StackOverflow discussions on similar topics here: &lt;\/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;http:\/\/stackoverflow.com\/questions\/282783\/the-next-gen-databases&quot;&gt;the next generation of databases&lt;\/a&gt;&lt;\/li&gt;\n&lt;li&gt;&lt;a href=&quot;http:\/\/stackoverflow.com\/questions\/731147\/what-changes-do-i-need-for-my-tables-to-work-on-appengines-bigtable&quot;&gt;changing schemas to work with Google App Engine&lt;\/a&gt;&lt;\/li&gt;\n&lt;li&gt;&lt;a href=&quot;http:\/\/stackoverflow.com\/questions\/337344\/pros-cons-of-document-based-database-vs-relational-database&quot;&gt;choosing a document-oriented database&lt;\/a&gt;&lt;\/li&gt;\n&lt;\/ul&gt;\n"},{"Id":"1203010","CreationDate":"2009-07-29T21:00:39.720","OwnerUserId":"127660","Tags":["mapreduce","couchdb","performance","nosql"],"Body":"&lt;p&gt;I've recently written a web app that uses &lt;code&gt;couchdb&lt;\/code&gt;. I like couchdb and it suited the app - which has a lot of dynamic behaviour and simply pulls JSON directly from couchdb. Being able to upload images via a browser is nice and it's a snap to do tweaks to document data. The replication also has made deployment a breeze as the app is a couchapp, and all that's required to deploy is a replicate to the production server.&lt;\/p&gt;\n\n&lt;p&gt;However for a new app I'm thinking off (think blog type thingy), I want good performance and it's one area I think couchdb is not strong in. The app will be predominantly read oriented (I'm estimating 90% reads to 10% writes). &lt;\/p&gt;\n\n&lt;p&gt;Which datastores provide the best performance in a single server scenario? I'd be very interested to hear people's experiences in this...&lt;\/p&gt;\n"},{"Id":"1245338","CreationDate":"2009-08-07T15:14:17.003","OwnerUserId":"20126","Tags":["sql","nosql"],"Body":"&lt;p&gt;in this post &lt;a href=&quot;http:\/\/highscalability.com\/stack-overflow-architecture&quot; rel=&quot;nofollow&quot;&gt;Stack Overflow Architecture&lt;\/a&gt; i read about something called nosql, i didn't understand what it means, and i tried to search on google but seams that i can't get exactly whats it.&lt;\/p&gt;\n\n&lt;p&gt;Can anyone explain what nosql means in simple words?&lt;\/p&gt;\n"},{"Id":"1342741","CreationDate":"2009-08-27T17:57:06.583","OwnerUserId":"18424","Tags":["nosql","mysql","database","database-design"],"Body":"&lt;p&gt;I'm wondering if some other non-relational database would be a good fit for activity streams - sort of like what you see on Facebook, Flickr (&lt;a href=&quot;http:\/\/www.flickr.com\/activity&quot; rel=&quot;nofollow&quot;&gt;http:\/\/www.flickr.com\/activity&lt;\/a&gt;), etc. Right now, I'm using MySQL but it's pretty taxing (I have tens of millions of activity records) and since they are basically read-only once written and always viewed chronologically, I was thinking that an alternative DB might work well.&lt;\/p&gt;\n\n&lt;p&gt;The activities are things like:&lt;\/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;6 PM: John favorited Bacon&lt;\/li&gt;\n&lt;li&gt;5:30 PM: Jane commented on Snow Crash&lt;\/li&gt;\n&lt;li&gt;5:15 PM: Jane added a photo of Bacon to her album&lt;\/li&gt;\n&lt;\/ul&gt;\n\n&lt;p&gt;The catch is that unlike Twitter and some other systems, I can't just simply append activities to lists for each user who is interested in the activity - if I could it looks like &lt;a href=&quot;http:\/\/code.google.com\/p\/redis\/wiki\/TwitterAlikeExample&quot; rel=&quot;nofollow&quot;&gt;Redis would be a good fit&lt;\/a&gt; (with its list operations). &lt;\/p&gt;\n\n&lt;p&gt;I need to be able to do the following:&lt;\/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Pull activities for a set &lt;strong&gt;or subset&lt;\/strong&gt; of people who you are following (&quot;John&quot; and &quot;Jane&quot;), in reverse date order&lt;\/li&gt;\n&lt;li&gt;Pull activities for a thing (like &quot;Bacon&quot;) in reverse date order&lt;\/li&gt;\n&lt;li&gt;Filter by activity type (&quot;favorite&quot;, &quot;comment&quot;) &lt;\/li&gt;\n&lt;li&gt;Store at least 30 million activities&lt;\/li&gt;\n&lt;li&gt;Ideally, if you added or removed a person who you are following, your activity stream would reflect the change.&lt;\/li&gt;\n&lt;\/ul&gt;\n\n&lt;p&gt;I have been doing this with MySQL. My &quot;activities&quot; table is as compact as I could make it, the keys are as small as possible, and the it is indexed appropriately. It works, but it just feels like the wrong tool for this job.&lt;\/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Is anybody doing anything like this outside of a traditional RDBMS?&lt;\/strong&gt;&lt;\/p&gt;\n\n&lt;p&gt;&lt;em&gt;Update November 2009&lt;\/em&gt;: It's too early to answer my own question, but my current solution is to stick with MySQL but augment with Redis for fast access to the fresh activity stream data. More information in my answer here: &lt;a href=&quot;http:\/\/stackoverflow.com\/questions\/1443960\/how-to-implement-the-activity-stream-in-a-social-network\/1766371#1766371&quot;&gt;http:\/\/stackoverflow.com\/questions\/1443960\/how-to-implement-the-activity-stream-in-a-social-network...&lt;\/a&gt;&lt;\/p&gt;\n"},{"Id":"1436076","CreationDate":"2009-09-16T23:50:40.920","OwnerUserId":"4061","Tags":["hbase","nosql","sql","hadoop","query"],"Body":"&lt;p&gt;Given the following HBase schema scenario (&lt;a href=&quot;http:\/\/wiki.apache.org\/hadoop\/Hbase\/FAQ&quot; rel=&quot;nofollow&quot;&gt;from the official FAQ&lt;\/a&gt;)...&lt;\/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;How would you design an Hbase table\n  for many-to-many association between\n  two entities, for example Student and\n  Course?&lt;\/p&gt;\n  \n  &lt;p&gt;I would define two tables:&lt;\/p&gt;\n  \n  &lt;p&gt;Student: student id student data\n  (name, address, ...) courses (use\n  course ids as column qualifiers here) &lt;\/p&gt;\n  \n  &lt;p&gt;Course: course id course data (name,\n  syllabus, ...) students (use student\n  ids as column qualifiers here)&lt;\/p&gt;\n  \n  &lt;p&gt;This schema gives you fast access to\n  the queries, show all classes for a\n  student (student table, courses\n  family), or all students for a class\n  (courses table, students family).&lt;\/p&gt;\n&lt;\/blockquote&gt;\n\n&lt;p&gt;How would you satisfy the request: &quot;&lt;em&gt;Give me all the students that share at least two courses in common&lt;\/em&gt;&quot;?  Can you build a &quot;query&quot; in HBase that will return that set, or do you have to retrieve all the pertinent data and crunch it yourself in code?&lt;\/p&gt;\n"},{"Id":"1502735","CreationDate":"2009-10-01T08:51:16.490","OwnerUserId":"162742","Tags":["cassandra","nosql","database-design"],"Body":"&lt;p&gt;And what are the pitfalls to avoid? Are there any deal breaks for you? E.g., I've heard that exporting\/importing the Cassandra data is very difficult, making me wonder if that's going to hinder syncing production data to development environment.&lt;\/p&gt;\n\n&lt;p&gt;BTW, it's very hard to find good tutorials on Cassandra, the only one I have &lt;a href=&quot;http:\/\/arin.me\/code\/wtf-is-a-supercolumn-cassandra-data-model&quot; rel=&quot;nofollow&quot;&gt;http:\/\/arin.me\/code\/wtf-is-a-supercolumn-cassandra-data-model&lt;\/a&gt; is still pretty basic.&lt;\/p&gt;\n\n&lt;p&gt;Thanks.&lt;\/p&gt;\n"},{"Id":"1528827","CreationDate":"2009-10-07T00:11:47.490","OwnerUserId":"185307","Tags":["google-app-engine","cms","paas","nosql"],"Body":"&lt;p&gt;This question is partially related to an older question (&lt;a href=&quot;http:\/\/stackoverflow.com\/questions\/478760\/any-cms-is-google-app-engine-compatible&quot; title=&quot;Any CMS is Google App Engine compatible?&quot;&gt;Any CMS is Google App Engine compatible?&lt;\/a&gt;) , but is slightly more general.  It seems that in most CMS systems, the most fragile failure point is the database.  Traditional database implementations scale poorly and will never be able to handle unforeseen spikes of traffic.  Since Google App Engine was designed to help even small businesses overcome that problem, I had the same question that was asked earlier this year with less than satisfactory answers.&lt;\/p&gt;\n\n&lt;p&gt;But more generally, where are the CMS projects that support NOSQL databases?  Looking over Wikipedia's list of CMS platforms, I see without much effort that only traditional RDBMS are supported by every single vendor on the list.  I would have expected to see at least one or two projects handling CouchDB or similar engines.  I understand the complexities of implementing a NOSQL solution to a problem that is typically solved using the relations cleanly expressed in any RDBMS, but there seems to be a rather wide market gap.&lt;\/p&gt;\n\n&lt;p&gt;Since databases are, today, easily outsourced to Google, Amazon, and others which use NOSQL models, I am amazed that there are not more projects actively pursuing this path.  Am I simply not aware?  Can someone please point me to projects that have real momentum that are developing on this path?  I'm looking for two things:&lt;\/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;a CMS that has as its backbone a NOSQL database enabling easy database outsourcing (hosted MySQL clusters and similar solutions are not what I'm looking for)&lt;\/li&gt;\n&lt;li&gt;a project that is built to run on either a PaaS architecture like Google App Engine or an IaaS architecture like Amazon EC2&lt;\/li&gt;\n&lt;\/ul&gt;\n\n&lt;p&gt;Any pointers in that direction would be most welcome.&lt;\/p&gt;\n"},{"Id":"1543965","CreationDate":"2009-10-09T14:00:25.453","OwnerUserId":"142017","Tags":["keystore",".net","nosql","database"],"Body":"&lt;p&gt;Are there any document databases and\/or key-value stores (something like Project Voldemort, MongoDB, etc.) that work well with .Net projects?  Most of the options I've looked at so far seem to be more geared towards the non-Microsoft\/Java\/open-source technologies and I was wondering if anyone had any experience\/recommendations with such solutions for the Microsoft stack.&lt;\/p&gt;\n"},{"Id":"1595562","CreationDate":"2009-10-20T15:42:33.963","OwnerUserId":"193116","Tags":["nosql","key-value","voldemort"],"Body":"&lt;p&gt;I can see myself using &lt;a href=&quot;http:\/\/project-voldemort.com\/&quot; rel=&quot;nofollow&quot;&gt;Project Voldermort&lt;\/a&gt; to cache results from a Traditional RDBMS query. But in this case, it provides almost no major advantage over other (Java) caching system such as EHcache Jcache etc. &lt;\/p&gt;\n\n&lt;p&gt;Where else could I use Project Voldermort or similar Key Value stores ?  How are you using this in your business applications ?&lt;\/p&gt;\n"},{"Id":"1604025","CreationDate":"2009-10-21T22:31:06.757","OwnerUserId":"105206","Tags":[".net","asp.net-mvc","nosql","mongodb"],"Body":"&lt;p&gt;Hi,\n I would like to use some kind of nosql database in my web application which is written in asp.net mvc , but cannot find anything useful. I have a looked at MongoDB and CouchDB but i'd like to have better api (strongly typed not magic strings) for my queries than they have.\nIs anything like this exists for .NET ?&lt;\/p&gt;\n"},{"Id":"1700827","CreationDate":"2009-11-09T12:55:09.057","OwnerUserId":"43617","Tags":["mongodb","nosql","database","select"],"Body":"&lt;p&gt;My doc has an array field &lt;strong&gt;Keys&lt;\/strong&gt;&lt;\/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Keys1&lt;\/strong&gt; and &lt;strong&gt;Keys2&lt;\/strong&gt; are two arrays&lt;\/p&gt;\n\n&lt;p&gt;I want all the docs where &lt;strong&gt;Keys&lt;\/strong&gt; contains any value in &lt;strong&gt;Keys1&lt;\/strong&gt; &lt;strong&gt;&lt;em&gt;AND&lt;\/em&gt;&lt;\/strong&gt; any value in &lt;strong&gt;Keys2&lt;\/strong&gt;&lt;\/p&gt;\n\n&lt;p&gt;Any advice?&lt;\/p&gt;\n\n&lt;p&gt;Thanks&lt;\/p&gt;\n"},{"Id":"1736840","CreationDate":"2009-11-15T07:01:18.117","OwnerUserId":"5274","Tags":["subjective","document-oriented-db","nosql"],"Body":"&lt;p&gt;I must be missing something, because everything I've seen so far suggests that it isn't any more interesting than a single table for storing blobs and a second table for tags that apply to it.&lt;\/p&gt;\n\n&lt;p&gt;Now I certainly can see some benefit to that from a design pattern, but why would I want to use a &quot;document-oriented DBMS&quot; instead of just building it using a traditional database like SQL Server, Oracle, or Postgres? &lt;\/p&gt;\n"},{"Id":"1740882","CreationDate":"2009-11-16T08:47:00.883","OwnerUserId":"78212","Tags":["google-app-engine","facebook","nosql"],"Body":"&lt;p&gt;IIRC, each Facebook user can have 5000 friends. The average is 130, but the maximum is much higher. Each of those friends can have 'liked' zero or more entities drawn from a set of millions. When e.g. looking at a subset of those entities, grouped by N axes (e.g. by category and size), how would you find those that friends have liked?&lt;\/p&gt;\n\n&lt;p&gt;With GAE, the cost is compute time rather than data size. You can't, at search-time, find all entries by any friend in a given category and size. You could add an entry for a user when each friend performs an action, but that would mean up to 5000 data entries each time a friend does something. That is a lot of CPU time, even in the background. You'd also miss new friends trying the app out, who were missed in the initial add. It makes sense to try to segment the space but friends are linked in very hard-to-group ways.&lt;\/p&gt;\n\n&lt;p&gt;Any ideas? Have you solved similar issues?&lt;\/p&gt;\n"},{"Id":"1777103","CreationDate":"2009-11-21T23:09:55.280","OwnerUserId":"51841","Tags":["nosql",".net","c#"],"Body":"&lt;p&gt;Which have the best integration with C#?\nWhich integrate with linq?\nAlso which would be easiest to integrate into an application?&lt;\/p&gt;\n"},{"Id":"1778763","CreationDate":"2009-11-22T13:54:11.200","OwnerUserId":"141346","Tags":["design-patterns","persistence","database","sql","nosql"],"Body":"&lt;p&gt;With the rise of the nosql movement we see different options for storing objects. Are there object persistence patterns that can handle both sql and nosql backends and allow to easily switch between the two?&lt;\/p&gt;\n"},{"Id":"1799958","CreationDate":"2009-11-25T21:08:57.013","OwnerUserId":"148361","Tags":["riak","erlang","nosql"],"Body":"&lt;p&gt;I want to play with Riak &lt;a href=&quot;http:\/\/riak.basho.com\/&quot; rel=&quot;nofollow&quot;&gt;http:\/\/riak.basho.com\/&lt;\/a&gt; or a least get it running on a Windows system. I have downloaded the source code and compiled it but that's where I get stuck, how do I start it?&lt;\/p&gt;\n"},{"Id":"1813612","CreationDate":"2009-11-28T19:57:57.137","OwnerUserId":"220599","Tags":["mongodb","couchdb","json","java","nosql"],"Body":"&lt;p&gt;I've been using the following web development stack for a few years:&lt;\/p&gt;\n\n&lt;p&gt;java\/spring\/hibernate\/mysql\/jetty\/wicket\/jquery&lt;\/p&gt;\n\n&lt;p&gt;For certain requirements, I'm considering switching to a NoSQL datastore with an AJAX frontend.  I would probably build the frontend with jQuery and communicate with the web application middleware using JSON.  I'm leaning toward MongoDB because of more dynamic query capabilities, but am still considering CouchDB.&lt;\/p&gt;\n\n&lt;p&gt;I'm not sure what to use in the middle.  Probably something RESTful?  My preference is to stick with Java (or maybe Scala or Groovy) since I'm using tools like Drools for rules and Shiro for security.  But then again, I want to pick something that is quick an easy to work with, so I'm open to other solutions.&lt;\/p&gt;\n\n&lt;p&gt;If you are building ajax\/json\/nosql solutions, I'd like to hear details about what tools you are using and any pros\/cons you've found to using them.&lt;\/p&gt;\n\n&lt;p&gt;Thanks!&lt;\/p&gt;\n"},{"Id":"1815731","CreationDate":"2009-11-29T14:58:16.577","OwnerUserId":"160104","Tags":["nosql","mongodb","database","couchdb","advice"],"Body":"&lt;p&gt;Hi everyone,&lt;\/p&gt;\n\n&lt;p&gt;Recently I'm exploring NoSQL Databases. I need an advice about how to store data in the most optimal and efficient way for a given problem. I'm targeting MongoDB, now. However it should be the same with CouchDB.&lt;\/p&gt;\n\n&lt;p&gt;Let's say we have these 3 Models:&lt;\/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Story:\n id\n title\n\nUser:\n id\n name\n\nVote:\n  id\n  story_id\n  user_id\n&lt;\/code&gt;&lt;\/pre&gt;\n\n&lt;p&gt;I want to be able to ask the database these questions:&lt;\/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Who has voted for this Story?&lt;\/li&gt;\n&lt;li&gt;What this User has Voted for?&lt;\/li&gt;\n&lt;\/ul&gt;\n\n&lt;p&gt;I'm doing simple joins while working with a relational DB. The question is, how should I store the data for those objects in order to be most efficient.&lt;\/p&gt;\n\n&lt;p&gt;For example, if I store the Vote objects as a subcollection of Stories it wont be easy to get the info - &quot;What a user has voted for&quot;.&lt;\/p&gt;\n\n&lt;p&gt;Well, I'll be glad to give me an advice.&lt;\/p&gt;\n\n&lt;p&gt;Thank you&lt;\/p&gt;\n"},{"Id":"1822444","CreationDate":"2009-11-30T21:15:26.127","OwnerUserId":"53529","Tags":["couchdb","nosql","non-relational-database"],"Body":"&lt;p&gt;Let's say I'm writing a log analysis application. The main domain object would be a LogEntry. In addition. users of the application define a LogTopic which describes what log entries they are interested in. As the application receives log entries it adds them to couchDB, and also checks them against all the LogTopics in the system to see if they match the criteria in the topic. If it does then the system should record that the entry matches the topic. Thus, there is a many-to-many relationship between LogEntries and LogTopics. &lt;\/p&gt;\n\n&lt;p&gt;If I were storing this in a RDBMS I would do something like:&lt;\/p&gt;\n\n&lt;pre&gt;&lt;code&gt;CREATE TABLE Entry (\n id int,\n ...\n)\n\nCREATE TABLE Topic (\n id int,\n ...\n)\n\nCREATE TABLE TopicEntryMap (\n entry_id int,\n topic_id int\n)\n&lt;\/code&gt;&lt;\/pre&gt;\n\n&lt;p&gt;Using CouchDB I first tried having just two document types. I'd have a LogEntry type, looking something like this:&lt;\/p&gt;\n\n&lt;pre&gt;&lt;code&gt;{\n  'type': 'LogEntry',\n  'severity': 'DEBUG',\n  ...\n}\n&lt;\/code&gt;&lt;\/pre&gt;\n\n&lt;p&gt;and I'd have a LogTopic type, looking something like this:&lt;\/p&gt;\n\n&lt;pre&gt;&lt;code&gt;{\n  'type': 'LogTopic',\n  'matching_entries': ['log_entry_1','log_entry_12','log_entry_34',....],\n  ...\n}\n&lt;\/code&gt;&lt;\/pre&gt;\n\n&lt;p&gt;You can see that I represent the relationship by using a &lt;code&gt;matching_entries&lt;\/code&gt; field in each LogTopic documents to store a list of LogEntry document ids. This works fine up to a point, but I have issues when multiple clients are both attempting to add a matching entry to a topic. Both attempt optimistic updates, and one fails. The solution I'm using now is to essentially reproduce the RDBMS approach, and add a third document type, something like:&lt;\/p&gt;\n\n&lt;pre&gt;&lt;code&gt;{\n  'type':'LogTopicToLogEntryMap',\n  'topic_id':'topic_12',\n  'entry_id':'entry_15'\n}\n&lt;\/code&gt;&lt;\/pre&gt;\n\n&lt;p&gt;This works, and gets past the concurrent update issues, but I have two reservations:&lt;\/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;I worry that I'm just using this\napproach because it's what I'd do in\na relational DB. I wonder if there's\na more couchDB-like (relaxful?)\nsolution. &lt;\/li&gt;\n&lt;li&gt;My views can no longer\nretrieve all the entries for a\nspecific topic in one call. My\nprevious solution allowed that (if I\nused the include_docs parameter).&lt;\/li&gt;\n&lt;\/ol&gt;\n\n&lt;p&gt;Anyone have a better solution for me? Would it help if I also posted the views I'm using?&lt;\/p&gt;\n"},{"Id":"1823536","CreationDate":"2009-12-01T01:47:28.043","OwnerUserId":"99971","Tags":["nosql","sql","security","sql-injection"],"Body":"&lt;p&gt;This may seem like an obvious (or not so obvious) question, but let me explain. I'm coding up a Google App Engine site using Google's database technology, BigTable. Any App Engine coders will know that Google has its own limited query language called GQL. As a result, I am tempted not to do any checking for SQL (or GQL) injection in my app since I assume Google is not using a raw string query on its backend methods to fetch data.&lt;\/p&gt;\n\n&lt;p&gt;Furthermore, libraries for DB technologies like CouchDB, MongoDB, and other object or document (aka NoSQL) databases seem to obviate the need to check if a malicious user is injecting database manipulation commands. They often have libraries that directly map the objects in the database to object in your language of choice. I know there are many SQL libraries that do this as well, but I assume that at some level they are combining parameters to run a query over a string, and thusly I must still use SQL Injection protection even with those frameworks.&lt;\/p&gt;\n\n&lt;p&gt;Am I being short-sighted? Or is it only a matter of time till the next great DB system takes hold and then I will see injection into those systems?&lt;\/p&gt;\n"},{"Id":"1823924","CreationDate":"2009-12-01T04:01:48.117","OwnerUserId":"15124","Tags":["nosql"],"Body":"&lt;p&gt;Just came across this article about NOSQL patterns (not mine). It's covers lots of NOSQL implementation patterns, from a developers point of view (like hashing and replication patterns).&lt;\/p&gt;\n\n&lt;p&gt;All in all it's very useful in case anyone is asking themselves about the question:&lt;\/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Where can I find information about NOSQL implementation patterns?&lt;\/p&gt;\n&lt;\/blockquote&gt;\n\n&lt;p&gt;So added a question here, please feel free to add more answers!&lt;\/p&gt;\n"},{"Id":"1839218","CreationDate":"2009-12-03T11:00:52.403","OwnerUserId":"223741","Tags":["cassandra","amazon-simpledb","nosql"],"Body":"&lt;p&gt;I'm working on an application where data size and SQL queries are going to be heavy. I am thinking between Cassandra or Amazon SimpleDB. Can you please suggest which is more suitable in this kind of scenario?&lt;\/p&gt;\n\n&lt;p&gt;Cassandra data indexing seems better than Amazon simpleDB, but the queries have fewer options compared to Amazon SimpleDB. Seems Amazon SimpleDB has heavy I\/O rates.&lt;\/p&gt;\n\n&lt;p&gt;Few of the complex use cases are user activities with different filters that user can put to narrow down to some interesting activities.&lt;\/p&gt;\n\n&lt;p&gt;If you think there is anyother cleaner and better solution apart from these two, please suggest.&lt;\/p&gt;\n"},{"Id":"1841883","CreationDate":"2009-12-03T18:26:14.497","OwnerUserId":"36590","Tags":["couchdb","sequence","indexing","view","nosql"],"Body":"&lt;p&gt;I think read somewhere that when a View is requested the &quot;map&quot; is only run across documents that have been added since the last time it was requested? How is this determined? I thought I saw something about a sequence number. Is this something that you can get to? Its not part of the UUID trailing on the _rev field is it?&lt;\/p&gt;\n\n&lt;p&gt;Any way to force a 'recalc' of the entire View (across all records)?&lt;\/p&gt;\n"},{"Id":"1849204","CreationDate":"2009-12-04T19:40:45.667","OwnerUserId":"30826","Tags":["cassandra","nosql"],"Body":"&lt;p&gt;I'm evaluating a storage platform for an upcoming project and keep coming back to Cassandra. For this project loosing &lt;em&gt;any&lt;\/em&gt; amount of data is unacceptable. So far we've used a relational database (Microsoft SQL Server), but the data is so varied and large that it has become an issue to store and query.&lt;\/p&gt;\n\n&lt;p&gt;Is Cassandra robust enough to use as a primary data store? Or should it only be used to mirror existing data to speed up access?&lt;\/p&gt;\n"},{"Id":"1853735","CreationDate":"2009-12-05T22:49:25.903","OwnerUserId":"145357","Tags":["mongodb","nosql","best-practices","nested-sets","tree"],"Body":"&lt;p&gt;What're the best practices to store nested sets (like trees of comments) in MongoDB?&lt;\/p&gt;\n\n&lt;p&gt;I mean, every comment can have a parent comment and children-comments (answers).&lt;\/p&gt;\n\n&lt;p&gt;Storing them like this:&lt;\/p&gt;\n\n&lt;pre&gt;&lt;code&gt;{\n   title: &quot;Hello&quot;,\n   body: &quot;Please comment me!&quot;,\n   comments: [\n        {\n            author: &quot;Peter&quot;,\n            text: &quot;Hi there&quot;,\n            answers: [\n                  {\n                      author: &quot;Peter&quot;,\n                      text: &quot;Hi there&quot;,\n                      answers: [\n                                 { author: &quot;Ivan&quot;, text: &quot;Hi there&quot; },\n                                 { author: &quot;Nicholas&quot;, text: &quot;Hi there&quot; }\n                      ]\n                  },\n                  { author: &quot;Ivan&quot;, text: &quot;Hi there&quot; },\n                  { author: &quot;Nicholas&quot;, text: &quot;Hi there&quot; },\n            ]\n        },\n        { author: &quot;Ivan&quot;, text: &quot;Hi there&quot; },\n        { author: &quot;Nicholas&quot;, text: &quot;Hi there&quot; },\n   ]\n}\n&lt;\/code&gt;&lt;\/pre&gt;\n\n&lt;p&gt;is not cool, because we can't, for example, ask for &quot;all post which are commented by Peter&quot; without map\/reduce (hm, can we?)&lt;\/p&gt;\n"},{"Id":"1886650","CreationDate":"2009-12-11T08:38:13.340","OwnerUserId":"18548","Tags":["nosql","datastore","scalability","production-environment","keyvalue"],"Body":"&lt;p&gt;Are there are production quality nosql stores that I can use on a production system. I have looked at cassandra, tokyodb, couchdb etc but none of them seem to be ready for deployments on production like environments. I am talking thousands of requests per minute and lots of reads\/writes\/updates. My only concern is speed and service times. Does anybody know of production systems that use nosql stores effectively ? Does anybody know of a nosql store that is backed by a big enterprise like Google\/Yahoo\/ IBM ?&lt;\/p&gt;\n"},{"Id":"1899843","CreationDate":"2009-12-14T09:18:54.737","OwnerUserId":"18548","Tags":["nosql","google-app-engine","entity-relationship","key-value","google-datastore"],"Body":"&lt;p&gt;I am looking for nosql key value stores that also provide for storing\/maintaining relationships between stored entities. I know Google App Engine's datastore allows for owned and unowned relationships between entities. Does any of the popular nosql store's provide something similar? &lt;\/p&gt;\n\n&lt;p&gt;Even though most of them are schema less, are there methods to appropriate relationships onto a key value store? &lt;\/p&gt;\n"},{"Id":"1905688","CreationDate":"2009-12-15T07:11:30.533","OwnerUserId":"79837","Tags":["nosql","non-relational-database","rdbms","database-design","scalability"],"Body":"&lt;p&gt;I've been reading up on a lot of posts about non-relational databases, the whole NOSQL movement, and there's a lot of fresh new activity around it. It seems like a very interesting approach to building highly scalable web applications but unfortunately (but also a good thing at this nascent stage) there isn't quite a clear leader\/standard at the moment.&lt;\/p&gt;\n\n&lt;p&gt;My background is in the LAMP stack (with MySQL as the dB) and I wanted to understand what differences and limitations there would be - but with using the example of real life web applications out there. There's a ton of good articles about the theory of pros\/cons of RDBMS vs non-RDBMS, but I haven't found anything that walks through an example of how an existing web app (for example social bookmarking) would be built different to take advantage of the new dB structure and what features one would have to leave out if any - where the NOSQL dB could be key-value or document-centric or graphs.&lt;\/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Would anyone be willing to take a stab at a high-level comparison of a NOSQL vs RDBMS model\/architecture of a real-world web app (such as social bookmarking or any other example that might explain the concepts well)?&lt;\/strong&gt;&lt;\/p&gt;\n\n&lt;p&gt;&lt;em&gt;For reference to others, here are a few of the articles I have come across:&lt;\/em&gt;&lt;\/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;http:\/\/stackoverflow.com\/questions\/1189911\/non-relational-database-design&quot;&gt;http:\/\/stackoverflow.com\/questions\/1189911\/non-relational-database-design&lt;\/a&gt;&lt;\/li&gt;\n&lt;li&gt;&lt;a href=&quot;http:\/\/nosql-databases.org\/&quot; rel=&quot;nofollow&quot;&gt;http:\/\/nosql-databases.org\/&lt;\/a&gt;&lt;\/li&gt;\n&lt;li&gt;&lt;a href=&quot;http:\/\/linux-mag.com\/cache\/7579\/1.html&quot; rel=&quot;nofollow&quot;&gt;http:\/\/linux-mag.com\/cache\/7579\/1.html&lt;\/a&gt;&lt;\/li&gt;\n&lt;li&gt;&lt;a href=&quot;http:\/\/blog.boxedice.com\/2009\/07\/25\/choosing-a-non-relational-database-why-we-migrated-from-mysql-to-mongodb\/&quot; rel=&quot;nofollow&quot;&gt;http:\/\/blog.boxedice.com\/2009\/07\/25\/choosing-a-non-relational-database-why-we-migrated-from-mysql-to-mongodb\/&lt;\/a&gt;&lt;\/li&gt;\n&lt;li&gt;&lt;a href=&quot;http:\/\/bret.appspot.com\/entry\/how-friendfeed-uses-mysql&quot; rel=&quot;nofollow&quot;&gt;http:\/\/bret.appspot.com\/entry\/how-friendfeed-uses-mysql&lt;\/a&gt;&lt;\/li&gt;\n&lt;li&gt;&lt;a href=&quot;http:\/\/metabrew.com\/article\/anti-rdbms-a-list-of-distributed-key-value-stores\/&quot; rel=&quot;nofollow&quot;&gt;http:\/\/metabrew.com\/article\/anti-rdbms-a-list-of-distributed-key-value-stores\/&lt;\/a&gt;&lt;\/li&gt;\n&lt;li&gt;&lt;a href=&quot;http:\/\/rackspacecloud.com\/blog\/2009\/11\/09\/nosql-ecosystem\/&quot; rel=&quot;nofollow&quot;&gt;http:\/\/rackspacecloud.com\/blog\/2009\/11\/09\/nosql-ecosystem\/&lt;\/a&gt;&lt;\/li&gt;\n&lt;li&gt;&lt;a href=&quot;http:\/\/horicky.blogspot.com\/2009\/11\/nosql-patterns.html&quot; rel=&quot;nofollow&quot;&gt;http:\/\/horicky.blogspot.com\/2009\/11\/nosql-patterns.html&lt;\/a&gt;&lt;\/li&gt;\n&lt;\/ul&gt;\n"},{"Id":"1909110","CreationDate":"2009-12-15T17:39:15.990","OwnerUserId":"231527","Tags":["couchdb","nosql"],"Body":"&lt;p&gt;Why is CouchDB so popular among non-relational databases?&lt;\/p&gt;\n"},{"Id":"1924871","CreationDate":"2009-12-17T21:54:55.437","OwnerUserId":"53185","Tags":["nosql","mongodb","tokyo-tyrant","tokyo-cabinet","reliability"],"Body":"&lt;p&gt;I'm deciding between go for a NON-SQL engine or a regular SQL one for a document managment system for small bussines.&lt;\/p&gt;\n\n&lt;p&gt;I have experience with firebird\/sql server and found a good track of reliability (specially with firebird).&lt;\/p&gt;\n\n&lt;p&gt;This market is full of crappy &quot;servers&quot; (clon-made PC, the mayority), cheap harddisk, rarely use of RAID or anything like that, some are in locations where a power-off is normal, some not have a UPS, etc... (I will include off-site auto-backup to external servers, but that no change the internal setup). (I know about end-user education about such proper setups, but is stupid depend on that, so stick to te point)&lt;\/p&gt;\n\n&lt;p&gt;From the desing point of view, a schema-less database is the way to go for my system, but, I worry if any of the actual solutions (MongoDb, Tokyo Cabinet, etc) are like firebird and survice crash, malfunctions &amp;#38;amp; abuse so data corruption is very rare.&lt;\/p&gt;\n\n&lt;p&gt;The plan is store the office documents there &amp;#38;amp; provide a central repository.&lt;\/p&gt;\n"},{"Id":"1930243","CreationDate":"2009-12-18T19:33:02.310","OwnerUserId":"53185","Tags":["nosql","firebird","mysql","architecture","database-design"],"Body":"&lt;p&gt;For make a document managment system, I'm looking at document stores like MongoDB, but because I have more experience with regular databases (Firebird, Sql Server, Mysql) I wonder if is possible model a document store on top a relational one.&lt;\/p&gt;\n\n&lt;p&gt;The advantages about a document store, schema less:&lt;\/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Fit well to the task of store arbitrary metadata about files&lt;\/li&gt;\n&lt;li&gt;No need to upgrade schemas&lt;\/li&gt;\n&lt;li&gt;According to mongodb, excellent performance for BLOB like video&lt;\/li&gt;\n&lt;li&gt;Easier scalability&lt;\/li&gt;\n&lt;\/ul&gt;\n\n&lt;p&gt;But with a relational one:&lt;\/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Referencial integrity&lt;\/li&gt;\n&lt;li&gt;Better tooling&lt;\/li&gt;\n&lt;li&gt;More resilent to crash &amp;#38;amp; corruptions&lt;\/li&gt;\n&lt;li&gt;SQL&lt;\/li&gt;\n&lt;\/ul&gt;\n\n&lt;p&gt;So, how could work a relational database in this case?&lt;\/p&gt;\n"},{"Id":"1937011","CreationDate":"2009-12-20T20:52:14.330","OwnerUserId":"53185","Tags":["nosql","gt.m"],"Body":"&lt;p&gt;Looking for NOSQL engines I found about GT.M here:\n&lt;a href=&quot;http:\/\/www.slideshare.net\/robtweed\/gtm-a-tried-and-tested-schemaless-database&quot; rel=&quot;nofollow&quot;&gt;http:\/\/www.slideshare.net\/robtweed\/gtm-a-tried-and-tested-schemaless-database&lt;\/a&gt;&lt;\/p&gt;\n\n&lt;p&gt;At first look good, with SQL ODBC support. But I wonder if exist real experience with this? Somebody have use it?&lt;\/p&gt;\n"},{"Id":"1950863","CreationDate":"2009-12-23T05:31:06.220","OwnerUserId":"114635","Tags":["couchdb","nosql","document-oriented-db"],"Body":"&lt;p&gt;Using &lt;a href=&quot;http:\/\/en.wikipedia.org\/wiki\/CouchDB&quot; rel=&quot;nofollow&quot;&gt;CouchDB&lt;\/a&gt;, I currently have a document which represents an idea, you can rate this idea. Every idea is one document and every rating is a different document. I am doing this like this to avoid concurrent access problems when people are rating an idea.&lt;\/p&gt;\n\n&lt;p&gt;My documents look like that (I have simplified them):&lt;\/p&gt;\n\n&lt;p&gt;An idea:&lt;\/p&gt;\n\n&lt;pre&gt;&lt;code&gt;{\n &quot;_id&quot;: &quot;idea1&quot;,\n &quot;title&quot;: &quot;A great idea&quot;\n}\n&lt;\/code&gt;&lt;\/pre&gt;\n\n&lt;p&gt;Ratings:&lt;\/p&gt;\n\n&lt;pre&gt;&lt;code&gt;{\n &quot;_id&quot;: &quot;rating1&quot;,\n &quot;rating&quot;: 1,\n &quot;author&quot;: &quot;author1&quot;\n}\n\n{\n &quot;_id&quot;: &quot;rating2&quot;,\n &quot;rating&quot;: 1,\n &quot;author&quot;: &quot;author2&quot;\n}\n&lt;\/code&gt;&lt;\/pre&gt;\n\n&lt;p&gt;I currently use a reduce function to return me the idea id and his\/her rating (a simple sum of the ratings):&lt;\/p&gt;\n\n&lt;p&gt;Map:&lt;\/p&gt;\n\n&lt;pre&gt;&lt;code&gt;function(doc) {\n  if (doc.type == &quot;rating&quot;)\n    emit(doc.idea_id, doc.rating);    \n}\n&lt;\/code&gt;&lt;\/pre&gt;\n\n&lt;p&gt;Reduce:&lt;\/p&gt;\n\n&lt;pre&gt;&lt;code&gt;function(keys, values, rereduce) {\n  return sum(values);\n}\n&lt;\/code&gt;&lt;\/pre&gt;\n\n&lt;p&gt;My question is: how could I &quot;join&quot; the &quot;idea&quot; document with the reduce result which represent the rating for the idea?&lt;\/p&gt;\n"},{"Id":"1951061","CreationDate":"2009-12-23T06:45:56.323","OwnerUserId":"223370","Tags":["couchdb","nosql"],"Body":"&lt;p&gt;I am looking at implementing a CouchDB server to provide ad-hoc searching of some metadata that we store for an internal business operation.&lt;\/p&gt;\n\n&lt;p&gt;We store a number of &quot;attributes&quot; like size, source, submit date, and URL for the &quot;jobs&quot; in our internal process.&lt;\/p&gt;\n\n&lt;p&gt;This is all well and good in our relational database, but our users would like to build lists of similar jobs by providing &quot;search criteria&quot; similar to doing a google search. So the user could say &quot;show me all jobs which are greater than XXX and submitted after YYY&quot; and get back a list of descriptions and URLs.&lt;\/p&gt;\n\n&lt;p&gt;This sounds perfect for Couch, and from what I have researched it looks like it will work well.&lt;\/p&gt;\n\n&lt;p&gt;My question is how well will it scale with appropriate hardware? We have between 150-200 million such documents, and between 11-30 attributes per document. The metadata is a few kbytes in size at the most.&lt;\/p&gt;\n\n&lt;p&gt;Im initially looking at having a quadcore server (VM) serving this up for testing but I need it to scale up to support between 100-250 users simultaneously.&lt;\/p&gt;\n\n&lt;p&gt;I know I can do this with most db servers, but I am looking for something that provides the ad-hoc querying aspect (over REST or HTTP is fine we have our own search tools).&lt;\/p&gt;\n\n&lt;p&gt;Has anyone had experience setting up Couch and using it for production loads at this level?&lt;\/p&gt;\n"},{"Id":"1958365","CreationDate":"2009-12-24T13:43:08.853","OwnerUserId":"42151","Tags":["nosql","ruby","mongoid","mongomapper"],"Body":"&lt;p&gt;I have tried MongoMapper and it is feature complete (offering almost all AR functionality) but i was not very happy with the performance when using large datasets. Has anyone compared with Mongoid? Any performance gains ?&lt;\/p&gt;\n"},{"Id":"1959818","CreationDate":"2009-12-24T21:31:20.847","OwnerUserId":"68183","Tags":["nosql"],"Body":"&lt;p&gt;do any of these nosql type databases have GUI explorers where you can run queries, view the &quot;tables&quot; and their attributes etc?&lt;\/p&gt;\n"},{"Id":"1961013","CreationDate":"2009-12-25T11:23:30.373","OwnerUserId":"70293","Tags":["database","nosql","mongodb","python","couchdb"],"Body":"&lt;p&gt;I'm looking a way to automate schema migration for such databases like MongoDB or CouchDB.&lt;\/p&gt;\n\n&lt;p&gt;Preferably, this instument should be written in python, but any other language is ok.&lt;\/p&gt;\n"},{"Id":"1968589","CreationDate":"2009-12-28T08:53:40.530","OwnerUserId":"239472","Tags":["patterns","social-networking","sql","nosql","application-architecture"],"Body":"&lt;p&gt;I need to design \/ architect \/ develop a web based social network type application.&lt;\/p&gt;\n\n&lt;p&gt;Basic functionality:&lt;br&gt;\n - users create accounts on the system&lt;br&gt;\n - users agree to &quot;friend&quot; each other&lt;br&gt;\n - users create content within system&lt;br&gt;\n - users specifies which friends may view\/edit content that they created  &lt;\/p&gt;\n\n&lt;p&gt;Surely this core functionality has been created many times before?  Are there any best practice patterns out there for how to implement this sort of thing?&lt;\/p&gt;\n\n&lt;p&gt;I'm most interested in how the database for this would look.&lt;\/p&gt;\n\n&lt;p&gt;What would this look like from a SQL perspective (any database)?&lt;br&gt;\nWhat would this look like from a NOSQL perspective (any NOSQL database)?&lt;\/p&gt;\n\n&lt;p&gt;The thing I am most interested in, is how is the question of &quot;content visibility&quot; solved within the database?   i.e. how does the database\/application ensure that only approved friends may see the user created content?&lt;\/p&gt;\n\n&lt;p&gt;Thanks&lt;\/p&gt;\n"},{"Id":"1974069","CreationDate":"2009-12-29T11:02:32.977","OwnerUserId":"18548","Tags":["graph","nosql","datastore","getting-started","infogrid"],"Body":"&lt;p&gt;I am trying to use this software called &lt;a href=&quot;http:\/\/infogrid.org\/&quot; rel=&quot;nofollow&quot;&gt;InfoGrid&lt;\/a&gt; for a project that I am building. Can someone please point me to some basic getting started articles. I don't see any documentation on the site. &lt;\/p&gt;\n\n&lt;p&gt;&lt;em&gt;Peopl with enough reputations, please edit the question and add the tag &lt;strong&gt;InfoGrid&lt;\/strong&gt; to this question.&lt;\/em&gt; &lt;\/p&gt;\n"},{"Id":"1985352","CreationDate":"2009-12-31T13:15:41.490","OwnerUserId":"4093","Tags":["nosql"],"Body":"&lt;p&gt;I'm a .NET programmer and want to have a look at a alternative to RDBMS. What is the moste mature choice at the moment (most mature drivers and most functionality in the database)?&lt;\/p&gt;\n\n&lt;p&gt;I have looked at MongoDB and I'm pleased with it.&lt;\/p&gt;\n"},{"Id":"1995216","CreationDate":"2010-01-03T15:04:17.820","OwnerUserId":"242709","Tags":["nosql","bigtable","sql","join"],"Body":"&lt;p&gt;Hi,&lt;\/p&gt;\n\n&lt;p&gt;I have gone through some articles regarding Bigtable and NOSQL. It is very interesting that they avoid JOIN operations. &lt;\/p&gt;\n\n&lt;p&gt;As a basic example, let's take Employee and Department table and assume the data is spread across multiple tables \/ servers.&lt;\/p&gt;\n\n&lt;p&gt;Just want to know, if data is spread across multiple servers, how do we do JOIN or UNION operations?&lt;\/p&gt;\n"},{"Id":"1997069","CreationDate":"2010-01-04T01:23:26.413","OwnerUserId":"47281","Tags":["nosql","amazon","simpledb"],"Body":"&lt;p&gt;I have heard that Amazon uses a key-value data store - that it does not use a traditional relational normalized db.  Speaking as someone who only has used the traditional approach, how does this work?  Don't you need to do the following?&lt;\/p&gt;\n\n&lt;p&gt;&lt;code&gt;select * from book where book_id = n&lt;\/code&gt; &lt;\/p&gt;\n\n&lt;p&gt;Or a: &lt;\/p&gt;\n\n&lt;p&gt;&lt;code&gt;select * from book where author_id = y&lt;\/code&gt;&lt;\/p&gt;\n\n&lt;p&gt;How can you build a site\/app with so much data and so many relationships without a normalized db?&lt;\/p&gt;\n"},{"Id":"2012900","CreationDate":"2010-01-06T12:35:19.940","OwnerUserId":"166921","Tags":["sqlite","nosql","json","yaml","configuration"],"Body":"&lt;p&gt;Do you know any SQLite-like database that &lt;strong&gt;stores its data in easily readable plain text format&lt;\/strong&gt; (like multi-line json or yaml)?&lt;\/p&gt;\n\n&lt;p&gt;I'd like to store some data along with my project in version control system but if I use sqlite I can't merge data changes that occurred in different working copies.&lt;\/p&gt;\n\n&lt;p&gt;I don't want to use just some kind of config file because I want my program to be able to modify this data and query it efficiently &lt;strong&gt;without loading all data into memory&lt;\/strong&gt;.&lt;\/p&gt;\n\n&lt;p&gt;Data in database might be accessed through some kind of sql dialect but that is not a requirement.&lt;\/p&gt;\n\n&lt;p&gt;EDIT:&lt;\/p&gt;\n\n&lt;p&gt;I am seeking for something that builds and maintains &lt;strong&gt;index&lt;\/strong&gt; file for json\/yaml\/whatever that allows for accessing fragments of the data as &lt;strong&gt;fast&lt;\/strong&gt; as proper database can do it.&lt;\/p&gt;\n\n&lt;p&gt;I also require ability to &lt;strong&gt;modify&lt;\/strong&gt; the data so solutions that allow only for querying are not enough. &lt;\/p&gt;\n"},{"Id":"2041622","CreationDate":"2010-01-11T11:57:45.873","OwnerUserId":"55408","Tags":["nosql","gis","spatial","spatialite"],"Body":"&lt;p&gt;Has any of you had any experience with using NoSQL (non-relational) databases to store spatial data? Are there any potential benefits (speed, space, ...) of using such databases to hold data for, say, a desktop application (compared to using SpatiaLite or PostGIS)?&lt;\/p&gt;\n\n&lt;p&gt;I've seen &lt;a href=&quot;http:\/\/gissolved.blogspot.com\/2009\/06\/spatial-indexing-mongodb-with-rtree.html&quot; rel=&quot;nofollow&quot;&gt;posts about using MongoDB for spatial data&lt;\/a&gt;, but I'm interested in some performance comparison.&lt;\/p&gt;\n"},{"Id":"2081080","CreationDate":"2010-01-17T13:24:32.173","OwnerUserId":"55408","Tags":["nosql","sqlite","embedded-database",".net"],"Body":"&lt;p&gt;I'm thinking about using\/implementing some kind of an embedded key-value (or document) store for my Windows desktop application. I want to be able to store various types of data (GPS tracks would be one example) and of course be able to query this data. The amount of data would be such that it couldn't all be loaded into memory at the same time.&lt;\/p&gt;\n\n&lt;p&gt;I'm thinking about using sqlite as a storage engine for a key-value store, something like &lt;a href=&quot;http:\/\/yserial.sourceforge.net\/&quot; rel=&quot;nofollow&quot;&gt;y-serial&lt;\/a&gt;, but written in .NET. I've also read about &lt;a href=&quot;http:\/\/bret.appspot.com\/entry\/how-friendfeed-uses-mysql&quot; rel=&quot;nofollow&quot;&gt;FriendFeed's usage of MySQL to store schema-less data&lt;\/a&gt;, which is a good pointer on how to use RDBMS for non-relational data. sqlite seems to be a good option because of its simplicity, portability and library size. &lt;\/p&gt;\n\n&lt;p&gt;My question is whether there are any other options for an embedded non-relational store? It doesn't need to be distributable and it doesn't have to support transactions, but it does have to be accessible from .NET and it should have a small download size.&lt;\/p&gt;\n\n&lt;p&gt;UPDATE: I've found an article titled &lt;a href=&quot;http:\/\/www.sqlite.org\/cvstrac\/wiki?p=KeyValueDatabase&quot; rel=&quot;nofollow&quot;&gt;SQLite as a Key-Value Database &lt;\/a&gt; which compares sqlite with Berkeley DB, which is an embedded key-value store library.&lt;\/p&gt;\n"},{"Id":"2081148","CreationDate":"2010-01-17T13:49:16.350","OwnerUserId":"26444","Tags":["database-design","faceted-search","dynamic-taxonomy","solr","nosql"],"Body":"&lt;p&gt;I've been thinking for a while about modeling typical ecommerce site with ebay-like taxonomy and attributes dependent on a particular product category.&lt;\/p&gt;\n\n&lt;p&gt;First attempt was choosing between EAV and Table Per Class db inheritance modeling. I've chosen the latter because of the performance, but what it meant was creating dedicated table for each specific (leaf in the category tree) product category with specific category attributes (like resolution for TVs) modeled as a separate column. &lt;\/p&gt;\n\n&lt;p&gt;While performant this setup is not flexible if you need adding attributes to the existing categories or adding new categories. For each such change following is needed:&lt;\/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Alter\/create table&lt;\/li&gt;\n&lt;li&gt;New form for filtering withing such category by specific attributes&lt;\/li&gt;\n&lt;li&gt;New code for generating db queries for searching and filtering &lt;\/li&gt;\n&lt;li&gt;Some new viewmodels\/DTOs and views for presenting products from new categories&lt;\/li&gt;\n&lt;\/ul&gt;\n\n&lt;p&gt;To cope with that complexity I think some kind of meta representation of those attributes is needed (even outside of the application) in xml or even excel file, so that on each change all mentioned code could be auto-generated (sql\/orm queries, application code, templates). So it can help with development, but still testing and extra deployment is needed.&lt;\/p&gt;\n\n&lt;p&gt;At that point I've learned that ebay doesn't really use relational db for search, and that their taxonomy is so flexible, that they can quite quickly add new leaf categories. Also their categories aren't probably categories from a hierarchical tree modeled in relational db, but just search attributes (facets).&lt;\/p&gt;\n\n&lt;p&gt;After having a quick look into most promising dedicated faceted search setup (separate Solr instance) I'm not sure whether it could help me in being flexible to taxonomy changes since usually Solr just mirrors somehow relational DB, so specific category attributes would still have to be modelled in DB as DBMS metadata, so eg. dynamic generating UI forms for filtering attributes would be hard unless:&lt;\/p&gt;\n\n&lt;p&gt;1) I would keep the data in RDBMS using EAV fasion and overcome its performance problems with using SOLR search (but there still would be problems with EAV messiness, no data integrity enforcement etc)&lt;\/p&gt;\n\n&lt;p&gt;2) I would keep just the attributes dictionary (ie. just their names and types) in RDBMS and store the specific attribute values in SOLR using it as kind of non-relational data store apart from search facility. I'm not convinced to this solution either (even if it's possible) since application would be coupled to tight with solr (ie. product edition admin CRUD would interact with SOLR directly).&lt;\/p&gt;\n\n&lt;p&gt;What are your thoughts? Do you think that for any kind of such (performant) taxonomy flexibility code generation is inevitable? How would you handle that? Maybe some separate data dictionary in EAV fashion in DB just for code generation purposes? I guess I could also use something like MongoDB, but the UI code generation (runtime or not) would still need some kind of metadata.&lt;\/p&gt;\n\n&lt;p&gt;There's lot of question here, but I didn't want to break it up into smaller questions since I'm interested in a general design approach when dealing with a bigger class of such problems.&lt;\/p&gt;\n"},{"Id":"2113866","CreationDate":"2010-01-21T23:40:50.693","OwnerUserId":"17398","Tags":["fossil","sql","nosql"],"Body":"&lt;p&gt;I recently came across &lt;a href=&quot;http:\/\/www.fossil-scm.org\/index.html\/doc\/tip\/www\/theory1.wiki&quot; rel=&quot;nofollow&quot;&gt;http:\/\/www.fossil-scm.org\/index.html\/doc\/tip\/www\/theory1.wiki&lt;\/a&gt; by D. Richard Hipp, the developer responsible for SQLite. &lt;\/p&gt;\n\n&lt;p&gt;it go me thinking, is Fossil the only NoSQL database that uses SQL?&lt;\/p&gt;\n\n&lt;p&gt;Do others uses SQL as a 'High Level Scripting Language'?&lt;\/p&gt;\n"},{"Id":"2124216","CreationDate":"2010-01-23T18:35:19.713","OwnerUserId":"144123","Tags":[".net","nosql","non-relational-database","persistence"],"Body":"&lt;p&gt;Anyone have any recommendations for a non-relational\/partially-relational DB with a .NET API?&lt;\/p&gt;\n"},{"Id":"2138454","CreationDate":"2010-01-26T09:25:44.210","OwnerUserId":"231458","Tags":["mongodb","nosql","howto"],"Body":"&lt;p&gt;I am having trouble grasping how to filter embedded documents in MongoDB, and am starting to think I should be using a relational association, but that feels wrong in the document-store context.&lt;\/p&gt;\n\n&lt;p&gt;Sticking with a typical blog\/comment system, I have a collection of &lt;code&gt;blogs&lt;\/code&gt;, and each &lt;code&gt;blog&lt;\/code&gt; has many &lt;code&gt;comments&lt;\/code&gt;.  The comments are stored as embedded documents inside the blog document.&lt;\/p&gt;\n\n&lt;p&gt;It is very simple to filter my &lt;code&gt;blogs&lt;\/code&gt; collection, but in order to filter my &lt;code&gt;comments&lt;\/code&gt; embedded in each &lt;code&gt;blog&lt;\/code&gt;, I am having to load them all into memory (retrieve all into a Ruby array), and loop through each comment, returning ones that match a specific criteria.&lt;\/p&gt;\n\n&lt;p&gt;My efforts to filter embedded documents using dot notation is failing, and bringing back all sub documents.&lt;\/p&gt;\n\n&lt;p&gt;Is there a better way of getting MongoDB to filter these for me, or should I resign myself to relational associations? (Pulling back all embedded documents and manually filtering is going to be too intensive in the long run)&lt;\/p&gt;\n"},{"Id":"2140011","CreationDate":"2010-01-26T14:33:38.280","OwnerUserId":"50676","Tags":["c","nosql","couchdb","mongo"],"Body":"&lt;p&gt;Hello all,&lt;\/p&gt;\n\n&lt;p&gt;I'm working on an application that I'm going to write with C and i am considering to use a nosql db for storing timeseries data with at most 8 or 9 fields. But in every 5 minutes there will huge write operations such as 2-10 million rows and then there will be reads(but performance is not as crucial in read as in the write operation).&lt;\/p&gt;\n\n&lt;p&gt;I'm considering to use a NoSQL db here in order to store the data but couldn't decide on which one to use. Couchdb seems to have a stable driver called pillowtalk for C; but Mongo's driver doesn't look as promising as pillowtalk. I'm also open to other suggestions.&lt;\/p&gt;\n\n&lt;p&gt;What is your recommendation?&lt;\/p&gt;\n"},{"Id":"2167481","CreationDate":"2010-01-30T10:01:52.003","OwnerUserId":"247469","Tags":["database","engine","nosql"],"Body":"&lt;p&gt;Hi,&lt;\/p&gt;\n\n&lt;p&gt;Has anyone had any experience with the Esent database engine? I've been taking a look at what it's used for, and am getting excited.&lt;\/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Active Directory is implemented on top of an Indexed Sequential Access Method (ISAM) table manager, historically called &quot;Jet.&quot; This same table manager is used by Exchange, File Replication service (FRS) the security configuration editor, Certificate Services, Windows Internet Name Service (WINS), and various other Windows components.\n  &lt;a href=&quot;http:\/\/technet.microsoft.com\/en-us\/library\/cc961824.aspx&quot; rel=&quot;nofollow&quot;&gt;http:\/\/technet.microsoft.com\/en-us\/library\/cc961824.aspx&lt;\/a&gt;&lt;\/p&gt;\n&lt;\/blockquote&gt;\n\n&lt;p&gt;There's also a c# wrapper around the API &lt;a href=&quot;http:\/\/www.codeplex.com\/ManagedEsent&quot; rel=&quot;nofollow&quot;&gt;http:\/\/www.codeplex.com\/ManagedEsent&lt;\/a&gt;, and is being used by Ayende Rahien's DivanDB (.net document storage LINQ engine)  &lt;a href=&quot;https:\/\/rhino-tools.svn.sourceforge.net\/svnroot\/rhino-tools\/branches\/rhino-divandb&quot; rel=&quot;nofollow&quot;&gt;https:\/\/rhino-tools.svn.sourceforge.net\/svnroot\/rhino-tools\/branches\/rhino-divandb&lt;\/a&gt; &lt;\/p&gt;\n\n&lt;p&gt;Anyhow- does anyone know of a &quot;table browser&quot; \/ some for of GUI for managing Esent?&lt;\/p&gt;\n\n&lt;p&gt;Thanks,&lt;\/p&gt;\n\n&lt;p&gt;James&lt;\/p&gt;\n"},{"Id":"2170152","CreationDate":"2010-01-31T01:08:31.223","OwnerUserId":"88054","Tags":["nosql","mongodb","couchdb","php5","php5.3"],"Body":"&lt;p&gt;What are the best practices for NoSQL Databases, OODBs or whatever other acronyms may exist for them?&lt;\/p&gt;\n\n&lt;p&gt;For example, I've often seen a field &quot;type&quot; being used for deciding how the DB document (in couchDB\/mongoDB terms) should be interpreted by the client, the application.&lt;\/p&gt;\n\n&lt;p&gt;Where applicable, use PHP as a reference language. Read: I'm also interested in how such data can be best handled on the client side, not only strictly the DB structure. This means practically that I'm also looking for patterns like &quot;ORM&quot;s for SQL DBs (active record, data mapper, etc).&lt;\/p&gt;\n\n&lt;p&gt;Don't hesitate making statements about how such a DB and the new features of PHP 5.3 could best work together.&lt;\/p&gt;\n"},{"Id":"2173082","CreationDate":"2010-01-31T19:55:45.790","OwnerUserId":"257942","Tags":["nosql","database","definition"],"Body":"&lt;p&gt;What exactly is NoSQL? Is it database systems that only work with {key:value} pairs?&lt;\/p&gt;\n\n&lt;p&gt;As far as I know &lt;code&gt;MemCache&lt;\/code&gt; is one of such database systems, am I right?&lt;\/p&gt;\n\n&lt;p&gt;What other popular NoSQL databases are there and where exactly are they useful?&lt;\/p&gt;\n\n&lt;p&gt;Thanks, Boda Cydo.&lt;\/p&gt;\n"},{"Id":"2212230","CreationDate":"2010-02-06T05:55:50.913","OwnerUserId":"101823","Tags":["nosql"],"Body":"&lt;p&gt;I'm looking into NoSQL for scaling alternatives to a database.  What do I do if I want transaction-based things that are sensitive to these kind of things?&lt;\/p&gt;\n"},{"Id":"2212279","CreationDate":"2010-02-06T06:26:13.010","OwnerUserId":"160551","Tags":["cassandra","nosql","keyvalue"],"Body":"&lt;p&gt;We are looking at using Cassandra to store a stream of information coming from various sources.&lt;\/p&gt;\n\n&lt;p&gt;One issue we are facing is the best way to query between two dates.&lt;\/p&gt;\n\n&lt;p&gt;For example we will need to retrieve an object between datetime dt1 and datetime dt2.&lt;\/p&gt;\n\n&lt;p&gt;We are currently considering the created unix timestamp as the key pointing to the actual object then using get_key_range to query to retrieve?&lt;\/p&gt;\n\n&lt;p&gt;Obviously this wouldn't work if two items have the same timestamp.&lt;\/p&gt;\n\n&lt;p&gt;Is this the best way to do datetime in noSQL stores in general? &lt;\/p&gt;\n"},{"Id":"2229420","CreationDate":"2010-02-09T13:41:22.347","OwnerUserId":"60188","Tags":["search","sql","nosql"],"Body":"&lt;p&gt;We have a 300 Gb+ data array we'd like to query as fast as possible. Traditional SQL databases (specifically, SQL Server) cannot handle this volume as effectively as we need (like, perform a &lt;code&gt;select&lt;\/code&gt; with 10-20 conditions in &lt;code&gt;where&lt;\/code&gt; clause in less than 10 sec), so I'm investigating other solutions for this problem.&lt;\/p&gt;\n\n&lt;p&gt;I've been reading about &lt;a href=&quot;http:\/\/en.wikipedia.org\/wiki\/NoSQL&quot; rel=&quot;nofollow&quot;&gt;NoSQL&lt;\/a&gt; and this whole thing looks promising, but I'd prefer to hear from those who have used it in real life.&lt;\/p&gt;\n\n&lt;p&gt;What can you suggest here?&lt;\/p&gt;\n\n&lt;p&gt;&lt;strong&gt;EDIT&lt;\/strong&gt; to clarify what we're after.&lt;\/p&gt;\n\n&lt;p&gt;We're a company developing an app whereby users can search for tours and perform bookings of said tours, paying for them with their plastic cards. This whole thing can surely be Russia-specific, so bear with me.&lt;\/p&gt;\n\n&lt;p&gt;When a user logs on to the site, she is presented with a form similar to this:&lt;\/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;http:\/\/queenbee.alponline.ru\/searchform.png&quot; alt=&quot;alt text&quot;&gt;&lt;\/p&gt;\n\n&lt;p&gt;Here, user selects where she leaves from and where she goes to, dates, duration and all that.&lt;\/p&gt;\n\n&lt;p&gt;After hitting &quot;Search&quot; a request goes to our DB server, which, with cannot handle such load: queries include various kinds of parameters. Sharding doesn't work well either.&lt;\/p&gt;\n\n&lt;p&gt;So what I'm after is a some kind of a pseudo-database, which can do lightning fast queries.&lt;\/p&gt;\n"},{"Id":"2231019","CreationDate":"2010-02-09T17:21:45.333","OwnerUserId":"42636","Tags":["mongodb","couchdb","nosql"],"Body":"&lt;p&gt;Hi!&lt;\/p&gt;\n\n&lt;p&gt;I'm willing to give MongoDB and CouchDB a serious try. So far I've worked a bit with Mongo, but I'm also intrigued by Couch's RESTful approach.&lt;\/p&gt;\n\n&lt;p&gt;Having worked for years with relational DBs, I still don't get what is the best way to get some things done with non relational databases.&lt;\/p&gt;\n\n&lt;p&gt;For example, if I have 1000 car shops and 1000 car types, I want to specify what kind of cars each shop sells. Each car has 100 features. Within a relational database i'd make a middle table to link each car shop with the car types it sells via IDs. What is the approach of No-sql? If every car shop sells 50 car types, it means replicating a huge amount of data, if I have to store within the car shop all the features of all the car types it sells!&lt;\/p&gt;\n\n&lt;p&gt;Any help appreciated.&lt;\/p&gt;\n"},{"Id":"2247036","CreationDate":"2010-02-11T19:15:36.913","OwnerUserId":"190822","Tags":["nosql","jdbc","odbc","activerecord","key-value"],"Body":"&lt;p&gt;I have used many SQL abstraction libraries, such as ODBC, JDBC, and ActiveRecord. What are the abstraction options in the NoSQL \/ key-value store world? &lt;\/p&gt;\n\n&lt;p&gt;I am mostly asking this so that if I choose a key-value store then I can use an abstraction library and not be locked in, which I think is important given the number of key value stores around.&lt;\/p&gt;\n"},{"Id":"2248789","CreationDate":"2010-02-12T00:20:08.017","OwnerUserId":"34819","Tags":["mongodb","nosql","codeigniter","php"],"Body":"&lt;p&gt;Can anyone assist in pointing me to a tutorial, library, etc. that will allow me to work with MongoDB from CodeIgniter?&lt;\/p&gt;\n\n&lt;p&gt;Any help is really appreciated.&lt;\/p&gt;\n"},{"Id":"2259703","CreationDate":"2010-02-14T00:37:02.693","OwnerUserId":"52360","Tags":["linux","nosql","ruby-on-rails","mono"],"Body":"&lt;p&gt;Hi I am keen on setting up a Linux box to play around with Rails, No-Sql, Mono C#... and opensource projects!&lt;\/p&gt;\n\n&lt;p&gt;I am keen on learning Ruby on Rails and don't have a Mac so I think for now the cheapest option is to install a Linux distro on my computer. I am also keen on trying out MongoDB&lt;\/p&gt;\n\n&lt;p&gt;I am a complete nube to Linux and am wondering if I should install openSuse, Ubuntu, Debian or ? I am also a C# developer so I can install Mono and MonoDevelop. They have packages for these &lt;a href=&quot;http:\/\/monodevelop.com\/Download&quot; rel=&quot;nofollow&quot;&gt;http:\/\/monodevelop.com\/Download&lt;\/a&gt; &lt;\/p&gt;\n\n&lt;p&gt;Anyone have some blog posts, screencasts, books, experience I would &lt;strong&gt;love to hear about it&lt;\/strong&gt; :)&lt;\/p&gt;\n\n&lt;p&gt;Cheers\nJake&lt;\/p&gt;\n"},{"Id":"2278186","CreationDate":"2010-02-17T03:49:05.303","OwnerUserId":"72356","Tags":["nosql","images"],"Body":"&lt;p&gt;Our application will be serving a large number of small, thumbnail-size images (about 6-12KB in size) through HTTP. I've been asked to investigate whether using a NoSQL data store is a viable solution for data storage. Ideally, we would like our data store to be fault-toerant and distributed. Anyone in the StackOverflow community have any experiences they would like to share regarding storing blobs in NoSQL stores, and which one they used? Also, is NoSQL a good solution for our problem, or would we be better served storing the images in the file system and serving them directly from the web server (as an aside, CDN is currently not an option for us)? Thanks.&lt;\/p&gt;\n"},{"Id":"2285045","CreationDate":"2010-02-17T22:50:24.530","OwnerUserId":"58394","Tags":["nosql","database","couchdb","mysql","cassandra"],"Body":"&lt;p&gt;NoSQL refers to non-relational data stores that break with the history of relational databases and ACID guarantees. Popular open source NoSQL data stores include:&lt;\/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;http:\/\/incubator.apache.org\/cassandra\/&quot; rel=&quot;nofollow&quot;&gt;Cassandra&lt;\/a&gt; (tabular, written in Java, used by Cisco WebEx, Digg, Facebook, IBM, Mahalo, Rackspace, Reddit and Twitter)&lt;\/li&gt;\n&lt;li&gt;&lt;a href=&quot;http:\/\/couchdb.apache.org\/&quot; rel=&quot;nofollow&quot;&gt;CouchDB&lt;\/a&gt; (document, written in Erlang, used by BBC and Engine Yard)&lt;\/li&gt;\n&lt;li&gt;&lt;a href=&quot;http:\/\/github.com\/cliffmoon\/dynomite&quot; rel=&quot;nofollow&quot;&gt;Dynomite&lt;\/a&gt; (key-value, written in C++, used by Powerset)&lt;\/li&gt;\n&lt;li&gt;&lt;a href=&quot;http:\/\/hadoop.apache.org\/hbase\/&quot; rel=&quot;nofollow&quot;&gt;HBase&lt;\/a&gt; (key-value, written in Java, used by Bing)&lt;\/li&gt;\n&lt;li&gt;&lt;a href=&quot;http:\/\/www.hypertable.org\/&quot; rel=&quot;nofollow&quot;&gt;Hypertable&lt;\/a&gt; (tabular, written in C++, used by Baidu)&lt;\/li&gt;\n&lt;li&gt;&lt;a href=&quot;http:\/\/sourceforge.net\/projects\/kai\/&quot; rel=&quot;nofollow&quot;&gt;Kai&lt;\/a&gt; (key-value, written in Erlang)&lt;\/li&gt;\n&lt;li&gt;&lt;a href=&quot;http:\/\/memcachedb.org\/&quot; rel=&quot;nofollow&quot;&gt;MemcacheDB&lt;\/a&gt; (key-value, written in C, used by Reddit)&lt;\/li&gt;\n&lt;li&gt;&lt;a href=&quot;http:\/\/www.mongodb.org\/&quot; rel=&quot;nofollow&quot;&gt;MongoDB&lt;\/a&gt; (document, written in C++, used by Electronic Arts, Github, NY Times and Sourceforge)&lt;\/li&gt;\n&lt;li&gt;&lt;a href=&quot;http:\/\/neo4j.org\/&quot; rel=&quot;nofollow&quot;&gt;Neo4j&lt;\/a&gt; (graph, written in Java, used by some Swedish universities)&lt;\/li&gt;\n&lt;li&gt;&lt;a href=&quot;http:\/\/project-voldemort.com\/&quot; rel=&quot;nofollow&quot;&gt;Project Voldemort&lt;\/a&gt; (key-value, written in Java, used by LinkedIn)&lt;\/li&gt;\n&lt;li&gt;&lt;a href=&quot;http:\/\/code.google.com\/p\/redis\/&quot; rel=&quot;nofollow&quot;&gt;Redis&lt;\/a&gt; (key-value, written in C, used by Craigslist, Engine Yard and Github)&lt;\/li&gt;\n&lt;li&gt;&lt;a href=&quot;http:\/\/riak.basho.com\/&quot; rel=&quot;nofollow&quot;&gt;Riak&lt;\/a&gt; (key-value, written in Erlang, used by Comcast and Mochi Media)&lt;\/li&gt;\n&lt;li&gt;&lt;a href=&quot;http:\/\/github.com\/tuulos\/ringo&quot; rel=&quot;nofollow&quot;&gt;Ringo&lt;\/a&gt; (key-value, written in Erlang, used by Nokia)&lt;\/li&gt;\n&lt;li&gt;&lt;a href=&quot;http:\/\/code.google.com\/p\/scalaris\/&quot; rel=&quot;nofollow&quot;&gt;Scalaris&lt;\/a&gt; (key-value, written in Erlang, used by OnScale)&lt;\/li&gt;\n&lt;li&gt;&lt;a href=&quot;http:\/\/code.google.com\/p\/terrastore\/&quot; rel=&quot;nofollow&quot;&gt;Terrastore&lt;\/a&gt; (document, written in Java)&lt;\/li&gt;\n&lt;li&gt;&lt;a href=&quot;http:\/\/code.google.com\/p\/thrudb\/&quot; rel=&quot;nofollow&quot;&gt;ThruDB&lt;\/a&gt; (document, written in C++, used by JunkDepot.com)&lt;\/li&gt;\n&lt;li&gt;&lt;a href=&quot;http:\/\/1978th.net\/tokyocabinet\/&quot; rel=&quot;nofollow&quot;&gt;Tokyo Cabinet\/Tokyo Tyrant&lt;\/a&gt; (key-value, written in C, used by Mixi.jp (Japanese social networking site))&lt;\/li&gt;\n&lt;\/ul&gt;\n\n&lt;p&gt;I'd like to know about specific problems you - the SO reader - have solved using data stores and what NoSQL data store you used.&lt;\/p&gt;\n\n&lt;p&gt;Questions:&lt;\/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;What scalability problems have you used NoSQL data stores to solve?&lt;\/li&gt;\n&lt;li&gt;What NoSQL data store did you use? &lt;\/li&gt;\n&lt;li&gt;What database did you use prior to switching to a NoSQL data store?&lt;\/li&gt;\n&lt;\/ul&gt;\n\n&lt;p&gt;&lt;b&gt;I'm looking for first-hand experiences, so please do not answer unless you have that.&lt;\/b&gt;&lt;\/p&gt;\n"},{"Id":"2291433","CreationDate":"2010-02-18T19:10:12.480","OwnerUserId":"5862","Tags":["architecture","nosql","rdbms","patterns"],"Body":"&lt;p&gt;I'm not looking for a holy war here, I am thinking through a distributed architecture and would like input on &lt;strong&gt;How do I choose between a RDBMS vs. a DocDBMS&lt;\/strong&gt;?&lt;\/p&gt;\n\n&lt;p&gt;We cannot deny the power that can be had by using a RDBMS (i.e. MySQL, PostgreSQL, MS Sql Server, etc), they have been in development for more than 30 years and many issues have been thought through and addressed.&lt;\/p&gt;\n\n&lt;p&gt;We also need to consider that the NoSQL\/DocDBMS movement (MongoDB, CouchDB, etc) has its own strengths, especially in the manner in which data is stored, related and replicated.&lt;\/p&gt;\n\n&lt;p&gt;&lt;strong&gt;When considering &lt;em&gt;DATA&lt;\/em&gt; and its &lt;em&gt;STRUCTURE&lt;\/em&gt; only, when would I choose to use a document based db and when would I used a relational db?&lt;\/strong&gt;&lt;\/p&gt;\n\n&lt;p&gt;I do not want to discuss the merits of one solution vs another in relation to somebody's favorite language or platform.  Please keep the discussion pointed to types of data (i.e. financial transactions, blogs, CMS pages, shopping carts, etc) and their structure (relationships between data points - i.e. blog post related to its comments).&lt;\/p&gt;\n"},{"Id":"2291442","CreationDate":"2010-02-18T19:10:44.770","OwnerUserId":"28287","Tags":["nosql","cassandra","database","linode","vps"],"Body":"&lt;p&gt;I am learning about the Apache Cassandra database [sic].&lt;\/p&gt;\n\n&lt;p&gt;Does anyone have any good\/bad experiences with deploying Cassandra to less than dedicated hardware like the offerings of Linode or Slicehost?  &lt;\/p&gt;\n\n&lt;p&gt;I think Cassandra would be a great way to scale a web service easily to meet read\/write\/request load...  just add another Linode running a Cassandra node to the existing cluster.  Yes, this implies running the public web service and a Cassandra node on the same VPS (which many can take exception with).&lt;\/p&gt;\n\n&lt;p&gt;Pros of Linode-like deployment for Cassandra:&lt;\/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Private VLAN; the Cassandra nodes could communicate privately&lt;\/li&gt;\n&lt;li&gt;An API to provision a new Linode (and perhaps configure it with a &quot;StackScript&quot; that installs Cassandra and its dependencies, etc.)&lt;\/li&gt;\n&lt;li&gt;The price is right&lt;\/li&gt;\n&lt;\/ul&gt;\n\n&lt;p&gt;Cons:&lt;\/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Each host is a VPS and is not dedicated of course&lt;\/li&gt;\n&lt;li&gt;The RAM\/cost ratio is not that great once you decide you want 4GB RAM (cf. dedicated at say SoftLayer)&lt;\/li&gt;\n&lt;li&gt;Only 1 disk where one would prefer 2 disks I suppose (1 for the commit log and another disk for the data files themselves).  Probably moot since this is shared hardware anyway.&lt;\/li&gt;\n&lt;\/ul&gt;\n\n&lt;p&gt;EDIT: found this which helps a bit: &lt;a href=&quot;http:\/\/wiki.apache.org\/cassandra\/CassandraHardware&quot; rel=&quot;nofollow&quot;&gt;http:\/\/wiki.apache.org\/cassandra\/CassandraHardware&lt;\/a&gt; &lt;\/p&gt;\n\n&lt;p&gt;I see that 1GB is the minimum but is this a recommendation?  Could I deploy with a Linode 720 for instance (say 500 MB usable to Cassandra)?  See &lt;a href=&quot;http:\/\/www.linode.com\/&quot; rel=&quot;nofollow&quot;&gt;http:\/\/www.linode.com\/&lt;\/a&gt;&lt;\/p&gt;\n"},{"Id":"2293674","CreationDate":"2010-02-19T02:20:49.900","OwnerUserId":"128028","Tags":["django","django-database","nosql","schemaless","library"],"Body":"&lt;p&gt;So far Django has good integration with several RDBMS. NoSQL, schema-less and document-oriented DBMS are picking up. What's the status of integration those on-trend and fashionable DBMSes with Django? Are there any production-ready or at least ready-to-use libraries for Django?&lt;\/p&gt;\n\n&lt;p&gt;So far I have these at hand:&lt;\/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;http:\/\/github.com\/lethain\/comfy-django-example&quot; rel=&quot;nofollow&quot;&gt;http:\/\/github.com\/lethain\/comfy-django-example&lt;\/a&gt;&lt;\/li&gt;\n&lt;li&gt;&lt;a href=&quot;http:\/\/nosql.mypopescu.com\/post\/276069660\/nosql-libraries#mongodb-python&quot; rel=&quot;nofollow&quot;&gt;http:\/\/nosql.mypopescu.com\/post\/276069660\/nosql-libraries#mongodb-python&lt;\/a&gt;&lt;\/li&gt;\n&lt;\/ul&gt;\n"},{"Id":"2328169","CreationDate":"2010-02-24T17:44:14.307","OwnerUserId":"150771","Tags":["nosql","learning","tutorials"],"Body":"&lt;p&gt;Hi all,&lt;\/p&gt;\n\n&lt;p&gt;I've seen NoSQL pop up quite a bit on SO and I have a solid understanding of &lt;strong&gt;why&lt;\/strong&gt; you would use it (from here, Wikipedia, etc).  This could be due to the lack of concrete and uniform definition of what it is (more of a paradigm than concrete implementation), but I'm struggling to wrap my head around how I would go about designing a system that would use it or how I would implement it in my system.  I'm really stuck in a relational-db mindset thinking of things in terms of tables and joins...&lt;\/p&gt;\n\n&lt;p&gt;At any rate, does anybody know of a crash course\/tutorial on a system that would use it (kind of a &quot;hello world&quot; for a NoSQL-based system) or a tutorial that takes an existing &quot;Hello World&quot; app based on SQL and converts it to NoSQL (not necessarily in code, but just a high-level explanation).  &lt;\/p&gt;\n\n&lt;p&gt;I see this having one solid answer, but if you guys feel like it should be community wiki, I'll be happy to change it.&lt;\/p&gt;\n\n&lt;p&gt;Thanks!\nChris&lt;\/p&gt;\n"},{"Id":"2330562","CreationDate":"2010-02-24T23:47:44.307","OwnerUserId":"28287","Tags":["cassandra","nosql","fault-tolerance","servers"],"Body":"&lt;p&gt;Surely one can run a single node cluster but I'd like some level of fault-tolerance.&lt;\/p&gt;\n\n&lt;p&gt;At present I can afford to lease two servers (8GB RAM, private VLAN @1GigE) but not 3.&lt;\/p&gt;\n\n&lt;p&gt;My understanding is that 3 nodes is the minimum needed for a Cassandra cluster because there's no possible majority between 2 nodes, and a majority is required for resolving versioning conflicts.  Oh wait, am I thinking of &quot;vector clocks&quot; and Riak?  Ack!  Cassandra uses timestamps for conflict resolution.  &lt;\/p&gt;\n\n&lt;p&gt;For 2 nodes, what is the recommended read\/write strategy?  Should I generally write to ALL (both) nodes and read from ONE (N=2; W=N\/2+1; W=2\/2+1=2)?  Cassandra will use hinted-handoff as usual even for 2 nodes, yes?&lt;\/p&gt;\n\n&lt;p&gt;These 2 servers are located in the same data center FWIW.&lt;\/p&gt;\n\n&lt;p&gt;Thanks!&lt;\/p&gt;\n"},{"Id":"2330612","CreationDate":"2010-02-24T23:57:35.380","OwnerUserId":"28287","Tags":["cassandra","data-modeling","database","nosql"],"Body":"&lt;p&gt;I'm trying to learn how to map the entities\/actors\/objects\/things in my application for storage in Cassandra.  There was a great tutorial for Redis on modeling Twitter data and typical access patterns called Retwis [1].  I've found a couple of examples for Cassandra. &lt;\/p&gt;\n\n&lt;p&gt;&lt;em&gt;How did you start to gain an intuition for Cassandra's data model?&lt;\/em&gt;&lt;\/p&gt;\n\n&lt;p&gt;[1] &lt;a href=&quot;http:\/\/retwis.antirez.com\/&quot; rel=&quot;nofollow&quot;&gt;http:\/\/retwis.antirez.com\/&lt;\/a&gt;&lt;\/p&gt;\n"},{"Id":"2332113","CreationDate":"2010-02-25T06:29:33.657","OwnerUserId":"98975","Tags":["mysql","cassandra","nosql","migration","django"],"Body":"&lt;p&gt;Hello all,&lt;\/p&gt;\n\n&lt;p&gt;For a bit of background - this question deals with a project running on a single small EC2 instance, and is about to migrate to a medium one. The main components are Django, MySQL and a large number of custom analysis tools written in python and java, which do the heavy\nlifting. The same machine is running Apache as well.&lt;\/p&gt;\n\n&lt;p&gt;The data model looks like the following - a large amount of real time data comes in streamed from various networked sensors, and ideally, I'd like to establish a long-poll approach rather than the current poll every 15 minutes approach (a limitation of computing stats and writing into the database itself). Once the data comes in, I store the raw version in\nMySQL, let the analysis tools loose on this data, and store statistics in another few tables. All of this is rendered using Django.&lt;\/p&gt;\n\n&lt;p&gt;Relational features I would need -&lt;\/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Order by &lt;em&gt;[SliceRange in Cassandra's API seems to satisy this]&lt;\/em&gt;&lt;\/li&gt;\n&lt;li&gt;Group by&lt;\/li&gt;\n&lt;li&gt;Manytomany relations between multiple tables &lt;em&gt;[Cassandra SuperColumns seem to do well for one to many]&lt;\/em&gt;&lt;\/li&gt;\n&lt;li&gt;Sphinx on this gives me a nice full text engine, so thats a necessity too. &lt;em&gt;[On Cassandra, the Lucandra project seems to satisfy this need]&lt;\/em&gt;&lt;\/li&gt;\n&lt;\/ul&gt;\n\n&lt;p&gt;My major problem is that data reads are extremely slow (and writes aren't that hot either). I don't want to throw a lot of money and hardware on it right now, and I'd prefer something that can scale easily with time. Vertically scaling MySQL is not trivial in that sense (or cheap).&lt;\/p&gt;\n\n&lt;p&gt;So essentially, after having read a lot about NOSQL and experimented with things like MongoDB, Cassandra and Voldemort, my questions are,&lt;\/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;On a medium EC2 instance, &lt;strong&gt;&lt;em&gt;would I gain any benefits in reads\/writes by shifting to something like Cassandra&lt;\/em&gt;&lt;\/strong&gt;? &lt;a href=&quot;http:\/\/static.last.fm\/johan\/nosql-20090611\/cassandra_nosql.pdf&quot; rel=&quot;nofollow&quot;&gt;This article&lt;\/a&gt; (pdf) definitely seems to suggest that. Currently, I'd say a few hundred writes per minute would be the norm. For reads - since the data changes every 5 minutes or so, cache invalidation has to happen pretty quickly. At some point, it should be able to handle a large number of concurrent users as well. The app performance currently gets killed on MySQL doing some joins on large tables even if indexes are created - something to the order of 32k rows takes more than a minute to render. (This may be an artifact of EC2 virtualized I\/O as well). Size of tables is around 4-5 million rows, and there are about 5 such tables.&lt;\/p&gt;&lt;\/li&gt;\n&lt;li&gt;&lt;p&gt;Everyone talks about using Cassandra on multiple nodes, given the CAP theorem and eventual consistency. But, for a project that is just beginning to grow, &lt;strong&gt;&lt;em&gt;does it make sense\nto deploy a one node cassandra server&lt;\/em&gt;&lt;\/strong&gt;? Are there any caveats? For instance, can it replace MySQL as a backend for Django? [Is this recommended?]&lt;\/p&gt;&lt;\/li&gt;\n&lt;li&gt;&lt;p&gt;If I do shift, I'm guessing I'll have to rewrite parts of the app to do a lot more &quot;administrivia&quot; since I'd have to do multiple lookups to fetch rows.&lt;\/p&gt;&lt;\/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Would it make any sense to just use MySQL as a key value store&lt;\/em&gt;&lt;\/strong&gt; rather than a relational engine, and go with that? That way I could utilize a large number of stable APIs available, as well as a stable engine (and go relational as needed).&lt;\/p&gt;&lt;\/li&gt;\n&lt;\/ul&gt;\n\n&lt;p&gt;Any insights from people who've done a shift would be greatly appreciated!&lt;\/p&gt;\n\n&lt;p&gt;Thanks.&lt;\/p&gt;\n"},{"Id":"2337819","CreationDate":"2010-02-25T21:35:54.257","OwnerUserId":"40348","Tags":["python","mongodb","nosql","orm","dynamic-languages"],"Body":"&lt;p&gt;Hi, &lt;\/p&gt;\n\n&lt;p&gt;Do you have any insights into the most elegant way of persisting objects from a dynamic language in a document database?&lt;\/p&gt;\n\n&lt;p&gt;I have a solid background in C# and have just started programming in Python. At the same time I am trying to learn the ropes of MongoDB. &lt;\/p&gt;\n\n&lt;p&gt;Now I am wondering: what is the most elegant way to persist my data to the MongoDB database? I have considered several approaches:&lt;\/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Make all my Python classes able to create a graph of dictionaries and lists representing their state. Moreover, make them able to initialize their state from such a graph. When I want to persist an object, I will ask it for its graph representation and persist that. When I want to get an object, I will retrieve a document graph and provide this to the &lt;code&gt;__init__&lt;\/code&gt; method of my class. &lt;\/p&gt;&lt;\/li&gt;\n&lt;li&gt;&lt;p&gt;Create a separate Mapper class capable of inspecting a given object and creating a graph of dictionaries and lists, which I may then store in MongoDB. The mapper would also be responsible for creating objects whose data has been retrieved from the database. &lt;\/p&gt;&lt;\/li&gt;\n&lt;li&gt;&lt;p&gt;I tried out &lt;a href=&quot;http:\/\/pypi.python.org\/pypi\/mongoengine\/0.2.2&quot; rel=&quot;nofollow&quot;&gt;mongoengine&lt;\/a&gt;, a document-object mapper. However, I was disappointed when it forced me to derive my classes from a particular class (Document). It reminded me of Microsoft's Entity Framework 1.0 and the lack of POCO support. I don't want to be forced to derive from a particular class. It doesn't feel right, but I am unsure whether this is really a problem in a dynamic language.&lt;\/p&gt;&lt;\/li&gt;\n&lt;\/ol&gt;\n\n&lt;p&gt;Is my thinking being hindered by my background in C#? I am sure I haven't grokked the extent of the flexibility that a dynamic language provides, so any advice or hints at best practices would be greatly appreciated.&lt;\/p&gt;\n\n&lt;p&gt;Thank you.&lt;\/p&gt;\n"},{"Id":"2348289","CreationDate":"2010-02-27T17:31:56.957","OwnerUserId":"282771","Tags":["database","implementation","educational","simplest","nosql"],"Body":"&lt;p&gt;I am looking for a really simple database implementation; basically one with no complex parsing SQL engine. What I am looking for is something demonstrating B+ trees and ACID storage (Suitable for educational purposes). What I have found up-till now form my current searches was hamster-db. I am looking for something even simpler with a smaller code-base. If there is any such opensource project in your knowledge please let me know.&lt;\/p&gt;\n"},{"Id":"2351040","CreationDate":"2010-02-28T12:31:46.177","OwnerUserId":"182574","Tags":["nosql"],"Body":"&lt;p&gt;I have been researching noSQL DB and have not been able to satisfactorily answer this for myself:  Is it possible to construct complex queries against noSQL DB?&lt;\/p&gt;\n\n&lt;p&gt;The type of query I'm wondering about would be something like this:&lt;\/p&gt;\n\n&lt;pre&gt;&lt;code&gt;select * from DB where\nvara &amp;#38;gt; x AND\nvarb = 2 AND\nvarc &amp;#38;lt; x AND\nvard in (x,y,z) AND\nvare like '%texthere%' AND\nvarf = 2 AND\nvarg = 3 and\netc...\n&lt;\/code&gt;&lt;\/pre&gt;\n\n&lt;p&gt;NOTE:  I'm aware that I can't use SQL, as above, what I'm asking is how would I query using the psuedo logic above, in other words a whole bunch of different conditions.  So far the best answer I have found is that you have an RDBMS to query and then grab data based on key from cloud.  That doesn't necessarily seem more efficient to me.&lt;\/p&gt;\n\n&lt;p&gt;So as a follow up.  If just trying to solve a 'search 4 million rows' problem as opposed to a 'we have billions of rows of data' problem, should I even bother looking at a noSQL DB?&lt;\/p&gt;\n"},{"Id":"2354254","CreationDate":"2010-03-01T06:40:50.833","OwnerUserId":"69803","Tags":["nosql","relational-database","key-value-store"],"Body":"&lt;p&gt;It has been recommended to me that I investigate Key\/Value pair data systems to replace a relational database I have been using.&lt;\/p&gt;\n\n&lt;p&gt;What I am not quite understanding is how this improves efficiency of queries. From what I understand you are going to be throwing away a lot information that would help to make queries more efficient, by simply turning your structure database into one big long list of keys and values?&lt;\/p&gt;\n\n&lt;p&gt;Have I missed the point completely?&lt;\/p&gt;\n"},{"Id":"2357087","CreationDate":"2010-03-01T16:01:41.703","OwnerUserId":"182172","Tags":["simpledb","amazon-simpledb","nosql","non-relational-database"],"Body":"&lt;p&gt;Please, can you give examples of real-life implementations using SimpleDB as the main persistent storage?&lt;\/p&gt;\n"},{"Id":"2357239","CreationDate":"2010-03-01T16:21:51.357","OwnerUserId":"182172","Tags":["nosql","non-relational-database","simpledb"],"Body":"&lt;p&gt;The benefits of a non-relational database (such as a key-value pair storage) are evident when used in large scale datasets (google, facebook, linkedin). How do you think small to medium sized applications can  benefit from using non-relational databases?&lt;\/p&gt;\n"},{"Id":"2357919","CreationDate":"2010-03-01T18:03:01.837","OwnerUserId":"6705","Tags":["ruby-on-rails","nosql","open-source","ruby","database"],"Body":"&lt;p&gt;I'm interested in seeing how using NoSQL would affect the architecture\/design\/code of a Rails application.&lt;\/p&gt;\n\n&lt;p&gt;Does anyone know of a good example of a open-source Rails app using NoSQL persistence?&lt;\/p&gt;\n\n&lt;p&gt;Thanks&lt;\/p&gt;\n"},{"Id":"2359159","CreationDate":"2010-03-01T21:22:07.120","OwnerUserId":"58394","Tags":["cassandra","nosql"],"Body":"&lt;p&gt;When experimenting with Cassandra I've observed that Cassandra listens to the following ports:&lt;\/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;TCP *:8080&lt;\/li&gt;\n&lt;li&gt;TCP *:8888&lt;\/li&gt;\n&lt;li&gt;TCP *:57311&lt;\/li&gt;\n&lt;li&gt;TCP *:57312&lt;\/li&gt;\n&lt;li&gt;TCP 127.0.0.1:7000&lt;\/li&gt;\n&lt;li&gt;TCP 127.0.0.1:9160&lt;\/li&gt;\n&lt;li&gt;UDP 127.0.0.1:700&lt;\/li&gt;\n&lt;\/ul&gt;\n\n&lt;p&gt;How does Cassandra use each of the ports listed?&lt;\/p&gt;\n"},{"Id":"2359175","CreationDate":"2010-03-01T21:25:37.690","OwnerUserId":"58394","Tags":["cassandra","nosql"],"Body":"&lt;p&gt;When experimenting with Cassandra I've observed that Cassandra writes to the following files:&lt;\/p&gt;\n\n&lt;pre&gt;&lt;code&gt;\/...\/cassandra\/commitlog\/CommitLog-&amp;#38;lt;id&amp;#38;gt;.log\n\/...\/cassandra\/data\/Keyspace1\/Standard1-1-Data.db\n\/...\/cassandra\/data\/Keyspace1\/Standard1-1-Filter.db\n\/...\/cassandra\/data\/Keyspace1\/Standard1-1-Index.db\n\/...\/cassandra\/data\/system\/LocationInfo-1-Data.db\n\/...\/cassandra\/data\/system\/LocationInfo-1-Filter.db\n\/...\/cassandra\/data\/system\/LocationInfo-1-Index.db\n\/...\/cassandra\/data\/system\/LocationInfo-2-Data.db\n\/...\/cassandra\/data\/system\/LocationInfo-2-Filter.db\n\/...\/cassandra\/data\/system\/LocationInfo-2-Index.db\n\/...\/cassandra\/data\/system\/LocationInfo-3-Data.db\n\/...\/cassandra\/data\/system\/LocationInfo-3-Filter.db\n\/...\/cassandra\/data\/system\/LocationInfo-3-Index.db\n\/...\/cassandra\/system.log\n&lt;\/code&gt;&lt;\/pre&gt;\n\n&lt;p&gt;The general structure seems to be:&lt;\/p&gt;\n\n&lt;pre&gt;&lt;code&gt;\/...\/cassandra\/commitlog\/CommitLog-ID.log\n\/...\/cassandra\/data\/KEYSPACE\/COLUMN_FAMILY-N-Data.db\n\/...\/cassandra\/data\/KEYSPACE\/COLUMN_FAMILY-N-Filter.db\n\/...\/cassandra\/data\/KEYSPACE\/COLUMN_FAMILY-N-Index.db\n\/...\/cassandra\/system.log\n&lt;\/code&gt;&lt;\/pre&gt;\n\n&lt;p&gt;What is the Cassandra file structure? More specifically, how are the &lt;code&gt;data&lt;\/code&gt;, &lt;code&gt;commitlog&lt;\/code&gt; directories used, and what is the structure of the files in the &lt;code&gt;data&lt;\/code&gt; directory (&lt;code&gt;Data&lt;\/code&gt;\/&lt;code&gt;Filter&lt;\/code&gt;\/&lt;code&gt;Index&lt;\/code&gt;)?&lt;\/p&gt;\n"},{"Id":"2360034","CreationDate":"2010-03-01T23:58:48.693","OwnerUserId":"232417","Tags":["mysql","tagging","joins","nosql","couchdb"],"Body":"&lt;p&gt;StackOverflow lets you search for posts by tags, and lets you filter by an intersection of tags, e.g. &lt;code&gt;ruby x mysql x tags&lt;\/code&gt;. But typically it's inefficient to retrieve such lists from MySQL using mulitple joins on the taggings. What's a more performant way to implement filter-by-multiple tag queries? &lt;\/p&gt;\n\n&lt;p&gt;Is there a good NoSQL approach to this problem?&lt;\/p&gt;\n"},{"Id":"2374496","CreationDate":"2010-03-03T20:00:19.690","OwnerUserId":"32577","Tags":["c#",".net","nosql","embedded-database"],"Body":"&lt;p&gt;I'm looking for a fast, embeddable key\/value store with cursor semantics over key collections (or a simple embeddable DB) that I can use in .NET and mono. Need it to be open-source, would prefer an MIT or Apache style license over a GPL license. Not opposed to a library that needs bindings to be written, as long as binaries are available for both windows and linux.&lt;\/p&gt;\n\n&lt;p&gt;Options considered:&lt;\/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;SQLite - has bindings and native implementation, but single-threaded and not all that fast&lt;\/li&gt;\n&lt;li&gt;Embedded InnoDB - no .NET bindings i can find and it's GPLv2&lt;\/li&gt;\n&lt;li&gt;Berkley DB - no .NET bindings i can find&lt;\/li&gt;\n&lt;li&gt;Tokyo Cabinet - no .NET bindings i can find and problematic to build on windows&lt;\/li&gt;\n&lt;li&gt;MadCow Memory-mapped data structures - GPLv2&lt;\/li&gt;\n&lt;\/ul&gt;\n\n&lt;p&gt;Is there an option better than the above that i'm missing, or bindings for the above i don't know about?&lt;\/p&gt;\n"},{"Id":"2403174","CreationDate":"2010-03-08T17:16:55.780","OwnerUserId":"75840","Tags":["nosql","sqlite"],"Body":"&lt;p&gt;There is any NoSql database as simple as SQLite? I'm looking for a lightweight database to persist a small set of data for a simple desktop application. I still can use SQLite but prefer a more OO approach since my app doesn't handle much data.&lt;\/p&gt;\n"},{"Id":"2404155","CreationDate":"2010-03-08T19:37:51.067","OwnerUserId":"153943","Tags":["nosql","security","mongodb","logging"],"Body":"&lt;p&gt;I'm currently using MongoDB to record application logs, and while I'm quite happy with both the performance and with being able to dump arbitrary structured data into log records, I'm troubled by the mutability of log records once stored.&lt;\/p&gt;\n\n&lt;p&gt;In a traditional database, I would structure the grants for my log tables such that the application user had INSERT and SELECT privileges, but not UPDATE or DELETE. Similarly, in CouchDB, I could write a update validator function that rejected all attempts to modify an existing document.&lt;\/p&gt;\n\n&lt;p&gt;However, I've been unable to find a way to restrict operations on a MongoDB database or collection beyond the three access levels (no access, read-only, &quot;god mode&quot;) documented in the &lt;a href=&quot;http:\/\/www.mongodb.org\/display\/DOCS\/Security+and+Authentication&quot; rel=&quot;nofollow&quot;&gt;security topic&lt;\/a&gt; on the MongoDB wiki.&lt;\/p&gt;\n\n&lt;p&gt;Has anyone else deployed MongoDB as a document store in a setting where immutability (or at least change tracking) for documents was a requirement? What tricks or techniques did you use to ensure that poorly-written or malicious application code could not modify or destroy existing log records? Do I need to wrap my MongoDB logging in a service layer that enforces the write-only policy, or can I use some combination of configuration, query hacking, and replication to ensure a consistent, audit-able record is maintained?&lt;\/p&gt;\n"},{"Id":"2408877","CreationDate":"2010-03-09T12:17:17.890","OwnerUserId":"238134","Tags":["database","nosql","hierarchical-data","java"],"Body":"&lt;p&gt;Hierarchical data structures are often stored in relational databases. This kind of storage is flexible but flat, so the tree structure has to be build with each query. I want to store forum posts as a tree structure, but it should be possible to query efficiently, say for example selecting posts by date or author.&lt;\/p&gt;\n\n&lt;p&gt;I'd like to have an open source database that is accessible from Java.&lt;\/p&gt;\n\n&lt;p&gt;What is the best way to do so? CouchDB? neo4j? ...?&lt;\/p&gt;\n"},{"Id":"2410341","CreationDate":"2010-03-09T15:51:10.157","OwnerUserId":"58394","Tags":["nosql","cassandra"],"Body":"&lt;p&gt;Assume two Cassandra nodes running on hosts &lt;code&gt;A&lt;\/code&gt; and &lt;code&gt;B&lt;\/code&gt; respectively. Which TCP and\/or UDP ports needs to be open between hosts &lt;code&gt;A&lt;\/code&gt; and &lt;code&gt;B&lt;\/code&gt; for Cassandra to operate properly?&lt;\/p&gt;\n"},{"Id":"2411424","CreationDate":"2010-03-09T18:15:13.073","OwnerUserId":"40015","Tags":["db4o",".net","nosql","oodbms"],"Body":"&lt;p&gt;I'm playing around with db4o, and I have the Object Manager viewer thingy for Visual Studio.  It seems okay, but not exactly on par with tools like HeidiSQL\/SQL Studio\/etc., not to mention that it locks the db4o file--I can't use my db4o app and Object Manager at the same time.&lt;\/p&gt;\n\n&lt;p&gt;Maybe I'm using it wrong, but regardless, I'd like to know what else is out there.  What tools would you recommend for looking at and manipulating db4o files?&lt;\/p&gt;\n\n&lt;p&gt;UPDATE: I've been using LINQPad.  There is some yak-shaving involved, but it's working pretty well.  It still leaves a lot to be desired in terms of the functionality available in applications like HeidiSQL\/SQL Studio\/etc., but it's a start.&lt;\/p&gt;\n"},{"Id":"2413466","CreationDate":"2010-03-09T23:40:33.947","OwnerUserId":"58394","Tags":["mysql","cassandra","nosql"],"Body":"&lt;p&gt;Consider a 500 million row MySQL table with the following table structure ...&lt;\/p&gt;\n\n&lt;pre&gt;&lt;code&gt;CREATE TABLE foo_objects (\n  id int NOT NULL AUTO_INCREMENT,\n  foo_string varchar(32),\n  metadata_string varchar(128),\n  lookup_id int,\n  PRIMARY KEY (id),\n  UNIQUE KEY (foo_string),\n  KEY (lookup_id),\n);\n&lt;\/code&gt;&lt;\/pre&gt;\n\n&lt;p&gt;... which is being queried using only the following two queries ...&lt;\/p&gt;\n\n&lt;pre&gt;&lt;code&gt;# lookup by unique string key, maximum of one row returned\nSELECT * FROM foo_objects WHERE foo_string = ?;\n# lookup by numeric lookup key, may return multiple rows\nSELECT * FROM foo_objects WHERE lookup_id = ?;\n&lt;\/code&gt;&lt;\/pre&gt;\n\n&lt;p&gt;Given those queries, how would you represent the given data-set using Cassandra?&lt;\/p&gt;\n"},{"Id":"2420161","CreationDate":"2010-03-10T20:04:07.943","OwnerUserId":"290883","Tags":["mongo","mongodb","nosql"],"Body":"&lt;p&gt;I tried to bulk insert more than 250,000 items I got an error from the server saying:\n&quot;Wed Mar 10 21:37:34 bad recv() len: 53888928\nWed Mar 10 21:37:34 end connection 127.0.0.1:2795&quot;\nI did not find any data on that issue on google that is useful to me. &lt;\/p&gt;\n\n&lt;p&gt;These are the results for my machine using single threaded approach with one open connection (intel core2duo , 2.66GHz , 3.25GB Ram, win xp sp2, standard single HD)&lt;\/p&gt;\n\n&lt;p&gt;Anyone?&lt;\/p&gt;\n\n&lt;p&gt;thanks :)&lt;\/p&gt;\n"},{"Id":"2436046","CreationDate":"2010-03-12T21:31:45.207","OwnerUserId":"4069","Tags":["cassandra","database","nosql"],"Body":"&lt;p&gt;I'm working with very long time series -- hundreds of millions of data points in one series -- and am considering Cassandra as a data store. In &lt;a href=&quot;http:\/\/stackoverflow.com\/questions\/2212279\/cassandra-time-series-data&quot;&gt;this question&lt;\/a&gt;, one of the Cassandra committers (the \u00fcber helpful &lt;a href=&quot;http:\/\/stackoverflow.com\/users\/130168\/jbellis&quot;&gt;jbellis&lt;\/a&gt;) says that Cassandra rows can be very large, and that column slicing operations are faster than row slices, hence my question: Is the row size &lt;a href=&quot;http:\/\/github.com\/apache\/cassandra\/blob\/b0c1d8d60372894b6c6443bfaf9a32949e4ffc0e\/BUGS.txt&quot; rel=&quot;nofollow&quot;&gt;still limited&lt;\/a&gt; by available memory?&lt;\/p&gt;\n"},{"Id":"2438055","CreationDate":"2010-03-13T10:49:05.893","OwnerUserId":"262158","Tags":["mongodb","nosql","windows-services"],"Body":"&lt;p&gt;How to setup MongoDB so it can run as windows service?&lt;\/p&gt;\n\n&lt;p&gt;Thanks&lt;\/p&gt;\n"},{"Id":"2440079","CreationDate":"2010-03-13T21:22:18.453","OwnerUserId":"24545","Tags":["architecture","web-development","database-design","scalability","nosql"],"Body":"&lt;p&gt;Target application is a medium-sized website built to support several hundred to several thousand users an hour, with an option to scale above that. Data model is rather simple, and caching potential is pretty high (~10:1 ratio of read to edit actions).&lt;\/p&gt;\n\n&lt;p&gt;What should be the considerations when coming to choose between a relational, SQL-based datastore to a NoSQL option (such as HBase and Cassandra)?&lt;\/p&gt;\n"},{"Id":"2442735","CreationDate":"2010-03-14T16:06:44.000","OwnerUserId":"293446","Tags":["databases","nosql"],"Body":"&lt;p&gt;What is the fastest and most stable non-sql database to store big data and process thousands requests during the day (it's for traffic exchange service)? I've found Kdb+ and Berkeley DB. Are they good? Are there other options?&lt;\/p&gt;\n\n&lt;p&gt;More details...&lt;\/p&gt;\n\n&lt;p&gt;Each day server processes &gt; 100K visits. For each visit I need to read corresponding stats from DB, write log to DB and update stats in DB, aka 3 operations with DB per visit. Traffic is continuously increasing. Thus DB engine should be fast. From one side DB will be managed by demon written on C, Erlang or any other low-level language. From another side DB will be managed by PHP scripts. &lt;\/p&gt;\n"},{"Id":"2443381","CreationDate":"2010-03-14T19:13:08.510","OwnerUserId":"13483","Tags":["data-storage","language-agnostic","sql","nosql"],"Body":"&lt;p&gt;I have a project in mind that will require the majority of queries to be keyed off of lat\/long  as well as date + time.&lt;\/p&gt;\n\n&lt;p&gt;Initially, I was thinking of a standard RDBMS where lat, long, and the datetime field are properly indexed.  Then, I began thinking of a document based system where the document was essentially a timestamp and each document has lat\/long with in it.  Each document could have n objects associated with it.  &lt;\/p&gt;\n\n&lt;p&gt;I'm looking for advice on what would be the best type of storage engine for this sort of thing  is - which of the above idea would be better or if there is something else completely that is the ideal solution.&lt;\/p&gt;\n\n&lt;p&gt;Edit:  Looking for an open source\/free solution.  Unfortunately price is an issue!&lt;\/p&gt;\n\n&lt;p&gt;Thanks&lt;\/p&gt;\n"},{"Id":"2443712","CreationDate":"2010-03-14T20:45:59.363","OwnerUserId":"187511","Tags":["ruby-on-rails","couchdb","nosql"],"Body":"&lt;p&gt;I am currently investigating possible applications of CouchDB on my current project (written in Rails) and would like to get some feedback from people who have actually used these APIs.  Which would you recommend and why?&lt;\/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;ActiveCouch&lt;\/li&gt;\n&lt;li&gt;CouchFoo&lt;\/li&gt;\n&lt;li&gt;CouchRest&lt;\/li&gt;\n&lt;li&gt;CouchRest-Rails&lt;\/li&gt;\n&lt;li&gt;CouchPotato&lt;\/li&gt;\n&lt;\/ul&gt;\n"},{"Id":"2445878","CreationDate":"2010-03-15T08:45:09.633","OwnerUserId":"58394","Tags":["cassandra","nosql"],"Body":"&lt;p&gt;Assume the following data set:&lt;\/p&gt;\n\n&lt;pre&gt;&lt;code&gt;id       age  city      phone\n==       ===  ====      =====\nalfred   30   london    3281283\njeff     43   sydney    2342734\njoe      29   tokyo     1283881\nkelly    54   new york  2394929\nmolly    20   london    1823881\nrob      39   sydney    4928381\n&lt;\/code&gt;&lt;\/pre&gt;\n\n&lt;p&gt;To get the following result set ..&lt;\/p&gt;\n\n&lt;pre&gt;&lt;code&gt;id       age  phone\n==       ===  =====\nalfred   30   3281283\njoe      29   1283881\nmolly    20   1823881\n&lt;\/code&gt;&lt;\/pre&gt;\n\n&lt;p&gt;.. using SQL one would issue ..&lt;\/p&gt;\n\n&lt;pre&gt;&lt;code&gt;SELECT id, age, phone FROM dataset WHERE id IN ('alfred', 'joe', 'molly');\n&lt;\/code&gt;&lt;\/pre&gt;\n\n&lt;p&gt;What is the corresponding Cassandra API call that would yield the same result set in one command?&lt;\/p&gt;\n"},{"Id":"2452169","CreationDate":"2010-03-16T04:46:30.563","OwnerUserId":"171985","Tags":["asp.net-mvc","asp.net","c#","database","nosql"],"Body":"&lt;p&gt;I started my project in Asp.net MVC(c#) &amp;#38;amp; SQL Server 2005.I want to implement Object Databases in my project.\nWhile searched in google i found &quot;&lt;a href=&quot;http:\/\/www.mongodb.org\/display\/DOCS\/Home&quot; rel=&quot;nofollow&quot;&gt;MongoDb&lt;\/a&gt;&quot; &amp;#38;amp; &lt;a href=&quot;http:\/\/www.db4o.com\/about\/productinformation\/&quot; rel=&quot;nofollow&quot;&gt;db4o&lt;\/a&gt;&lt;\/p&gt;\n\n&lt;p&gt;I didn't have enough knowledge in Object Databases &amp;#38;amp; which one best suited for SQL Server 2005.&lt;\/p&gt;\n\n&lt;p&gt;Please suggest a good example\/reference regarding Object Databases implementation in Asp.net MVC application&lt;\/p&gt;\n"},{"Id":"2452395","CreationDate":"2010-03-16T05:57:56.180","OwnerUserId":"205865","Tags":["cassandra","nosql"],"Body":"&lt;p&gt;How can you pull some # of random keys from a Cassandra supercolumn?&lt;\/p&gt;\n"},{"Id":"2453513","CreationDate":"2010-03-16T10:22:11.217","OwnerUserId":"262158","Tags":["mongodb","c#","nosql"],"Body":"&lt;p&gt;Using MongoDB C# driver (http:\/\/github.com\/samus\/mongodb-csharp), seems that I'm unable to get the data by ObjectId. Below the command that I'm using: &lt;\/p&gt;\n\n&lt;pre&gt;&lt;code&gt;var spec = new Document { { &quot;_id&quot;, id } };\nvar doc = mc.FindOne(spec);\n&lt;\/code&gt;&lt;\/pre&gt;\n\n&lt;p&gt;I also tried this:&lt;\/p&gt;\n\n&lt;pre&gt;&lt;code&gt;var spec = new Document { { &quot;_id&quot;, &quot;ObjectId(\\&quot;&quot; + id + &quot;\\&quot;)&quot; } };\nvar doc = mc.FindOne(spec);\n&lt;\/code&gt;&lt;\/pre&gt;\n\n&lt;p&gt;Both return nothing. Meanwhile, if I query it from the mongo console, it returns the expected result.&lt;\/p&gt;\n\n&lt;p&gt;My question is, does that driver actually support the lookup by ObjectId?&lt;\/p&gt;\n\n&lt;p&gt;Thanks..&lt;\/p&gt;\n"},{"Id":"2457494","CreationDate":"2010-03-16T19:37:20.333","OwnerUserId":"295027","Tags":["simpledb","amazon-simpledb","nosql","mvcc","aws"],"Body":"&lt;p&gt;Now that Amazon's SimpleDB implements consistent reads and conditional update\/delete it is possible to implement cross-domain transactions using MVCC.&lt;\/p&gt;\n\n&lt;p&gt;Are there any client libraries that provide it?&lt;\/p&gt;\n"},{"Id":"2460876","CreationDate":"2010-03-17T09:03:47.823","OwnerUserId":"231957","Tags":["nosql","ruby","datamapper"],"Body":"&lt;p&gt;Hello,\nI not sure I have understood all the principles of nosql, especially Cassandra project, but I like to know if it's possible to have Cassandra working with Data-mapper ?\nI working on a ruby application using Data-mapper and MySQL and start to think of migrating to Cassandra. Is that something easy and worth doing ?\nThanks a lot,\nLuc&lt;\/p&gt;\n"},{"Id":"2476280","CreationDate":"2010-03-19T09:54:57.657","OwnerUserId":"105363","Tags":["mysql","nosql","migration","packet-examples"],"Body":"&lt;p&gt;Hello,&lt;\/p&gt;\n\n&lt;p&gt;For a Facebook-like site, ie. which is write-intensive and delivers user-customized pages, I'd like to build a prototype to investigate whether the document-centric NoSQL architecture would be a good alternative to sharding and reduce the load on the single master (+ multiple slaves) that we currently use and is the bottleneck.&lt;\/p&gt;\n\n&lt;p&gt;Does someone know of a good article that would give actual, simple examples of going from a relational layout in MySQL to a NoSQL layout?&lt;\/p&gt;\n\n&lt;p&gt;Thank you.&lt;\/p&gt;\n"},{"Id":"2479589","CreationDate":"2010-03-19T18:12:23.410","OwnerUserId":"138041","Tags":["cassandra","data-modeling","database-design","nosql","key-value"],"Body":"&lt;p&gt;Hello guys! &lt;\/p&gt;\n\n&lt;p&gt;I hope there's someone who can help me suggest a suitable data model to be implemented using nosql database Apache Cassandra. More of than I need it to work under high loads and large amounts of data.&lt;\/p&gt;\n\n&lt;p&gt;Simplified I have 3 types of objects:&lt;\/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Product&lt;\/li&gt;\n&lt;li&gt;Tag&lt;\/li&gt;\n&lt;li&gt;ProductTag&lt;\/li&gt;\n&lt;\/ul&gt;\n\n&lt;p&gt;Product:&lt;\/p&gt;\n\n&lt;pre&gt;&lt;code&gt;key - string key\nname - string\n.... - some other fields\n&lt;\/code&gt;&lt;\/pre&gt;\n\n&lt;p&gt;Tag:&lt;\/p&gt;\n\n&lt;pre&gt;&lt;code&gt;key - string key\nname - unique tag words\n&lt;\/code&gt;&lt;\/pre&gt;\n\n&lt;p&gt;ProductTag:&lt;\/p&gt;\n\n&lt;pre&gt;&lt;code&gt;product_key - foreign key referring to product\ntag_key  - foreign key referring to tag\nrating - this is rating of tag for this product\n&lt;\/code&gt;&lt;\/pre&gt;\n\n&lt;p&gt;Each product may have 0 or many tags. Tag may be assigned to 1 or many products. Means relation between products and tags is many-to-many in terms of relational databases.&lt;\/p&gt;\n\n&lt;p&gt;Value of &quot;rating&quot; is updated &quot;very&quot; often. &lt;\/p&gt;\n\n&lt;p&gt;I need to be run the following queries&lt;\/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Select objects by keys&lt;\/li&gt;\n&lt;li&gt;Select tags for product ordered by rating&lt;\/li&gt;\n&lt;li&gt;Select products by tag order by rating&lt;\/li&gt;\n&lt;li&gt;Update rating by product_key and tag_key&lt;\/li&gt;\n&lt;\/ul&gt;\n\n&lt;p&gt;The most important is to make these queries really fast on large amounts of data, considering that rating is constantly updated.&lt;\/p&gt;\n"},{"Id":"2481811","CreationDate":"2010-03-20T03:38:54.190","OwnerUserId":"46914","Tags":["python","django","mongodb","mongoengine","nosql"],"Body":"&lt;p&gt;I'm integrating MongoDB using MongoEngine.  It provides auth and session support that a standard pymongo setup would lack.&lt;\/p&gt;\n\n&lt;p&gt;In regular django auth, it's considered bad practice to extend the User model since there's no guarantee it will be used correctly everywhere.  Is this the case with &lt;code&gt;mongoengine.django.auth&lt;\/code&gt;?&lt;\/p&gt;\n\n&lt;p&gt;If it &lt;em&gt;is&lt;\/em&gt; considered bad practice, what is the best way to attach a separate user profile? Django has mechanisms for specifying an &lt;code&gt;AUTH_PROFILE_MODULE&lt;\/code&gt;.  Is this supported in MongoEngine as well, or should I be manually doing the lookup?&lt;\/p&gt;\n"},{"Id":"2483530","CreationDate":"2010-03-20T15:10:29.270","OwnerUserId":"190822","Tags":["nosql","document","database"],"Body":"&lt;p&gt;Since document databases store records in tree like structures the fields will never be at set positions. Does this make querying a document database inefficient, or would indexes just be used as with a normal relational database?&lt;\/p&gt;\n"},{"Id":"2486346","CreationDate":"2010-03-21T07:46:16.093","OwnerUserId":"298340","Tags":["nosql","key-value-store","sql","postgresql"],"Body":"&lt;p&gt;There is a table:&lt;\/p&gt;\n\n&lt;pre&gt;&lt;code&gt;doc_id(integer)-value(integer)\n&lt;\/code&gt;&lt;\/pre&gt;\n\n&lt;p&gt;Approximate 100.000 doc_id and 27.000.000 rows.&lt;\/p&gt;\n\n&lt;p&gt;Majority query on this table - searching documents similar to current document:&lt;\/p&gt;\n\n&lt;pre&gt;&lt;code&gt;select 10 documents with maximum of \n     (count common to current document value)\/(count ov values in document).\n&lt;\/code&gt;&lt;\/pre&gt;\n\n&lt;p&gt;Nowadays we use PostgreSQL. Table weight (with index) ~1,5 GB. Average query time ~0.5s - it is to hight. And, for my opinion this time will grow exponential with growing of database.&lt;\/p&gt;\n\n&lt;p&gt;Should I transfer all this to NoSQL base, if so, what?&lt;\/p&gt;\n\n&lt;p&gt;QUERY:&lt;\/p&gt;\n\n&lt;pre&gt;&lt;code&gt;EXPLAIN ANALYZE\nSELECT D.doc_id as doc_id,\n  (count(D.doc_crc32) *1.0 \/ testing.get_count_by_doc_id(D.doc_id))::real as avg_doc \nFROM testing.text_attachment D\nWHERE D.doc_id !=29758 -- 29758 - is random id\n  AND D.doc_crc32 IN (select testing.get_crc32_rows_by_doc_id(29758)) -- get_crc32... is IMMUTABLE\nGROUP BY D.doc_id\nORDER BY avg_doc DESC\nLIMIT 10\n\nLimit  (cost=95.23..95.26 rows=10 width=8) (actual time=1849.601..1849.641 rows=10 loops=1)\n   -&amp;#38;gt;  Sort  (cost=95.23..95.28 rows=20 width=8) (actual time=1849.597..1849.609 rows=10 loops=1)\n         Sort Key: (((((count(d.doc_crc32))::numeric * 1.0) \/ (testing.get_count_by_doc_id(d.doc_id))::numeric))::real)\n         Sort Method:  top-N heapsort  Memory: 25kB\n         -&amp;#38;gt;  HashAggregate  (cost=89.30..94.80 rows=20 width=8) (actual time=1211.835..1847.578 rows=876 loops=1)\n               -&amp;#38;gt;  Nested Loop  (cost=0.27..89.20 rows=20 width=8) (actual time=7.826..928.234 rows=167771 loops=1)\n                     -&amp;#38;gt;  HashAggregate  (cost=0.27..0.28 rows=1 width=4) (actual time=7.789..11.141 rows=1863 loops=1)\n                           -&amp;#38;gt;  Result  (cost=0.00..0.26 rows=1 width=0) (actual time=0.130..4.502 rows=1869 loops=1)\n                     -&amp;#38;gt;  Index Scan using crc32_idx on text_attachment d  (cost=0.00..88.67 rows=20 width=8) (actual time=0.022..0.236 rows=90 loops=1863)\n                           Index Cond: (d.doc_crc32 = (testing.get_crc32_rows_by_doc_id(29758)))\n                           Filter: (d.doc_id &amp;#38;lt;&amp;#38;gt; 29758)\n Total runtime: 1849.753 ms\n(12 rows)\n&lt;\/code&gt;&lt;\/pre&gt;\n"},{"Id":"2488783","CreationDate":"2010-03-21T21:26:26.183","OwnerUserId":"58394","Tags":["cassandra","nosql","perl","thrift"],"Body":"&lt;p&gt;When using the Perl module &lt;a href=&quot;http:\/\/search.cpan.org\/perldoc?Net::Cassandra::Easy&quot; rel=&quot;nofollow&quot;&gt;Net::Cassandra::Easy&lt;\/a&gt; to interface with Cassandra I use the following code to read colums &lt;code&gt;col[123]&lt;\/code&gt; from rows &lt;code&gt;row[123]&lt;\/code&gt; in the column-family &lt;code&gt;Standard1&lt;\/code&gt;:&lt;\/p&gt;\n\n&lt;pre&gt;&lt;code&gt;my $cassandra = Net::Cassandra::Easy-&amp;#38;gt;new(keyspace =&amp;#38;gt; 'Keyspace1', server =&amp;#38;gt; 'localhost');\n$cassandra-&amp;#38;gt;connect();\nmy $result = $cassandra-&amp;#38;gt;get(['row1', 'row2', 'row3'], family =&amp;#38;gt; 'Standard1', byname =&amp;#38;gt; ['col1', 'col2', 'col3']);\n&lt;\/code&gt;&lt;\/pre&gt;\n\n&lt;p&gt;This works as expected.&lt;\/p&gt;\n\n&lt;p&gt;However, when trying to insert row &lt;code&gt;row1&lt;\/code&gt; with ..&lt;\/p&gt;\n\n&lt;pre&gt;&lt;code&gt;$result = $cassandra-&amp;#38;gt;mutate(['row1'], family =&amp;#38;gt; 'Standard1', insertions =&amp;#38;gt; { &quot;col1&quot; =&amp;#38;gt; &quot;Value to set.&quot; });\n&lt;\/code&gt;&lt;\/pre&gt;\n\n&lt;p&gt;.. I get the error message &lt;code&gt;Can't use string (&quot;0&quot;) as a SCALAR ref while &quot;strict refs&quot; in use at ...\/Net\/GenThrift\/Thrift\/BinaryProtocol.pm line 376&lt;\/code&gt;.&lt;\/p&gt;\n\n&lt;p&gt;What am I doing wrong?&lt;\/p&gt;\n"},{"Id":"2495141","CreationDate":"2010-03-22T19:35:46.743","OwnerUserId":"58394","Tags":["cassandra","nosql","perl","thrift"],"Body":"&lt;p&gt;When using Perl's &lt;code&gt;Net::Cassandra::Easy&lt;\/code&gt; the following code will retrieve columns &lt;code&gt;col[1-3]&lt;\/code&gt; from rows &lt;code&gt;row[1-3]&lt;\/code&gt;:&lt;\/p&gt;\n\n&lt;pre&gt;&lt;code&gt;$result = $cassandra-&amp;#38;gt;get(['row1', 'row2', 'row3'], family =&amp;#38;gt; 'Standard1', byname =&amp;#38;gt; ['col1', 'col2', 'col3');\n&lt;\/code&gt;&lt;\/pre&gt;\n\n&lt;p&gt;The corresponding SQL would be:&lt;\/p&gt;\n\n&lt;pre&gt;&lt;code&gt;SELECT col1, col2, col3 FROM rows WHERE id IN ('row1', 'row2', 'row3');\n&lt;\/code&gt;&lt;\/pre&gt;\n\n&lt;p&gt;Suppose instead that I want to retrieve all columns. In SQL terms that would be:&lt;\/p&gt;\n\n&lt;pre&gt;&lt;code&gt;SELECT * FROM rows WHERE id IN ('row1', 'row2', 'row3');\n&lt;\/code&gt;&lt;\/pre&gt;\n\n&lt;p&gt;To get all columns I am currently using:&lt;\/p&gt;\n\n&lt;pre&gt;&lt;code&gt;$result = $cassandra-&amp;#38;gt;get(['row1', 'row2', 'row3'], family =&amp;#38;gt; 'Standard1', byoffset =&amp;#38;gt; { &quot;count&quot; =&amp;#38;gt; 1_000_000 });\n&lt;\/code&gt;&lt;\/pre&gt;\n\n&lt;p&gt;This works as long as the number of columns does not exceed one million. While this works I'd assume that there is a cleaner way to do it. Is there any cleaner way to specify to Cassandra that I want to retrieve all columns for the matching rows?&lt;\/p&gt;\n"},{"Id":"2499659","CreationDate":"2010-03-23T12:05:48.597","OwnerUserId":"58394","Tags":["cassandra","nosql"],"Body":"&lt;p&gt;The following is a complete catalogue of all log messages generated by Cassandra 0.6 when stress-testing a Cassandra installation over an extended period of time:&lt;\/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;AntiEntropyService: Sending AEService tree for (,) to: []&lt;\/li&gt;\n&lt;li&gt;CassandraDaemon: Binding thrift service to localhost\/N.N.N.N:N&lt;\/li&gt;\n&lt;li&gt;CassandraDaemon: Cassandra starting up...&lt;\/li&gt;\n&lt;li&gt;ColumnFamilyStore:  has reached its threshold; switching in a fresh Memtable at CommitLogContext(file='...\/cassandra\/commitlog\/CommitLog-N.log', position=N)&lt;\/li&gt;\n&lt;li&gt;ColumnFamilyStore: Enqueuing flush of Memtable()@N&lt;\/li&gt;\n&lt;li&gt;CommitLog: Discarding obsolete commit log:CommitLogSegment(...\/cassandra\/commitlog\/CommitLog-N.log)&lt;\/li&gt;\n&lt;li&gt;CommitLog: Log replay complete&lt;\/li&gt;\n&lt;li&gt;CommitLog: Replaying ...\/cassandra\/commitlog\/CommitLog-N.log, ...&lt;\/li&gt;\n&lt;li&gt;CommitLogSegment: Creating new commitlog segment ...\/cassandra\/commitlog\/CommitLog-N.log&lt;\/li&gt;\n&lt;li&gt;CompactionManager: Compacted to ...\/cassandra\/data\/\/-N-Data.db.  N\/N bytes for N keys.  Time: Nms.&lt;\/li&gt;\n&lt;li&gt;CompactionManager: Compacting [org.apache.cassandra.io.SSTableReader(path='...\/cassandra\/data\/\/-N-Data.db'), ...]&lt;\/li&gt;\n&lt;li&gt;DatabaseDescriptor: Auto DiskAccessMode determined to be mmap&lt;\/li&gt;\n&lt;li&gt;GCInspector: GC for ConcurrentMarkSweep: N ms, N reclaimed leaving N used; max is N&lt;\/li&gt;\n&lt;li&gt;GCInspector: GC for ParNew: N ms, N reclaimed leaving N used; max is N&lt;\/li&gt;\n&lt;li&gt;Memtable: Completed flushing ...\/cassandra\/data\/\/-N-Data.db&lt;\/li&gt;\n&lt;li&gt;Memtable: Writing Memtable()@N&lt;\/li&gt;\n&lt;li&gt;SSTable: Deleted ...\/cassandra\/data\/\/-N-Data.db&lt;\/li&gt;\n&lt;li&gt;SSTableDeletingReference: Deleted ...\/cassandra\/data\/\/-N-Data.db&lt;\/li&gt;\n&lt;li&gt;SSTableReader: Sampling index for ...\/cassandra\/data\/\/-N-Data.db&lt;\/li&gt;\n&lt;li&gt;StorageService: Starting up server gossip&lt;\/li&gt;\n&lt;li&gt;SystemTable: Saved ClusterName found: Test Cluster&lt;\/li&gt;\n&lt;li&gt;SystemTable: Saved ClusterName not found. Using Test Cluster&lt;\/li&gt;\n&lt;li&gt;SystemTable: Saved Token found: N&lt;\/li&gt;\n&lt;li&gt;SystemTable: Saved Token not found. Using N&lt;\/li&gt;\n&lt;\/ul&gt;\n\n&lt;p&gt;&lt;b&gt;For each of the log messages listed - what is the correct interpretation of the log message?&lt;\/b&gt;&lt;\/p&gt;\n"},{"Id":"2500595","CreationDate":"2010-03-23T14:18:07.540","OwnerUserId":"58394","Tags":["cassandra","nosql"],"Body":"&lt;p&gt;The Cassandra command-line utility &lt;code&gt;sstablekeys&lt;\/code&gt; can be used to extract all defined row keys from a physical SSTABLE file:&lt;\/p&gt;\n\n&lt;pre&gt;&lt;code&gt;sstablekeys ...\/cassandra\/data\/Keyspace1\/Standard1-N-Data.db\n&lt;\/code&gt;&lt;\/pre&gt;\n\n&lt;p&gt;Does the Cassandra API support retrieval of all defined keys? If so, how?&lt;\/p&gt;\n\n&lt;p&gt;I'm looking for the Cassandra analogy to &lt;code&gt;SELECT id FROM table;&lt;\/code&gt;.&lt;\/p&gt;\n"},{"Id":"2501583","CreationDate":"2010-03-23T16:12:19.197","OwnerUserId":"58394","Tags":["cassandra","nosql"],"Body":"&lt;p&gt;I'm getting &lt;code&gt;NullPointerException&lt;\/code&gt;:s when using &lt;code&gt;sstable2json&lt;\/code&gt; in Cassandra 0.6.0-beta3:&lt;\/p&gt;\n\n&lt;pre&gt;&lt;code&gt;$ bin\/sstable2json ...\/cassandra\/data\/system\/LocationInfo-1-Data.db\nException in thread &quot;main&quot; java.lang.NullPointerException\n    at java.util.Arrays$ArrayList.&amp;#38;lt;init&amp;#38;gt;(Arrays.java:3357)\n    at java.util.Arrays.asList(Arrays.java:3343)\n    at org.apache.cassandra.tools.SSTableExport.export(SSTableExport.java:255)\n    at org.apache.cassandra.tools.SSTableExport.export(SSTableExport.java:299)\n    at org.apache.cassandra.tools.SSTableExport.export(SSTableExport.java:323)\n    at org.apache.cassandra.tools.SSTableExport.main(SSTableExport.java:367)\n&lt;\/code&gt;&lt;\/pre&gt;\n\n&lt;p&gt;I've had no problems with &lt;code&gt;sstable2json&lt;\/code&gt; when using Cassandra 0.5.&lt;\/p&gt;\n\n&lt;p&gt;Is &lt;code&gt;sstable2json&lt;\/code&gt; broken in Cassandra 0.6.0-beta3 or am I doing something wrong?&lt;\/p&gt;\n"},{"Id":"2502742","CreationDate":"2010-03-23T18:51:47.610","OwnerUserId":"50986","Tags":["mongodb","db4o","nosql"],"Body":"&lt;p&gt;Object databases like MongoDB and db4o are getting lots of publicity lately.  Everyone that plays with them seems to love it.  I'm guessing that they are dealing with about 640K of data in their sample apps.&lt;\/p&gt;\n\n&lt;p&gt;Has anyone tried to use an object database with a large amount of data (say, 50GB or more)?  Are you able to still execute complex queries against it (like from a search screen)?  How does it compare to your usual relational database of choice?  &lt;\/p&gt;\n\n&lt;p&gt;I'm just curious.  I want to take the object database plunge, but I need to know if it'll work on something more than a sample app.&lt;\/p&gt;\n"},{"Id":"2504591","CreationDate":"2010-03-24T00:21:58.627","OwnerUserId":"20126","Tags":["nosql",".net"],"Body":"&lt;p&gt;just was reading this article &lt;a href=&quot;http:\/\/highscalability.com\/blog\/2010\/3\/23\/digg-4000-performance-increase-by-sorting-in-php-rather-than.html&quot; rel=&quot;nofollow&quot;&gt;http:\/\/highscalability.com\/blog\/2010\/3\/23\/digg-4000-performance-increase-by-sorting-in-php-rather-than.html&lt;\/a&gt;&lt;br&gt;\nAnd found this nice article &lt;a href=&quot;http:\/\/wiki.apache.org\/cassandra\/DataModel&quot; rel=&quot;nofollow&quot;&gt;http:\/\/wiki.apache.org\/cassandra\/DataModel&lt;\/a&gt;&lt;br&gt;\nI just want to know as a .net developer how to deal with NOSQL, and somethings like cassandra.  &lt;\/p&gt;\n\n&lt;p&gt;I found that cassandra is apache product, is there something like this in microsoft world? or articles to know how to deal with cassandra using .net?&lt;\/p&gt;\n\n&lt;p&gt;another link may be useful: &lt;a href=&quot;http:\/\/www.slideshare.net\/jhammerb\/data-presentations-cassandra-sigmod&quot; rel=&quot;nofollow&quot;&gt;http:\/\/www.slideshare.net\/jhammerb\/data-presentations-cassandra-sigmod&lt;\/a&gt;&lt;\/p&gt;\n"},{"Id":"2504833","CreationDate":"2010-03-24T01:42:44.497","OwnerUserId":"52751","Tags":["mysql","nosql","performance-tuning"],"Body":"&lt;p&gt;I've been using mysql (with innodb; on Amazon rds) because it's sort of universal default, but it's been ridiculously under-performing, and tweaking it only delays the inevitable.&lt;\/p&gt;\n\n&lt;p&gt;The data is mostly relatively short (&amp;#38;lt;1kB of bytes each) blobs information about 100Ms of urls. There is (or should be, mysql cannot seem to handle it) very high amount of insert \/ update \/ retrieve but few complex queries - not that complex queries wouldn't be useful, but because mysql is so slow that it's far faster to get the data out, process it locally, and cache the results somewhere.&lt;\/p&gt;\n\n&lt;p&gt;I can keep tweaking mysql and throwing more hardware at it, but it seems increasingly futile. &lt;\/p&gt;\n\n&lt;p&gt;So what are the options? SQL\/relational model\/etc. optional - anything will do as long as it's fast, networked, and language-independent.&lt;\/p&gt;\n"},{"Id":"2505900","CreationDate":"2010-03-24T07:07:00.437","OwnerUserId":"133298","Tags":["couchdb","mysql","schemaless","nosql","document-oriented-db"],"Body":"&lt;p&gt;Disclaimer: let me know if this question is better suited for serverfault.com&lt;\/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;I want to store information on music, specifically:&lt;\/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;genres&lt;\/li&gt;\n&lt;li&gt;artists&lt;\/li&gt;\n&lt;li&gt;albums&lt;\/li&gt;\n&lt;li&gt;songs&lt;\/li&gt;\n&lt;\/ul&gt;\n\n&lt;p&gt;This information will be used in a web application, and I want people to be able to see all of the songs associated to an album, and albums associated to an artist, and artists associated to a genre.&lt;\/p&gt;\n\n&lt;p&gt;I'm currently using MySQL, but before I make a decision to switch I want to know:&lt;\/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;How easy is scaling horizontally?&lt;\/li&gt;\n&lt;li&gt;Is it easier to manage than an SQL based solution?&lt;\/li&gt;\n&lt;li&gt;Would the above data I want to store be too hard to do schema-free?&lt;\/li&gt;\n&lt;li&gt;When I think association, I immediately think RDBMSs; can data be stored in something like CouchDB but still have some kind of association as stated above?&lt;\/li&gt;\n&lt;li&gt;My web application requires replication, how well does CouchDB or others handle this?&lt;\/li&gt;\n&lt;\/ol&gt;\n"},{"Id":"2510627","CreationDate":"2010-03-24T19:02:30.933","OwnerUserId":"16957","Tags":["nosql","statistics"],"Body":"&lt;p&gt;I'm not terribly familiar with NoSQL systems, but I remember reading a while back that they are ideal to handle statistical data.&lt;\/p&gt;\n\n&lt;p&gt;Since I'm about to start writing code that will record data like &quot;how many users were registered on each day&quot;, I was thinking I could use this as an opportunity to learn more about NoSQL if it fits the bill.&lt;\/p&gt;\n\n&lt;p&gt;If NoSQL is indeed ideal for this, could you provide me with some information as to why? And which specific systems are best suited for this particular need?&lt;\/p&gt;\n\n&lt;p&gt;So, after the first answer, maybe it's helpful to clarify a bit more.&lt;\/p&gt;\n\n&lt;p&gt;I currently have a PostgreSQL database from which I'll get the data. It will be very simple, and no calculations needed. For example, I'll just get a resultset with the amount of users registered each day for the past month (so it'll basically just be a set of value pairs for the date\/users) and save that in another table\/database.&lt;\/p&gt;\n\n&lt;p&gt;Thanks!&lt;\/p&gt;\n"},{"Id":"2516752","CreationDate":"2010-03-25T15:17:38.490","OwnerUserId":"233042","Tags":["nosql","medical","database"],"Body":"&lt;p&gt;Electronic Medical records are composed of different types of data.  Visit information ( date\/location\/insurance info) seems to lend itself to a RDMS.  Other types of medical infomation, such as lab reports, x-rays, photos, and electronic signatures, are document based and would seem to be a good candidate for a 'document-oriented' database, such as MongoDB.  &lt;\/p&gt;\n\n&lt;p&gt;Traditionally, binary data would be stored as a BLOB in a RDBMS.  A hybrid approach using a traditional RDBMS along with a 'document-oriented' database would seem like good alternative to this.  Other alternative would be something like DB2 purexml.  &lt;\/p&gt;\n\n&lt;p&gt;The ultimate answer could be that 'it depends', but I really just wanted to get some general feedback\/ideas on this. &lt;\/p&gt;\n\n&lt;p&gt;Is anyone using the NoSql approach for medical records?&lt;\/p&gt;\n\n&lt;p&gt;** Clarifying question ** \nTo clarify: is anyone using nosql databases such as: mongoDB, Cassandra, CouchDB for medical records, in a production environment? &lt;\/p&gt;\n"},{"Id":"2520791","CreationDate":"2010-03-26T02:19:07.190","OwnerUserId":"184057","Tags":["game-development","games","game","sql","nosql"],"Body":"&lt;p&gt;I am trying to solve complex thing (as it looks to me).&lt;\/p&gt;\n\n&lt;p&gt;I have next entities:&lt;\/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;PLAYER (few of them, with names like &quot;John&quot;, &quot;Peter&quot;, etc.). Each has unique ID. For simplicity let's think it's their name.&lt;\/p&gt;&lt;\/li&gt;\n&lt;li&gt;&lt;p&gt;GAME (few of them, say named &quot;Hide and Seek&quot;, &quot;Jump and Run&quot;, etc.). Same - each has unique ID. For simplicity of the case let it be it's name for now.&lt;\/p&gt;&lt;\/li&gt;\n&lt;li&gt;&lt;p&gt;SCORE (it's numeric).&lt;\/p&gt;&lt;\/li&gt;\n&lt;\/ol&gt;\n\n&lt;p&gt;So, how it works.&lt;\/p&gt;\n\n&lt;p&gt;Each PLAYER can play in multiple GAMES. He gets some SCORE in every GAME.&lt;\/p&gt;\n\n&lt;p&gt;I need to build rating table -- and not one!&lt;\/p&gt;\n\n&lt;p&gt;Table #1: most played GAMES\nTable #2: best PLAYERS in all games (say the total SCORE in every GAME).\nTable #3: best PLAYERS per GAME (by SCORE in particularly that GAME).&lt;\/p&gt;\n\n&lt;p&gt;I could be build something straight right away, but that will not work.\nI will have more than 10,000 players; and 15 games, which will grow for sure.\nScore can be as low as 0, and as high as 1,000,000 (not sure if higher is possible at this moment) for player in the game. So I really need some relative data.&lt;\/p&gt;\n\n&lt;p&gt;Any suggestions?&lt;\/p&gt;\n\n&lt;p&gt;I am planning to do it with SQL, but may be just using it for key-value storage; anything -- any ideas are welcome.&lt;\/p&gt;\n\n&lt;p&gt;Thank you!&lt;\/p&gt;\n"},{"Id":"2526192","CreationDate":"2010-03-26T19:35:43.900","OwnerUserId":"300588","Tags":["nosql","subjective"],"Body":"&lt;p&gt;what the best NoSQL solution for windows server? preferably open source&lt;\/p&gt;\n"},{"Id":"2526634","CreationDate":"2010-03-26T20:47:07.380","OwnerUserId":"184057","Tags":["nosql","mysql","cassandra","hbase","sql"],"Body":"&lt;p&gt;Say I have &quot;user&quot;. It's the key. And I need to keep &quot;user count&quot;.\nI am planning to have record with key &quot;user&quot; and value &quot;0&quot; to &quot;9999+ ;-)&quot; (as many as I'll have).&lt;\/p&gt;\n\n&lt;p&gt;What problems I will drive in if I use Cassandra, HBase or MySQL for that?\nSay, I have thousand of new updates to this &quot;user&quot; key, where I need to increment the value.\nAm I in trouble? Locked for writes?\nAny other way of doing that?&lt;\/p&gt;\n\n&lt;p&gt;Why this is done -- there will be a lot of &quot;user&quot;-like keys. Different other cases. But the idea is the same. Why keep it this way -- because I'll have more reads, so I can always get &quot;counted value&quot; very fast.&lt;\/p&gt;\n"},{"Id":"2527173","CreationDate":"2010-03-26T22:28:32.227","OwnerUserId":"10680","Tags":["nosql","cassandra","couchdb","mongodb","python"],"Body":"&lt;p&gt;Since Cassandra doesn't have MapReduce built in yet (I think it's coming in 0.7), is it dumb to try and MapReduce with my Python client or should I just use CouchDB or Mongo or something?&lt;\/p&gt;\n\n&lt;p&gt;The application is stats collection, so I need to be able to sum values with grouping to increment counters. I'm not, but pretend I'm making Google analytics so I want to keep track of which browsers appear, which pages they went to, and visits vs. pageviews.&lt;\/p&gt;\n\n&lt;p&gt;I would just atomically update my counters on write, but Cassandra isn't very good at counters either.&lt;\/p&gt;\n\n&lt;p&gt;May Cassandra just isn't the right choice for this?&lt;\/p&gt;\n\n&lt;p&gt;Thanks!&lt;\/p&gt;\n"},{"Id":"2527682","CreationDate":"2010-03-27T00:37:52.667","OwnerUserId":"58394","Tags":["cassandra","nosql","perl","utf-8","unicode"],"Body":"&lt;p&gt;I've run into a really strange UTF-8 problem with &lt;code&gt;Net::Cassandra::Easy&lt;\/code&gt; (which is built upon &lt;code&gt;Net::Cassandra&lt;\/code&gt;): UTF-8 strings written to Cassandra are garbled upon retrieval.&lt;\/p&gt;\n\n&lt;p&gt;The following code shows the problem:&lt;\/p&gt;\n\n&lt;pre&gt;&lt;code&gt;use strict;\nuse utf8;\nuse warnings;\nuse Net::Cassandra::Easy;\n\nbinmode(STDOUT, &quot;:utf8&quot;);\n\nmy $key = &quot;some_key&quot;;\nmy $column = &quot;some_column&quot;;\nmy $set_value = &quot;\\x{2603}&quot;; # U+2603 is \u2603 (SNOWMAN)\nmy $cassandra = Net::Cassandra::Easy-&amp;#38;gt;new(keyspace =&amp;#38;gt; &quot;Keyspace1&quot;, server =&amp;#38;gt; &quot;localhost&quot;);\n$cassandra-&amp;#38;gt;connect();\n$cassandra-&amp;#38;gt;mutate([$key], family =&amp;#38;gt; &quot;Standard1&quot;, insertions =&amp;#38;gt; { $column =&amp;#38;gt; $set_value });\nmy $result = $cassandra-&amp;#38;gt;get([$key], family =&amp;#38;gt; &quot;Standard1&quot;, standard =&amp;#38;gt; 1);\nmy $get_value = $result-&amp;#38;gt;{$key}-&amp;#38;gt;{&quot;Standard1&quot;}-&amp;#38;gt;{$column};\nif ($set_value eq $get_value) {\n    # this is the path I want.\n    print &quot;OK: $set_value == $get_value\\n&quot;;\n} else {\n    # this is the path I get.\n    print &quot;ERR: $set_value != $get_value\\n&quot;;\n}\n&lt;\/code&gt;&lt;\/pre&gt;\n\n&lt;p&gt;When running the code above &lt;code&gt;$set_value eq $get_value&lt;\/code&gt; evaluates to &lt;code&gt;false&lt;\/code&gt;. What am I doing wrong?&lt;\/p&gt;\n"},{"Id":"2529426","CreationDate":"2010-03-27T13:29:14.563","OwnerUserId":"12631","Tags":["nosql","database","tools","reporting","sql"],"Body":"&lt;p&gt;I know that NoSQL databases are very new. I am also new in this point. But exist already tools\/libraries to make the life easer like for SQL databases? &lt;\/p&gt;\n\n&lt;p&gt;I think on tools for managing, maintaining, viewing or reporting of the data. There can also be libraries for easer working with the database or an abstract database layer to change the database later.&lt;\/p&gt;\n\n&lt;p&gt;I would prefer Java libraries but also other are interesting.&lt;\/p&gt;\n"},{"Id":"2529871","CreationDate":"2010-03-27T15:44:53.613","OwnerUserId":"211450","Tags":["cassandra","dbms","database","nosql"],"Body":"&lt;p&gt;Hi! I have huge database (kinda wordnet) and want to know if it's easier to use Cassandra instead of MySQL|PostrgreSQL&lt;\/p&gt;\n\n&lt;p&gt;All my life I was using MySQL and PostrgreSQL and I could easily think in terms of relational algebra, but several weeks ago I learned about cassandra and that it's used in Facebook and Twitter.&lt;\/p&gt;\n\n&lt;p&gt;Is it more convenient? &lt;\/p&gt;\n\n&lt;p&gt;What DBMS are usually used nowadays to store social net's data, relationships between objects, wordnet?&lt;\/p&gt;\n"},{"Id":"2534408","CreationDate":"2010-03-28T20:25:07.717","OwnerUserId":"126994","Tags":["database","nosql","design"],"Body":"&lt;p&gt;Recently I have read a lot about different NoSQL databases and how they are being effectively deployed by some major websites out there.  I'm starting a project in which I think the schema-free nature of a database such as MongoDB would be tremendously useful.  Everything I have read though seems to indicate that the main advantage of a NoSQL database is scalability.  Is choosing a NoSQL database for the schema-free design just as legitimate a design decision as that of scalability?&lt;\/p&gt;\n"},{"Id":"2539958","CreationDate":"2010-03-29T17:34:20.973","OwnerUserId":"304435","Tags":["amazon-ec2","riak","nosql"],"Body":"&lt;p&gt;Hi, &lt;\/p&gt;\n\n&lt;p&gt;I am looking to setup Amazon EC\/2 nodes on rails with Riak. I am looking to be able to sync the riak DBs and if the cluster gets a query, to be able to tell where the data lies and retrieve it quickly. In your opinion(s), is EC\/2 fast enough between nodes to query a Riak DB, return the results, and get them back to the client in a timely manner? I am new to all of this, so please be kind :)&lt;\/p&gt;\n"},{"Id":"2540040","CreationDate":"2010-03-29T17:46:05.587","OwnerUserId":"283181","Tags":["cassandra","python","database","nosql"],"Body":"&lt;p&gt;I think everything is in the question.\nI'm looking for the Lazyboy equivalent for Pycassa ColumnFamily.get_range() -- with features like column_start, column_finish et column_count --.&lt;\/p&gt;\n\n&lt;p&gt;Thanks.&lt;\/p&gt;\n"},{"Id":"2541273","CreationDate":"2010-03-29T21:04:29.483","OwnerUserId":"58394","Tags":["cassandra","nosql"],"Body":"&lt;p&gt;Assume a Cassandra datastore with 20 rows, with row keys named &lt;code&gt;&quot;r1&quot;&lt;\/code&gt; .. &lt;code&gt;&quot;r20&quot;&lt;\/code&gt;.&lt;\/p&gt;\n\n&lt;p&gt;Questions:&lt;\/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;How do I fetch the row keys of the first ten rows (&lt;code&gt;r1&lt;\/code&gt; to &lt;code&gt;r10&lt;\/code&gt;)?&lt;\/p&gt;&lt;\/li&gt;\n&lt;li&gt;&lt;p&gt;How do I fetch the row keys of the next ten rows (&lt;code&gt;r11&lt;\/code&gt; to &lt;code&gt;r20&lt;\/code&gt;)?&lt;\/p&gt;&lt;\/li&gt;\n&lt;\/ul&gt;\n\n&lt;p&gt;I'm looking for the Cassandra analogy to:&lt;\/p&gt;\n\n&lt;pre&gt;&lt;code&gt;SELECT row_key FROM table LIMIT 0, 10;\nSELECT row_key FROM table LIMIT 10, 10;\n&lt;\/code&gt;&lt;\/pre&gt;\n"},{"Id":"2546825","CreationDate":"2010-03-30T16:22:32.777","OwnerUserId":"58394","Tags":["cassandra","nosql"],"Body":"&lt;p&gt;The default Cassandra systems keyspace &lt;code&gt;system&lt;\/code&gt; is present in all Cassandra installations.&lt;\/p&gt;\n\n&lt;p&gt;Judging from the output of the &lt;code&gt;describe keyspace&lt;\/code&gt; command the keyspace is used partly for &quot;persistent metadata for the local node&quot; (&lt;code&gt;LocationInfo&lt;\/code&gt;) and partly for &quot;hinted handoff data&quot;.&lt;\/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;What persistent metadata for the local node is stored in &lt;code&gt;system\/LocationInfo&lt;\/code&gt;?&lt;\/li&gt;\n&lt;li&gt;What is the definition of hinted handoff in Cassandra terminology?&lt;\/li&gt;\n&lt;li&gt;What hinted handoff data is stored in the &lt;code&gt;system&lt;\/code&gt; keyspace?&lt;\/li&gt;\n&lt;\/ul&gt;\n"},{"Id":"2546948","CreationDate":"2010-03-30T16:41:50.397","OwnerUserId":"151913","Tags":["nosql","database"],"Body":"&lt;p&gt;Supposing that I have millions of user profiles, with hundreds of fields (name, gender, preferred pet and so on...).&lt;\/p&gt;\n\n&lt;p&gt;You want to make searches on profiles. &lt;\/p&gt;\n\n&lt;p&gt;Ex.:All profiles that has age between x and y, loves butterflies, hates chocolate....&lt;\/p&gt;\n\n&lt;p&gt;With database would you choose?&lt;\/p&gt;\n\n&lt;p&gt;Suppose that You have a Facebook like load.\nSpeed is a must.\nOpen Source preferred.&lt;\/p&gt;\n\n&lt;p&gt;I've read a lot about Cassandra, HBase, Mongo, Mysql... I just can't decide.....&lt;\/p&gt;\n"},{"Id":"2549017","CreationDate":"2010-03-30T21:52:35.057","OwnerUserId":"59501","Tags":["nosql","distributed","ordering"],"Body":"&lt;p&gt;I am looking for a properly distributed (i.e. not just sharded) and persisted (not bounded by available memory on single node, or cluster of nodes) key\/value (&quot;nosql&quot;) store that does support range queries by primary key.&lt;\/p&gt;\n\n&lt;p&gt;So far closest such system is Cassandra, which does above. However, it adds support for other features that are not essential for me. So while I like it (and will consider using it of course), I am trying to figure out if there might be other mature projects that implement what I need. Specifically, for me the only aspect of value I need is to access it as a blob. For key, however, I need range queries (as in, access values ordered, limited by start and\/or end values). While values can have structures, there is no need to use that structure for anything on server side (can do client-side data binding, flexible value\/content types etc).\nFor added bonus, Cassandra style storage (journaled, all sequential writes) seems quite optimal for my use case.&lt;\/p&gt;\n\n&lt;p&gt;To help filter out answers, I have investigated some alternatives within general domain like: Voldemort (key\/value, but no ordering) and CouchDB (just sharded, more batch-oriented); and am aware of systems that are not quite distributed while otherwise qualifying (bdb variants, tokyo cabinet itself (not sure if Tyrant might qualify), redis (in-memory store only)).&lt;\/p&gt;\n"},{"Id":"2552985","CreationDate":"2010-03-31T12:53:05.470","OwnerUserId":"58394","Tags":["cassandra","nosql","database-design","data-modeling"],"Body":"&lt;p&gt;I'm moving an existing MySQL based application over to Cassandra. So far finding the equivalent Cassandra data model has been quite easy, but I've stumbled on the following problem for which I'd appreciate some input:&lt;\/p&gt;\n\n&lt;p&gt;Consider a MySQL table holding millions of entities:&lt;\/p&gt;\n\n&lt;pre&gt;&lt;code&gt;CREATE TABLE entities (\n  id INT AUTO_INCREMENT NOT NULL,\n  entity_information VARCHAR(...),\n  entity_last_updated DATETIME,\n  PRIMARY KEY (id),\n  KEY (entity_last_updated)\n);\n&lt;\/code&gt;&lt;\/pre&gt;\n\n&lt;p&gt;Every five minutes the table is queried for entities that need to be updated:&lt;\/p&gt;\n\n&lt;pre&gt;&lt;code&gt; SELECT id FROM entities \n  WHERE entity_last_updated IS NULL \n     OR entity_last_updated &amp;#38;lt; DATE_ADD(NOW(), INTERVAL -7*24 HOUR)\n  ORDER BY entity_last_updated ASC;\n&lt;\/code&gt;&lt;\/pre&gt;\n\n&lt;p&gt;The entities returned by this queries are then updated using the following query:&lt;\/p&gt;\n\n&lt;pre&gt;&lt;code&gt; UPDATE entities \n    SET entity_information = ?, \n        entity_last_updated = NOW()\n  WHERE id = ?;\n&lt;\/code&gt;&lt;\/pre&gt;\n\n&lt;p&gt;What would be the corresponding Cassandra data model that would allow me to store the given information and effectively query the entities table for entities that need to be updated (that is: entities that have not been updated in the last seven days)?&lt;\/p&gt;\n"},{"Id":"2559411","CreationDate":"2010-04-01T09:33:57.953","OwnerUserId":"275243","Tags":["sql","couchdb","nosql"],"Body":"&lt;p&gt;I am in the middle of designing a highly-scalable application which must store a lot of data. Just for example it will store lots about users and then things like a lot of their messages, comments etc. I have always used MySQL before but now I am minded to try something new like couchdb or similar which is not SQL.&lt;\/p&gt;\n\n&lt;p&gt;Does anyone have any thoughts or guidance on this?&lt;\/p&gt;\n"},{"Id":"2562712","CreationDate":"2010-04-01T18:33:27.913","OwnerUserId":"39677","Tags":["cassandra","nosql","database"],"Body":"&lt;p&gt;When using a nosql type datastore like Cassandra, how would you return a result set based on a column?&lt;\/p&gt;\n\n&lt;p&gt;e.g.&lt;\/p&gt;\n\n&lt;pre&gt;&lt;code&gt;SELECT *\nFROM Articles\nWHERE category='blah'\nORDER BY datetime DESC\n&lt;\/code&gt;&lt;\/pre&gt;\n\n&lt;p&gt;is this something that you would store in a sql db and then pull the data from cassandra?  Or can cassandra handle this type of query? (assuming millions of rows in a db)&lt;\/p&gt;\n\n&lt;p&gt;From what I understand, cassandra is great at key based lookups, confused if it can and should be used for getting a list of data back and paging that data also (and if it is highly performant)&lt;\/p&gt;\n"},{"Id":"2565417","CreationDate":"2010-04-02T06:52:52.897","OwnerUserId":"115781","Tags":["cassandra","sphinx","full-text-search","nosql","distributed"],"Body":"&lt;p&gt;I am planning to build a cassandra store system and also I need a full-text(Chinese) system too. Can sphinx be used on cassandra? (sphinx supports xml format but I am not going to use it, cause it is slow and much of time are spent on xml parsing). Or you can share your experiences if you have ever built a full-text searching system over cassandra. Thank you&lt;\/p&gt;\n"},{"Id":"2568245","CreationDate":"2010-04-02T17:52:34.380","OwnerUserId":"100516","Tags":["nosql","database","concepts","terminology"],"Body":"&lt;p&gt;What is &lt;em&gt;document data store&lt;\/em&gt;? What is &lt;em&gt;key-value data store&lt;\/em&gt;?&lt;\/p&gt;\n\n&lt;p&gt;Please, describe in very simple and general words the mechanisms which stand behind each of them.&lt;\/p&gt;\n"},{"Id":"2571098","CreationDate":"2010-04-03T11:24:43.673","OwnerUserId":"161222","Tags":["database","sql","nosql","dba","career-development"],"Body":"&lt;p&gt;hi , i recently read this article &lt;a href=&quot;http:\/\/stu.mp\/2010\/03\/nosql-vs-rdbms-let-the-flames-begin.html&quot; rel=&quot;nofollow&quot;&gt;nosql-vs-rdbms&lt;\/a&gt; and i dont know too much about nosql and i didnt use it in my projects , so i have some questions :&lt;\/p&gt;\n\n&lt;p&gt;what is the main feature that nosql has over Rdbms ?&lt;\/p&gt;\n\n&lt;p&gt;if you think that it is best than rdbms : where and how i can learn about it (books - tutorials)?&lt;\/p&gt;\n\n&lt;p&gt;i want to be a DBA , what this career will be after moving to nosql ? &lt;\/p&gt;\n\n&lt;p&gt;thanks&lt;\/p&gt;\n"},{"Id":"2573106","CreationDate":"2010-04-04T00:08:51.343","OwnerUserId":"58394","Tags":["cassandra","nosql"],"Body":"&lt;p&gt;Consider a M:M relation that needs to be represented in a Cassandra data store.&lt;\/p&gt;\n\n&lt;p&gt;What M:M modeling options are available? For each alternative, when is it to prefer? What M:M modeling choices have you made in your Cassandra powered projects?&lt;\/p&gt;\n"},{"Id":"2573657","CreationDate":"2010-04-04T05:25:12.250","OwnerUserId":"69742","Tags":["mongodb","mongomapper","nosql","database-design"],"Body":"&lt;p&gt;Hello, I am beginning to think that my next project I am wanting to do would work better with a NoSQL solution. The project would either involve a ton of 2-column tables or a ton of dynamic queries with dynamically generated columns in a traditional SQL database. So I feel a NoSQL database would be much cleaner. &lt;\/p&gt;\n\n&lt;p&gt;I'm looking at MongoDB and it looks pretty promising. Anyway, I'm attempting to make sense of it all. Also, I will be using MongoMapper in Ruby. &lt;\/p&gt;\n\n&lt;p&gt;Anyway though, I'm confused as to how to layout things in such a freeform database. I've read &lt;a href=&quot;http:\/\/stackoverflow.com\/questions\/2170152\/nosql-best-practices&quot;&gt;http:\/\/stackoverflow.com\/questions\/2170152\/nosql-best-practices&lt;\/a&gt; and the answer there says that normalization is usually bad in a NoSQL DB. So how would be the best way of laying out say a simple blog with users, posts, and comments? &lt;\/p&gt;\n\n&lt;p&gt;My natural thought was to have three collections for each and then link them by a unique ID. But this apparently is wrong? So, what are some of the ways to lay out such a thing? My concern with the answer given in the other question is, what if the author's name changed? You'd have to go through updating a ton of posts and comments. But is this an okay thing to do with NoSQL? &lt;\/p&gt;\n"},{"Id":"2574689","CreationDate":"2010-04-04T14:22:41.260","OwnerUserId":"100516","Tags":["java","nosql","key-value-store","berkeley-db","alternative"],"Body":"&lt;p&gt;Berkeley DB would be the best choice probably but I can't use it due to licensing issues.&lt;\/p&gt;\n\n&lt;p&gt;Are there any alternatives? &lt;\/p&gt;\n"},{"Id":"2576012","CreationDate":"2010-04-04T21:46:04.950","OwnerUserId":"58394","Tags":["nosql","cassandra","bigtable","gfs","computer-science"],"Body":"&lt;p&gt;In BigTable\/GFS and Cassandra terminology, what is the definition of a SSTable?&lt;\/p&gt;\n"},{"Id":"2576838","CreationDate":"2010-04-05T03:51:50.050","OwnerUserId":"152253","Tags":["database","selection","nosql","sql"],"Body":"&lt;p&gt;I have the following criteria&lt;\/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Database should be protected with a username and password. It should not be possible to copy the database file and use it else were like MS Access.&lt;\/p&gt;&lt;\/li&gt;\n&lt;li&gt;&lt;p&gt;There will be no central database server. Each machine will run their own database server locally and user will initiate synchronization. Concept is inspired from distributed version control system like Git. So it should have good replication support.&lt;\/p&gt;&lt;\/li&gt;\n&lt;li&gt;&lt;p&gt;Strong consistency is not needed. Users will synchronize each other database when they need. In case of conflicts it should be possible to find the conflict and present it (from application) to the user for fixing it.&lt;\/p&gt;&lt;\/li&gt;\n&lt;li&gt;&lt;p&gt;Revisions of data if available it will be good. e.g. Entire history of change to a invoice.&lt;\/p&gt;&lt;\/li&gt;\n&lt;li&gt;&lt;p&gt;I explored document oriented database and inclined towards the same. But I dont know what to choose.&lt;\/p&gt;&lt;\/li&gt;\n&lt;li&gt;&lt;p&gt;Database is small it will not reach even 1GB in the next few years (say 3 years).&lt;\/p&gt;&lt;\/li&gt;\n&lt;\/ul&gt;\n\n&lt;p&gt;Please feel free to suggest any database which you think might be suitable. Any pointers is highly appreciated.&lt;\/p&gt;\n\n&lt;p&gt;Thanks in advance.&lt;\/p&gt;\n"},{"Id":"2577967","CreationDate":"2010-04-05T10:59:47.903","OwnerUserId":"309151","Tags":["python","nosql","datamining","database"],"Body":"&lt;p&gt;I am an occasional Python programer who only have worked so far with MYSQL or SQLITE databases. I am the computer person for everything in a small company and I have been started a new project where I think it is about time to try new databases. &lt;\/p&gt;\n\n&lt;p&gt;Sales department makes a CSV dump every week and I need to make a small scripting application that allow people form other departments mixing the information, mostly linking the records. I have all this solved, my problem is the speed, I am using just plain text files for all this and unsurprisingly it is very slow.&lt;\/p&gt;\n\n&lt;p&gt;I thought about using mysql, but then I need installing mysql in every desktop, sqlite is easier, but it is very slow. I do not need a full relational database, just some way of play with big amounts of data in a decent time.&lt;\/p&gt;\n\n&lt;p&gt;Update: I think I was not being very detailed about my database usage thus explaining my problem badly. I am working reading all the data ~900 Megas or more from a csv into a Python dictionary then working with it. My problem is storing and mostly reading the data quickly.&lt;\/p&gt;\n\n&lt;p&gt;Many thanks!&lt;\/p&gt;\n"},{"Id":"2580244","CreationDate":"2010-04-05T18:33:27.757","OwnerUserId":"137149","Tags":["scalability","database","web-applications","nosql"],"Body":"&lt;p&gt;I would like to understand database scalability so I've just heard a talk about Habits of Highly Scalable Web Applications&lt;\/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http:\/\/techportal.ibuildings.com\/2010\/03\/02\/habits-of-highly-scalable-web-applications\/&quot; rel=&quot;nofollow&quot;&gt;http:\/\/techportal.ibuildings.com\/2010\/03\/02\/habits-of-highly-scalable-web-applications\/&lt;\/a&gt;&lt;\/p&gt;\n\n&lt;p&gt;On it, the presenter mainly talk about relational database scalability.&lt;\/p&gt;\n\n&lt;p&gt;I also have read something about MapReduce and Column oriented tables, big tables, hypertable etc... trying to understand which are the most up to date methods to scale web application data. But the second group, to me,  is being hard to understand where it fits.&lt;\/p&gt;\n\n&lt;p&gt;It serves as transactional, reliable data store? or not, its just for large access and processing and to handle fine graned operations we will ever need to rely on RDBMSs?&lt;\/p&gt;\n\n&lt;p&gt;Could someone give a comprehensive landscape for those new technologies and how to use it?&lt;\/p&gt;\n"},{"Id":"2581738","CreationDate":"2010-04-05T23:17:32.020","OwnerUserId":"207633","Tags":["nosql","mongodb","couchdb","database","ecommerce"],"Body":"&lt;p&gt;I have read a lot lately about 'NoSQL' databases such as CouchDB, MongoDB etc. Most of the websites I have seen using this are mainly text based websites such as The New York Times and Source forge.&lt;\/p&gt;\n\n&lt;p&gt;I was wondering if you could apply this to websites where payment is a huge issue. I am thinking of the following issues:&lt;\/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;How well can you secure the data&lt;\/li&gt;\n&lt;li&gt;Do these system provide an easy backup\/restore machanism&lt;\/li&gt;\n&lt;li&gt;How are transactions handled commit\/rollback&lt;\/li&gt;\n&lt;\/ul&gt;\n\n&lt;p&gt;I have read the following articles that cover some aspects:&lt;\/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;http:\/\/stackoverflow.com\/questions\/299723\/can-i-do-transactions-and-locks-in-couchdb&quot;&gt;Can I do transactions and locks in CouchDB?&lt;\/a&gt;&lt;\/li&gt;\n&lt;li&gt;&lt;a href=&quot;http:\/\/stackoverflow.com\/questions\/337344\/pros-cons-of-document-based-database-vs-relational-database&quot;&gt;Pros\/Cons of document based database vs relational database&lt;\/a&gt;&lt;\/li&gt;\n&lt;\/ul&gt;\n\n&lt;p&gt;In these posts the aspect of transactions if covered. However the questions of security and backups is not covered. Can someone shed some light on this subject?&lt;\/p&gt;\n\n&lt;p&gt;And if possible, does anyone know of some e-commerce websites that have successfully implemented the document based database.&lt;\/p&gt;\n"},{"Id":"2584567","CreationDate":"2010-04-06T11:55:48.837","OwnerUserId":"15609","Tags":["nosql","windows-forms","desktop-application"],"Body":"&lt;p&gt;I'm looking at building an application that needs to be run on a user's local (usu. Windows) desktop, which will not have Access or any other database application installed and which needs to be able to replicate its data to a web instance (probably via a web service).&lt;\/p&gt;\n\n&lt;p&gt;Given NoSQL databases are document-oriented (and this application is intended to deal largely with documents), make replication more straight-forward and are not necessarily dependent on installable hosts or applications, would they be the best solution in this case, or am I just jumping on a fashionable option that isn't the best fit for this problem?&lt;\/p&gt;\n"},{"Id":"2598792","CreationDate":"2010-04-08T09:33:42.913","OwnerUserId":"4639","Tags":["silverlight","application-design","nosql","distributed-datasource"],"Body":"&lt;p&gt;I'm designing a &lt;strong&gt;Silverlight&lt;\/strong&gt; software &lt;a href=&quot;http:\/\/semanticlingual.wordpress.com\/2010\/04\/06\/statement-of-intent\/&quot; rel=&quot;nofollow&quot;&gt;solution&lt;\/a&gt; for students and teachers to record &lt;strong&gt;flashcards&lt;\/strong&gt;, e.g. words and phrases that students find while reading and errors that teachers notice while teaching.&lt;\/p&gt;\n\n&lt;p&gt;Requirements are:&lt;\/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;each person publishes his own flashcards in a &lt;strong&gt;file&lt;\/strong&gt; on a web server, e.g. &lt;a href=&quot;http:\/\/:www.mywebserver.com\/flashcards.txt&quot; rel=&quot;nofollow&quot;&gt;http:\/\/:www.mywebserver.com\/flashcards.txt&lt;\/a&gt;&lt;\/li&gt;\n&lt;li&gt;other people subscribe to that person's flashcards by using a &lt;strong&gt;Silverlight flashcard reader&lt;\/strong&gt; that I have developed and entering the URLs of flashcard files they want to subscribe to, URLs and imported flashcards being saved in &lt;strong&gt;IsolatedStorage&lt;\/strong&gt;&lt;\/li&gt;\n&lt;\/ul&gt;\n\n&lt;p&gt;the &lt;strong&gt;flashcards.txt&lt;\/strong&gt; file has the following simple format: title, then blocks of question\/answers:&lt;\/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Jim Smith's flashcards from English class 53-222, winter semester 2009\n\n==fla\nDas kann nicht sein.\nThat can't be.\n\n==fla\nEs sei denn, er kommt nicht.\nUnless he doesn't come.\n&lt;\/code&gt;&lt;\/pre&gt;\n\n&lt;p&gt;The user then &lt;strong&gt;makes public the URL&lt;\/strong&gt; to his flashcard file and other readers begin &lt;strong&gt;reading in his flashcards&lt;\/strong&gt;.&lt;\/p&gt;\n\n&lt;p&gt;In order to lower the bar for &lt;strong&gt;non-technical&lt;\/strong&gt; users to contribute, it will even be possible for them to save this text in a &lt;strong&gt;Google Document&lt;\/strong&gt;, which they publish and distribute the URL. The flashcard readers will then recognize it is a google document and perform the necessary screen scraping to get at the raw text.&lt;\/p&gt;\n\n&lt;p&gt;&lt;strong&gt;I have two technical questions about this approach:&lt;\/strong&gt;&lt;\/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;What is a best way to plan now for &lt;strong&gt;scalability&lt;\/strong&gt; issues: e.g. if your reader is subscribed to 10 flashcard files that are each 200K, it will have to download &lt;strong&gt;2MB&lt;\/strong&gt; of text just to find out if any new flashcards are available. &lt;strong&gt;Or can I somehow accurately and consistently get at the last update date\/time of text files on servers and published google docs?&lt;\/strong&gt;&lt;\/p&gt;&lt;\/li&gt;\n&lt;li&gt;&lt;p&gt;Each reader will have the ability to allow the person to test himself on imported flashcards and add meta information to them, e.g. categorize them, edit them, etc. This information will be stored in &lt;strong&gt;IsolatedStorage&lt;\/strong&gt; along with the important flashcards themselves. &lt;strong&gt;What is a good pattern to allow these readers to share and synchronize this meta data&lt;\/strong&gt;, e.g. so when you are looking at a flashcard you can see that 5 other people have made corrections to it. The best solution I can think of now is that the Silverlight readers will have to &lt;strong&gt;republish their data to a central database&lt;\/strong&gt;, but then there is the problem of uniquely identifying each flashcard, the best approach seems to be URL + position-in-file, or even better URL + original text of both question and answer fields, but both of these have their obvious drawbacks.&lt;\/p&gt;&lt;\/li&gt;\n&lt;\/ol&gt;\n\n&lt;p&gt;The main requirement is that the &lt;strong&gt;bar for participation is kept as low as possible&lt;\/strong&gt;, i.e. type text in a google document, publish it, distribute the URL, and you're publishing within the flashcard community. So I want to come up with the most efficient technical solutions in order to &lt;strong&gt;compensate for the lack of database, lack of unique ids, etc.&lt;\/strong&gt;&lt;\/p&gt;\n\n&lt;p&gt;&lt;strong&gt;For those who have designed or developed similar non-traditional, distributed database projects like this, what advice, experience or best-practice tips you can share on the above two points?&lt;\/strong&gt;&lt;\/p&gt;\n"},{"Id":"2604745","CreationDate":"2010-04-09T02:25:25.263","OwnerUserId":"28567","Tags":["mongodb","linq","c#","nosql"],"Body":"&lt;p&gt;I have been following along with Rob Conery's Linq for MongoDB and have come across a question. In the example he shows how you can easily nest a child object. For my current experiment I have the following structure.&lt;\/p&gt;\n\n&lt;pre&gt;&lt;code&gt;class Content\n{\n    ...\n    Profile Profile { get; set; }\n}\n\nclass Profile\n{\n    ...\n}\n&lt;\/code&gt;&lt;\/pre&gt;\n\n&lt;p&gt;This works great when looking at content items. The dilemma I'm facing now is if I want to treat the Profile as an atomic object. As it stands, it appears as if I can not query the Profile object directly but that it comes packaged with Content results. If I want it to be inclusive, but also be able to query on just Profile I feel like my first instinct would be to make Profiles a top level object and then create a foreign key like structure under the Content class to tie the two together.  &lt;\/p&gt;\n\n&lt;p&gt;To me it feels like I'm falling back on RDBMS practices and that feels like I'm most likely going against the spirit of Mongo. How would you treat an object you need to act upon independently yet also want as a child object of another object?&lt;\/p&gt;\n"},{"Id":"2604831","CreationDate":"2010-04-09T02:51:28.290","OwnerUserId":"37055","Tags":["redis","nosql","key-value-store"],"Body":"&lt;p&gt;What happens to a Redis data store if the data exceeds available ram?&lt;\/p&gt;\n"},{"Id":"2605862","CreationDate":"2010-04-09T07:58:44.497","OwnerUserId":"6260","Tags":["nosql","meteo"],"Body":"&lt;p&gt;So there's this new cool thing, these NoSQL-databases. And so there's my data: Rows of rows of rows of meteorological data: Values, representing certain measurements at a certain station (Identified by a WMO number, not coordinates), at a certain time.&lt;\/p&gt;\n\n&lt;p&gt;Not every station measures every parameter, not every parameter is measured all the time.&lt;\/p&gt;\n\n&lt;p&gt;I store this data (30 years worth of hourly values, resulting in ~1 billion values) currently in MySQL. The continous growth and the forseeable addition of even more data give me a little headache.&lt;\/p&gt;\n\n&lt;p&gt;Reading about the document based NoSQL systems which seem to scale rather easily, I was wondering if NoSQL is a viable data storage concept for meteorological data too. Do you have any experience with this?&lt;\/p&gt;\n\n&lt;p&gt;Update: Forgot about typical queries: Most of the queries need data in the temporal axis: I.e. give me the temperatures of station 066310 from 01.01.2010 00:00 to 01.03.2010 00:00.&lt;\/p&gt;\n\n&lt;p&gt;Or: give me the most recent values of all parameters of a particular station.&lt;\/p&gt;\n"},{"Id":"2607923","CreationDate":"2010-04-09T13:45:12.990","OwnerUserId":"312262","Tags":["rdbms","database","nosql","materialized-views","views"],"Body":"&lt;p&gt;There has been a lot of talk recently about NoSQL.&lt;\/p&gt;\n\n&lt;p&gt;The #1 reason why I hear people use NoSQL is because they start to de-normalize their DBMS data so much so, to increase performance, that they end up with just one table with all of their data within that single table.&lt;\/p&gt;\n\n&lt;p&gt;With Materialized Views however, you can keep your data normalized, yet have it stored as a single table view for the same reasons why you'd use NoSQL.&lt;\/p&gt;\n\n&lt;p&gt;As such, why would someone use NoSQL over Materialized Views?&lt;\/p&gt;\n"},{"Id":"2608103","CreationDate":"2010-04-09T14:05:17.020","OwnerUserId":"312262","Tags":["nosql","acid","database"],"Body":"&lt;p&gt;Is there any NoSQL that is ACID compliant? &lt;\/p&gt;\n\n&lt;p&gt;(Or is that even possible with NoSQL given it's just a bunch of loosely coupled key-value pairs.)&lt;\/p&gt;\n"},{"Id":"2609582","CreationDate":"2010-04-09T17:36:38.680","OwnerUserId":"140811","Tags":["serverside-javascript","nosql"],"Body":"&lt;p&gt;I'm very interested in this framework, coupled with a NoSQL backend like MongoDB.&lt;\/p&gt;\n\n&lt;p&gt;Basically, my blue-sky vision is this:&lt;\/p&gt;\n\n&lt;p&gt;ExtJS\/Pintura\/MongoDB.&lt;\/p&gt;\n\n&lt;p&gt;I would probably plug in Rhino as the js engine.&lt;\/p&gt;\n\n&lt;p&gt;Is there anybody here using Pintura in a production environment?&lt;\/p&gt;\n\n&lt;p&gt;What are the pitfalls?  What is your general experience?&lt;\/p&gt;\n\n&lt;p&gt;Thanks.&lt;\/p&gt;\n"},{"Id":"2611362","CreationDate":"2010-04-09T22:27:22.743","OwnerUserId":"292712","Tags":["nosql","digg","architecture"],"Body":"&lt;p&gt;Hello,\nI am trying to grasp this nosql thing since it sounds good for scalability.&lt;\/p&gt;\n\n&lt;p&gt;I have read the Digg is now using CassandraDB.\nCan you help me understand how a digg-like model can be structured efficiently ?&lt;\/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;where are the users&lt;\/li&gt;\n&lt;li&gt;where are the articles&lt;\/li&gt;\n&lt;li&gt;where are the notations&lt;\/li&gt;\n&lt;li&gt;..&lt;\/li&gt;\n&lt;\/ul&gt;\n\n&lt;p&gt;Thanks\nJerome&lt;\/p&gt;\n"},{"Id":"2613357","CreationDate":"2010-04-10T12:28:13.787","OwnerUserId":"313456","Tags":["allegrograph","neo4j","nosql","social-graph"],"Body":"&lt;p&gt;Hi All,&lt;\/p&gt;\n\n&lt;p&gt;What is the difference between this 2 graph DB: Neo4j and AllegroGraph? \nWhich is better for JAVA Web programming?&lt;\/p&gt;\n\n&lt;p&gt;Thanks\nErwin&lt;\/p&gt;\n"},{"Id":"2614195","CreationDate":"2010-04-10T17:09:34.517","OwnerUserId":"58394","Tags":["cassandra","nosql"],"Body":"&lt;p&gt;In Cassandra terminology, what is TimeUUID and when is it used?&lt;\/p&gt;\n"},{"Id":"2619744","CreationDate":"2010-04-12T03:36:02.557","OwnerUserId":"184057","Tags":["nosql","hbase","cassandra","hadoop"],"Body":"&lt;p&gt;I have User model object with quite few fields (properties, if you wish) in it. Say &quot;firstname&quot;, &quot;lastname&quot;, &quot;city&quot; and &quot;year-of-birth&quot;. Each user also gets &quot;unique id&quot;.&lt;\/p&gt;\n\n&lt;p&gt;I want to be able to search by them. How do I do that properly? How to do that at all?&lt;\/p&gt;\n\n&lt;p&gt;My understanding (will work for pretty much any key-value storage -- first goes key, then value)&lt;\/p&gt;\n\n&lt;p&gt;u:123456789 = serialized_json_object&lt;\/p&gt;\n\n&lt;p&gt;(&quot;u&quot; as a simple prefix for user's keys, 123456789 is &quot;unique id&quot;).&lt;\/p&gt;\n\n&lt;p&gt;Now, thinking that I want to be able to search by firstname and lastname, I can save in:&lt;\/p&gt;\n\n&lt;p&gt;f:Steve = u:384734807,u:2398248764,u:23276263\nf:Alex = u:12324355,u:121324334&lt;\/p&gt;\n\n&lt;p&gt;so key is &quot;f&quot; - which is prefix for firstnames, and &quot;Steve&quot; is actual firstname.\nFor &quot;u:Steve&quot; we save as value all user id's who are &quot;Steve's&quot;.&lt;\/p&gt;\n\n&lt;p&gt;That makes every search very-very easy. Querying by few fields (properties) -- say by firstname (i.e. &quot;Steve&quot;) and lastname (i.e. &quot;l:Anything&quot;) is still easy - first get list of user ids from &quot;f:Steve&quot;, then list from &quot;l:Anything&quot;, find crossing user ids, an here you go. &lt;\/p&gt;\n\n&lt;p&gt;Problems (and there are quite a few):&lt;\/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Saving, updating, deleting user is a pain. It has to be atomic and consistent operation. Also, if we have size of value limited to some value - then we are in (potential) trouble. And really not of an answer here. Only zipping the list of user ids? Not too cool, though. &lt;\/p&gt;&lt;\/li&gt;\n&lt;li&gt;&lt;p&gt;What id we want to add new field to search by. Eventually. Say by &quot;city&quot;. We certainly can do the same way &quot;c:Los Angeles&quot; = ..., &quot;c:Chicago&quot; = ..., but if we didn't foresee all those &quot;search choices&quot; from the very beginning, then we will have to be able to create some night job or something to go by all existing User records and update those &quot;c:CITY&quot; for them... Quite a big job!&lt;\/p&gt;&lt;\/li&gt;\n&lt;li&gt;&lt;p&gt;Problems with locking. User &quot;u:123&quot; updates his name &quot;Alex&quot;, and user &quot;u:456&quot; updates his name &quot;Alex&quot;. They both have to update &quot;f:Alex&quot; with their id's. That means either we get into overwriting problem, or one update will wait for another (and imaging if there are many of them?!).&lt;\/p&gt;&lt;\/li&gt;\n&lt;\/ol&gt;\n\n&lt;p&gt;What's the best way of doing that? Keeping in mind that I want to search by many fields?&lt;\/p&gt;\n\n&lt;p&gt;P.S. Please, the question is about HBase\/Cassandra\/NoSQL\/Key-Value storages. Please please - no advices to use MySQL and &quot;read about&quot; SELECTs; and worry about scaling problems &quot;later&quot;. There is a reason why I asked MY question exactly the way I did. :-) &lt;\/p&gt;\n"},{"Id":"2621795","CreationDate":"2010-04-12T11:55:11.643","OwnerUserId":"89771","Tags":["nosql","amazon-simpledb","couchdb","database","indexing"],"Body":"&lt;p&gt;Although I've not yet used any of the new NoSQL databases I've tried to keep myself informed by reading Wikipedia articles, blogs and the peeking into some of the NoSQL DBs documentation.&lt;\/p&gt;\n\n&lt;p&gt;I've just (re)read the August 2009 edition of php|architect, specifically the article about the Non-Relation Databases and a few questions popped up in my head, I understand that the article is pretty light on the subject but it was enough to get me confused...&lt;\/p&gt;\n\n&lt;h3&gt;CouchDB&lt;\/h3&gt;\n\n&lt;p&gt;My main question regarding CouchDB is &lt;strong&gt;&lt;em&gt;why so much hype?&lt;\/em&gt;&lt;\/strong&gt;. From what I understood CouchDB provides a Web Service that lets you create databases and documents inside the database, the documents can have several JSON-encoded attributes and also have a special &lt;code&gt;_id&lt;\/code&gt; and &lt;code&gt;_rev&lt;\/code&gt; attribute for tracking revisions of the document.&lt;\/p&gt;\n\n&lt;p&gt;I really don't get all the fuss about this, some years ago for a pet project I coded a similar (?) system for storing documents and the structure was something like this:&lt;\/p&gt;\n\n&lt;pre&gt;&lt;code&gt;documents\/\n  document-name\/\n    (revision) timestamp\/\n      (contents) md5-hash.txt\n        PHP Serialized Data\n&lt;\/code&gt;&lt;\/pre&gt;\n\n&lt;p&gt;I'm sure I'm missing something very fundamental, otherwise (from the viewpoint of a PHP developer) this would have the same benefits as CouchDB and be faster - no need to encode and decode JSON.&lt;\/p&gt;\n\n&lt;hr&gt;\n\n&lt;h3&gt;Amazon SimpleDB&lt;\/h3&gt;\n\n&lt;p&gt;Now this one &lt;em&gt;really&lt;\/em&gt; gets my head spinning... The author (Russell Smith) gives the following example:&lt;\/p&gt;\n\n&lt;pre&gt;&lt;code&gt;$sdb-&amp;#38;gt;putAttributes('phparch', 'may', array('title' =&amp;#38;gt; array('value' =&amp;#38;gt; 'May 2009'), 'have' =&amp;#38;gt; array('value' =&amp;#38;gt; false)));\n$sdb-&amp;#38;gt;putAttributes('phparch', 'june', array('title' =&amp;#38;gt; array('value' =&amp;#38;gt; 'June 2009'), 'have' =&amp;#38;gt; array('value' =&amp;#38;gt; true)));\n$sdb-&amp;#38;gt;putAttributes('phparch', 'july', array('title' =&amp;#38;gt; array('value' =&amp;#38;gt; 'July 2009'), 'have' =&amp;#38;gt; array('value' =&amp;#38;gt; true)));\n&lt;\/code&gt;&lt;\/pre&gt;\n\n&lt;p&gt;He then says that Amazon now supports a SQL-like interface and then executes the following query:&lt;\/p&gt;\n\n&lt;pre&gt;&lt;code&gt;$sdb-&amp;#38;gt;select('phparch', 'SELECT * FROM phparch WHERE have = &quot;1&quot;');\n&lt;\/code&gt;&lt;\/pre&gt;\n\n&lt;p&gt;He doesn't give any analogous example of how to do that query in CouchDB (he leaves some hints on Views and Map\/Reduce however) but I suppose it is also possible, so my question is: &lt;strong&gt;how does Amazon (and CouchDB) do it?&lt;\/strong&gt;&lt;\/p&gt;\n\n&lt;p&gt;My first guess would be that they open all documents (in possible in a distributed environment) and then apply a reduce operation to filter the documents whose attributes &lt;strike&gt;don't&lt;\/strike&gt; match the search criteria, but wouldn't this be overly expensive (CPU and Disk I\/O) even in parallel computing?&lt;\/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;I know I'm ignoring some important stuff like distribution, consistency and so on but I'm just trying to grasp the very basic inner workings of NoSQL storages.&lt;\/p&gt;\n\n&lt;p&gt;PS: Also, can anyone explain me why both CouchDB and Amazon SimpleDB are built with Erlang?&lt;\/p&gt;\n"},{"Id":"2634955","CreationDate":"2010-04-14T04:45:19.317","OwnerUserId":"316154","Tags":["cassandra","rdbms","database","web-development","nosql"],"Body":"&lt;p&gt;There has been a lot of talk related to &lt;a href=&quot;http:\/\/cassandra.apache.org\/&quot; rel=&quot;nofollow&quot;&gt;Cassandra&lt;\/a&gt; lately.&lt;\/p&gt;\n\n&lt;p&gt;Twitter, Digg, Facebook, etc all use it.&lt;\/p&gt;\n\n&lt;p&gt;When does it make sense to:&lt;\/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;use Cassandra,&lt;\/li&gt;\n&lt;li&gt;not use Cassandra, and&lt;\/li&gt;\n&lt;li&gt;use a RDMS instead of Cassandra.&lt;\/li&gt;\n&lt;\/ul&gt;\n"},{"Id":"2640516","CreationDate":"2010-04-14T19:48:11.297","OwnerUserId":"20126","Tags":["nosql","database","sql","mongodb"],"Body":"&lt;p&gt;I am new to NOSQL world and still comparing between nosql and sql databases,&lt;br&gt;\nI Just tried making few samples using mongodb.  &lt;\/p&gt;\n\n&lt;p&gt;I am asking about stored procedures when we send few parameters to one stored procedure and this procedure execute number of other stored procedures in the database, will get data from stored procedures and send data to others.&lt;\/p&gt;\n\n&lt;p&gt;In other words, will make the logic happen on the database side using sequence of functions and stored procedures.&lt;\/p&gt;\n\n&lt;p&gt;Is that behavior or something the same already exist on NOSQL databases, or its completely different and i am thinking in the wrong way?&lt;\/p&gt;\n"},{"Id":"2642710","CreationDate":"2010-04-15T04:23:15.057","OwnerUserId":"252373","Tags":["versioning","rdbms","nosql","data-structures","database-design"],"Body":"&lt;p&gt;Hi, I need ideas for structuring and processing data with revisions.\nFor example, I have a database of objects (e.g. cars). Each object has a number of properties, which can be arbitrary, so there's no a set schema to describe these objects. These objects are probably saved as key-value pairs.&lt;\/p&gt;\n\n&lt;p&gt;Now I need to change property of an object. I don't want to completely rewrite it - I want to be able to go back and see history of changes to these properties, that's why I want to add new property and keep the old one (so I guess a timestamp would do the job of telling which property is the latest).&lt;\/p&gt;\n\n&lt;p&gt;At the same time I want to be able to get info about any object in a snap, with only latest versions of each of the properties.&lt;\/p&gt;\n\n&lt;p&gt;Any ideas what would be the best approach? At least please point me in the right direction. Thanks!&lt;\/p&gt;\n"},{"Id":"2653074","CreationDate":"2010-04-16T12:58:08.210","OwnerUserId":"142017","Tags":["database-design","google-app-engine","google-datastore","nosql"],"Body":"&lt;p&gt;Coming from a relational database background, as I'm sure many others are, I'm looking for some solid guidelines for setting up \/ designing my datastore on Google App Engine.  Are there any good rules of thumb people have for setting up these kinds of schema-less data stores?  I understand some of the basics such as denormalizing since you can't do joins, but I was wondering what other recommendations people had.&lt;\/p&gt;\n\n&lt;p&gt;The particular simple example I am working with concerns storing searches and their results.  For example I have the following 2 models defined in my Google App Engine app using Python:&lt;\/p&gt;\n\n&lt;pre&gt;&lt;code&gt;class Search(db.Model):\n    who = db.StringProperty()\n    what = db.StringProperty()\n    where = db.StringProperty()\n\n    createDate = db.DateTimeProperty(auto_now_add=True)\n\nclass SearchResult(db.Model):\n    title = db.StringProperty()\n    content = db.StringProperty()\n\n    who = db.StringProperty()\n    what = db.StringProperty()\n    where = db.StringProperty()\n\n    createDate = db.DateTimeProperty(auto_now_add=True)\n&lt;\/code&gt;&lt;\/pre&gt;\n\n&lt;p&gt;I'm duplicating a bunch of properties between the models for the sake of denormalization since I can't join Search and SearchResult together.  Does this make sense?  Or should I store a search ID in the SearchResult model and effectively 'join' the 2 models in code when I retrieve them from the datastore?  Please keep in mind that this is a simple example.  Both models will have a lot more properties and the way I'm approaching this right now, I would put any property I put in the Search model in the SearchResult model as well.&lt;\/p&gt;\n"},{"Id":"2654423","CreationDate":"2010-04-16T16:02:36.403","OwnerUserId":"218160","Tags":["dbms","non-relational-database","design","low-level","nosql"],"Body":"&lt;p&gt;Hey guys,&lt;\/p&gt;\n\n&lt;p&gt;As a personal project, I'm looking to build a rudimentary DBMS. I've read the relevant sections in Elmasri &amp;#38;amp; Navathe (5ed), but could use a more focused text- something a bit more practical and detail-oriented, with real-world recommendations- as E&amp;#38;amp;N only went so deep.&lt;\/p&gt;\n\n&lt;p&gt;The rub is that I want to play with novel non-relational data models. While a lot of E&amp;#38;amp;N was great- indexing implementation details in particular- the more advanced DBMS implementation was only targeted to a relational model.&lt;\/p&gt;\n\n&lt;p&gt;I'd like to defer staring at DBMS source for a while if I can until I've got a better foundation. Any ideas?&lt;\/p&gt;\n"},{"Id":"2664189","CreationDate":"2010-04-18T22:12:34.253","OwnerUserId":"209591","Tags":["tokyocabinet","tokyo-tyrant","nosql"],"Body":"&lt;p&gt;Is this possible? I couldn't find an answer anywhere. &lt;\/p&gt;\n\n&lt;p&gt;Basically I'm looking at a setup where I have multiple workers (boxes)  which must all store there data into a Tokyo Cabinet index\/db eventually (I'm using Tokyto Tyrant over the memcached protocol abtw. not that it matters but still) &lt;\/p&gt;\n\n&lt;p&gt;Basically, I tried pushing the data directly to another box which runs Tokyo Tyrant, but the TT can't handle it after a while. Inserts get really slow, and workers sit there idle wanting to offload data to the TT-server. (I tried all sorts of things to improve performance, more ram, raid-configs, multiple TT-servers on the box, etc) but the major drop in performance (inserts\/ sec) comes sooner or later. &lt;\/p&gt;\n\n&lt;p&gt;Now, I'm looking at the option to let each worker store it's own data in a local Tokyo Tyrant db and merge the db's of all workers afterwards (no duplicate keys guarenteed)&lt;\/p&gt;\n\n&lt;p&gt;Any help appreciated, (also of other ways to distribute load on TT appreciated)  &lt;\/p&gt;\n\n&lt;p&gt;btw: the config for TT: #bnum=20000000#opts=l#xmsiz=162000000\nI set bnum to the upperbound of items expected: 20 mil. &lt;\/p&gt;\n\n&lt;p&gt;Thanks, Geert-Jan&lt;\/p&gt;\n"},{"Id":"2671423","CreationDate":"2010-04-19T22:48:16.483","OwnerUserId":"112311","Tags":["couchdb","nosql","mongodb","asp.net","database-design"],"Body":"&lt;p&gt;I'm halfway through coding a basic multi-tenant SaaS ECM solution. Each client has it's own instance of the database \/ datastore, but the .Net app is single instance. The documents are pretty much read only (i.e. an image archive of tiffs or PDFs)&lt;\/p&gt;\n\n&lt;p&gt;I've used MSSQL so far, but then started thinking this might be viable in a NoSQL DB (e.g. MongoDB, CouchDB). The basic premise is that it stores documents, each with their own particular indexes. Each tenant can have multiple document types.&lt;\/p&gt;\n\n&lt;p&gt;e.g. One tenant might have an invoice type, which has Customer ID, Invoice Number and Invoice Date. Another tenant might have an application form, which has Member Number, Application Number, Member Name, and Application Date.&lt;\/p&gt;\n\n&lt;p&gt;So far I've used the old method which Sharepoint  (used?) to use, and created a document table which has int_field_1, int_field_2, date_field_1, date_field_2, etc. Then, I've got a &quot;mapping&quot; table which stores the customer specific index name, and the database field that will map to. I've avoided the key-value pair model in the DB due to volume of documents.&lt;\/p&gt;\n\n&lt;p&gt;This way, we can support multiple document types in the one table, and get reasonably high performance out of it, and allow for custom document type searches (i.e. user selects a document type, then they're presented with a list of search fields).&lt;\/p&gt;\n\n&lt;p&gt;However, a NoSQL DB might make this a lot simpler, as I don't need to worry about denormalizing the document. However, I've just got concerns about the rest of the data around a document. We store an &quot;action history&quot; against the document. This tracks views, whether someone emails the document from within the system, and other &quot;future&quot; functionality (e.g. faxing).&lt;\/p&gt;\n\n&lt;p&gt;We have control over the document load process, so we can manipulate the data however it needs to be to get it in the document store (e.g. assign unique IDs). Users will not be adding in their own documents, so we shouldn't need to worry about ACID compliance, as the documents are relatively static.&lt;\/p&gt;\n\n&lt;p&gt;So, my questions I guess : &lt;\/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Is a NoSQL DB a good fit&lt;\/li&gt;\n&lt;li&gt;Is MongoDB the best for Asp.Net (I saw Raven and Velocity, but they're still kinda beta)&lt;\/li&gt;\n&lt;li&gt;Can I store a key for each document, and then store the action history in a MSSQL DB with this key? I don't need to do joins, it would be if a person clicks &quot;View History&quot; against a document.&lt;\/li&gt;\n&lt;li&gt;How would performance compare between the two (NoSQL DB vs denormalized &quot;document&quot; table)&lt;\/li&gt;\n&lt;\/ul&gt;\n\n&lt;p&gt;Volumes would be up to 200,000 new documents per month for a single tenant. My current scaling plan with the SQL DB involves moving the SQL DB into a cluster when certain thresholds are reached, and then reviewing partitioning and indexing structures.&lt;\/p&gt;\n"},{"Id":"2675488","CreationDate":"2010-04-20T13:35:25.943","OwnerUserId":"79078","Tags":["couchdb","apache-couchdb","nosql"],"Body":"&lt;p&gt;How can I retrieve document from CouchDB based on its field, not by ID?&lt;\/p&gt;\n\n&lt;p&gt;The problem is, documents in my system should have numeric IDs, so I add a field called &lt;code&gt;doc_id&lt;\/code&gt; to saved documents. Native CouchDB ids are too long for me. &lt;\/p&gt;\n\n&lt;p&gt;How can I retrieve document with &lt;code&gt;doc_id&lt;\/code&gt; = 10, for example?&lt;\/p&gt;\n"},{"Id":"2682205","CreationDate":"2010-04-21T10:49:40.610","OwnerUserId":"315947","Tags":["cassandra","database","php","nosql"],"Body":"&lt;p&gt;I have heard on cassandra database engine few days ago and searching for a good documentation on it. after studying on cassandra I got cassandra is more scalable than other data engine.\nI also read on Amazon SimpleDB but as SimpleDB has a limitation 10GB\/table and Google Datastore is slower than Amazon SimpleDB, I prefer not to use them (Google Datastore, Amazon SimpleDB). So for making our site scaled specially high write rates with massive data, I like to use Cassandra as our Data Engine.&lt;\/p&gt;\n\n&lt;p&gt;But before starting using cassandra I am confused on &quot;How to handle complex data using casssandra&quot;. I am giving you the MySQL database structure below, Please read this and give me a good suggestion.&lt;\/p&gt;\n\n&lt;p&gt;Users Table&lt;br&gt;\nhasColum ID Primary&lt;br&gt;\nhasColum email Unique&lt;br&gt;\nhasColum FirstName&lt;br&gt;\nhasColum LastName  &lt;\/p&gt;\n\n&lt;p&gt;Category Table&lt;br&gt;\nhasColum ID Primary&lt;br&gt;\nhasColum Parent&lt;br&gt;\nhasColum Category  &lt;\/p&gt;\n\n&lt;p&gt;Posts Table&lt;br&gt;\nhasColum ID Primary&lt;br&gt;\nhasColum UID Index foreign key linked to users-&gt;ID&lt;br&gt;\nhasColum CID Index foreign key linked to Category-&gt;ID&lt;br&gt;\nhasColum Title&lt;br&gt;\nhasColum Post Index&lt;br&gt;\nhasColum PunDate  &lt;\/p&gt;\n\n&lt;p&gt;Comments&lt;br&gt;\nhasColum ID primary&lt;br&gt;\nhasColum UID Index foreign key linked to users-&gt;ID&lt;br&gt;\nhasColum PID Index foreign key linked to Posts-&gt;ID&lt;br&gt;\nhasColum Comment  &lt;\/p&gt;\n\n&lt;p&gt;User Group&lt;br&gt;\nhasColum ID primary&lt;br&gt;\nhasColum Name  &lt;\/p&gt;\n\n&lt;p&gt;UserToGroup Table (for many to many relation only)&lt;br&gt;\nhasColum UID foreign key linked to Users-&gt;ID&lt;br&gt;\nhasColum GID foreign key linked to Group-&gt;ID  &lt;\/p&gt;\n\n&lt;p&gt;Finally for your information, I like to use SimpleCassie PHP Class &lt;a href=&quot;http:\/\/code.google.com\/p\/simpletools-php\/&quot; rel=&quot;nofollow&quot;&gt;http:\/\/code.google.com\/p\/simpletools-php\/&lt;\/a&gt;\nSo, it will be very helpful if you can give me example using SimpleCassie&lt;\/p&gt;\n"},{"Id":"2684462","CreationDate":"2010-04-21T15:52:30.080","OwnerUserId":"229087","Tags":["nosql","data-warehouse","fundamentals"],"Body":"&lt;p&gt;What are the relations between NoSql and Data-Warehouse technologies\/theories? &lt;\/p&gt;\n\n&lt;p&gt;What concepts they share? &lt;\/p&gt;\n\n&lt;p&gt;What are the basic differences between them? &lt;\/p&gt;\n\n&lt;p&gt;How do you think each could be benefits\/enriches from the other? &lt;\/p&gt;\n\n&lt;p&gt;I think your ideas should be helpful for the future of both technologies.&lt;\/p&gt;\n"},{"Id":"2688305","CreationDate":"2010-04-22T04:46:03.637","OwnerUserId":"184057","Tags":["hadoop","mapreduce","nosql","bigtable"],"Body":"&lt;p&gt;I have MySQL database, where I store the following BLOB (which contains JSON object) and ID (for this JSON object). JSON object contains a lot of different information. Say, &quot;city:Los Angeles&quot; and &quot;state:California&quot;.&lt;\/p&gt;\n\n&lt;p&gt;There are about 500k of such records for now, but they are growing. And each JSON object is quite big.&lt;\/p&gt;\n\n&lt;p&gt;My goal is to do searches (real-time) in MySQL database.\nSay, I want to search for all JSON objects which have &quot;state&quot; to &quot;California&quot; and &quot;city&quot; to &quot;San Francisco&quot;.&lt;\/p&gt;\n\n&lt;p&gt;I want to utilize Hadoop for the task.\nMy idea is that there will be &quot;job&quot;, which takes chunks of, say, 100 records (rows) from MySQL, verifies them according to the given search criteria, returns those (ID's) which qualify.&lt;\/p&gt;\n\n&lt;p&gt;Pros\/cons? I understand that one might think that I should utilize simple SQL power for that, but the thing is that JSON object structure is pretty &quot;heavy&quot;, if I put it as SQL schemas, there will be at least 3-5 tables joins, which (I tried, really) creates quite a headache, and building all the right indexes eats RAM faster than I one can think. ;-) And even then, every SQL query has to be analyzed to be utilizing the indexes, otherwise with full scan it literally is a pain. And with such structure we have the only way &quot;up&quot; is just with vertical scaling. But I am not sure it's the best option for me, as I see how JSON objects will grow (the data structure), and I see that the number of them will grow too. :-)&lt;\/p&gt;\n\n&lt;p&gt;Help? Can somebody point me to simple examples of how this can be done? Does it make sense at all? Am I missing something important?&lt;\/p&gt;\n\n&lt;p&gt;Thank you.&lt;\/p&gt;\n"},{"Id":"2694044","CreationDate":"2010-04-22T19:59:29.930","OwnerUserId":"69742","Tags":["orm","c#","mongodb","nosql","abstraction"],"Body":"&lt;p&gt;Hello, with MongoDB (and I assume other NoSQL database APIs worth their salt) the ways of querying the database are much more simplistic than SQL. There is no tedious SQL queries to generate and such. For instance take this from mongodb-csharp:&lt;\/p&gt;\n\n&lt;pre&gt;&lt;code&gt;using MongoDB.Driver; \nMongo db = new Mongo(); \ndb.Connect(); \/\/Connect to localhost on the default port. \nDocument query = new Document(); \nquery[&quot;field1&quot;] = 10; \nDocument result = db[&quot;tests&quot;][&quot;reads&quot;].FindOne(query); \ndb.Disconnect();\n&lt;\/code&gt;&lt;\/pre&gt;\n\n&lt;p&gt;How could an ORM even simplify that? Is an ORM or other &quot;database abstraction device&quot; required on top of a decent NoSQL API? &lt;\/p&gt;\n"},{"Id":"2699932","CreationDate":"2010-04-23T15:44:06.600","OwnerUserId":"210304","Tags":["couchdb","document","nosql"],"Body":"&lt;p&gt;Hi guys.&lt;\/p&gt;\n\n&lt;p&gt;I really tried, tried so hard but i cant understand couchdb :( I must record the contact of several people, should i put every contact in a single document ?&lt;\/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;codeviewer.org\/view\/code:df8&lt;\/p&gt;\n&lt;\/blockquote&gt;\n\n&lt;p&gt;Or in different documents ?&lt;\/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;codeviewer.org\/view\/code:df9&lt;\/p&gt;\n&lt;\/blockquote&gt;\n\n&lt;p&gt;I confused, can somebody help me ?&lt;\/p&gt;\n\n&lt;p&gt;Thanks.&lt;\/p&gt;\n"},{"Id":"2703828","CreationDate":"2010-04-24T08:53:14.830","OwnerUserId":"74089","Tags":["sql","query-optimization","nosql","mysql"],"Body":"&lt;p&gt;I have an application for scheduling certain events. And all these events must be reviewed after each scheduled time.&lt;\/p&gt;\n\n&lt;p&gt;So basically we have 3 tables:&lt;\/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;items&lt;\/strong&gt;(id, name)&lt;\/li&gt;\n&lt;li&gt;&lt;strong&gt;scheduled_items&lt;\/strong&gt;(&lt;code&gt;id&lt;\/code&gt;, &lt;code&gt;item_id&lt;\/code&gt;, &lt;code&gt;execute_at&lt;\/code&gt; - datetime) - item_id column has an index option.&lt;\/li&gt;\n&lt;li&gt;&lt;strong&gt;reviewed_items&lt;\/strong&gt;(&lt;code&gt;id&lt;\/code&gt;, &lt;code&gt;item_id&lt;\/code&gt;, &lt;code&gt;created_at&lt;\/code&gt; - datetime) - item_id column has an index option.&lt;\/li&gt;\n&lt;\/ul&gt;\n\n&lt;p&gt;So core function of the application is &quot;give me any items(which are not yet reviewed) for the actual moment&quot;.&lt;\/p&gt;\n\n&lt;p&gt;How can I optimize this solution &lt;strong&gt;for speed&lt;\/strong&gt;(because it is very core business feature and not micro optimization)?&lt;\/p&gt;\n\n&lt;p&gt;I suppose that adding index to the datetime fields doesn't make any sense because the cardinality or uniqueness on that fields are very high and index won't give any(?) speed-up. Is it correct?&lt;\/p&gt;\n\n&lt;p&gt;What would you recommend? Should I try no-SQL?&lt;\/p&gt;\n\n&lt;p&gt;--&lt;\/p&gt;\n\n&lt;pre&gt;&lt;code&gt;mysql -V\n5.075\n&lt;\/code&gt;&lt;\/pre&gt;\n\n&lt;p&gt;I use caching(&lt;strong&gt;memcached&lt;\/strong&gt;) where it makes sence.&lt;\/p&gt;\n\n&lt;p&gt;updated.&lt;\/p&gt;\n"},{"Id":"2707558","CreationDate":"2010-04-25T08:00:57.357","OwnerUserId":"89021","Tags":["unit-testing","automated-tests","database","nosql","data-integrity"],"Body":"&lt;p&gt;I have several files with code testing code (which uses a &quot;unittest&quot; class).&lt;\/p&gt;\n\n&lt;p&gt;Later I found it would be nice to test database integrity also. I put this into a separate directory tree. (Things like the keys have correct format, parent and child nodes are pointing correctly and such. Edit: this is a nosql project, where I can not rely on database level checks liek referential integrity and such.)&lt;\/p&gt;\n\n&lt;p&gt;I use the same unittest class for the integrity tests.&lt;\/p&gt;\n\n&lt;p&gt;Now I wonder if it makes really sense to keep this separate. To test the integrity of data I often duplicate parts of code that I use to test the code that handles the data.&lt;\/p&gt;\n\n&lt;p&gt;But it is not the same. The code tests use test databases (that get deleted after each test) and the integrity tests connect to the live data and analyze it. The integrity tests I want to call from cron and send an alarm if something happens in the live database.&lt;\/p&gt;\n\n&lt;p&gt;How would you handle that? Are there standards for such a setup? What is your experience?&lt;\/p&gt;\n\n&lt;p&gt;My tendency is to put everything in the same file, which would result in the code tests also being executed by the cron on the production environment.&lt;\/p&gt;\n\n&lt;p&gt;&lt;em&gt;Edit:&lt;\/em&gt; What also drives me is to try to keep the project simple and not to have too many files touched by a single task or workflow. Without all the testing i already have a class file, a subclass, a related class, some library (helper) files and the main code. Testing adds one file.  It helps me keep my attention focussed while coding, it is less stressing and I believe I make less errors, and I can faster remember and find a certain code part with less files affected. Only one testing file per workflow would help here. If I keep it seperate there are 2 files (data integrity testing and code testing) and maybe 3 (a common library for both). Abstraction would add complexity.&lt;\/p&gt;\n\n&lt;p&gt;&lt;em&gt;Edit2:&lt;\/em&gt; I am now refactoring a little bit and only moving the data testing files to the same directory tree where also the code testing lives, but keeping different files with the name indicating &quot;integrity&quot; or &quot;testing&quot;. I will not (yet) merge the files, because 2 people recommended against it, and I believe in their experience and advice for now. I will live with code duplication for the moment. &lt;\/p&gt;\n\n&lt;p&gt;&lt;em&gt;Edit3:&lt;\/em&gt; I forgot to mention that the selection of the tests per run is not determined by the tree structure in this case. The tests are enumerated in a master file, so I have 2 master files &quot;integrity&quot; and &quot;code testing&quot; at the present, and the test can live in the same directury structure. &lt;\/p&gt;\n\n&lt;p&gt;Maybe more people will answer. Thank you so far for the valuable input, which is already helping me develop the final structure!&lt;\/p&gt;\n\n&lt;p&gt;&lt;em&gt;Edit4:&lt;\/em&gt; I did more refactoring now. It seems I should keep 2 files, but with slightly modified purpose. One targeted for scheduled monitoring on the production server. And another one for development. But in both files can be integrity tests or code tests. And in both files operations can be performed on test databases (that are erased after the test) and on the permanent database (each one has a permanent database, production server and develpment server). And one important thing: I find myself moving lots of common code from the testing files to the class files. So the classes get also abilities that are for testing only. I like this so far, feels clean. I am not (yet) creating a library for testing that is shared between the 2 testing frontends, this code has gone to the class file of the obejct that is being teted for now.&lt;\/p&gt;\n"},{"Id":"2720490","CreationDate":"2010-04-27T10:49:31.120","OwnerUserId":"302268","Tags":["clojure","nosql","couchdb","mongodb"],"Body":"&lt;p&gt;I am currently trying to pick between different NoSQL databases for my project. The project is being written in clojure and javascript. I am currently looking at three candidates for storage. What are the relative strengths and weaknesses of MongoDB, FleetDB and CouchDB? Which one is better supported in Clojure? Which one is better supported under Linux? Did I miss a better product (has to be free and OSS)?&lt;\/p&gt;\n"},{"Id":"2729981","CreationDate":"2010-04-28T13:47:53.947","OwnerUserId":"327761","Tags":["nosql","database"],"Body":"&lt;p&gt;According to &lt;a href=&quot;http:\/\/en.wikipedia.org\/wiki\/NoSQL#Taxonomy&quot; rel=&quot;nofollow&quot;&gt;Wikipedia NoSQL article&lt;\/a&gt;, there are a lot of NoSQL implementations.&lt;\/p&gt;\n\n&lt;p&gt;What's the difference between document-oriented and key-value storages (as people mention them most often)?&lt;\/p&gt;\n"},{"Id":"2747701","CreationDate":"2010-04-30T21:07:30.867","OwnerUserId":"199594","Tags":["nosql","database","logging","mapreduce"],"Body":"&lt;p&gt;Hello.&lt;\/p&gt;\n\n&lt;p&gt;I'm looking for help deciding on which database system to use.  (I've been googling and reading for the past few hours; it now seems worthwhile to ask for help from someone with firsthand knowledge.)&lt;\/p&gt;\n\n&lt;p&gt;I need to log around 200 million rows (or more) per 8 hour workday to a database, then perform weekly\/monthly\/yearly summary queries on that data.  The summary queries would be for collecting data for things like billing statements, eg. &quot;How many transactions of type A did each user run this month?&quot; (could be more complex, but that's the general idea).&lt;\/p&gt;\n\n&lt;p&gt;I can spread the database amongst several machines, as necessary, but I don't think I can take old data offline.  I'll definitely need to be able to query a month's worth of data, maybe a year.  These queries would be for my own use, and wouldn't need to be generated in real-time for an end-user (they could run overnight, if needed).&lt;\/p&gt;\n\n&lt;p&gt;Does anyone have any suggestions as to which databases would be a good fit?&lt;\/p&gt;\n\n&lt;p&gt;P.S. Cassandra looks like it would have no problem handling the writes, but what about the huge monthly table scans?  Is anyone familiar with Cassandra\/Hadoop MapReduce performance?&lt;\/p&gt;\n"}]}
