<?xml version="1.0"?>
<answers>
  <row Id="299744" ParentId="299723" CreationDate="2008-11-18T18:51:23.953" OwnerUserId="35296" Tags="[]" Body="&amp;lt;p&amp;gt;No.  CouchDB uses an &amp;quot;optimistic concurrency&amp;quot; model.  In the simplest terms, this just means that you send a document version along with your update, and CouchDB rejects the change if the current document version doesn't match what you've sent.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;It's deceptively simple, really.  You can reframe many normal transaction based scenarios for CouchDB. You do need to sort of throw out your RDBMS domain knowledge when learning CouchDB, though.  It's helpful to approach problems from a higher level, rather than attempting to mold Couch to a SQL based world.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Keeping track of inventory&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;The problem you outlined is primarily an inventory issue.  If you have a document describing an item, and it includes a field for &amp;quot;quantity available&amp;quot;, you can handle concurrency issues like this:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;ol&amp;gt;&#10;&amp;lt;li&amp;gt;Retrieve the document, take note of the &amp;lt;code&amp;gt;_rev&amp;lt;/code&amp;gt; property that CouchDB sends along&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;Decrement the quantity field, if it's greater than zero&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;Send the updated document back, using the &amp;lt;code&amp;gt;_rev&amp;lt;/code&amp;gt; property&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;If the &amp;lt;code&amp;gt;_rev&amp;lt;/code&amp;gt; matches the currently stored number, be done!&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;If there's a conflict (when &amp;lt;code&amp;gt;_rev&amp;lt;/code&amp;gt; doesn't match), retrieve the newest document version&amp;lt;/li&amp;gt;&#10;&amp;lt;/ol&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;In this instance, there are two possible failure scenarios to think about.  If the most recent document version has a quantity of 0, you handle it just like you would in a RDBMS and alert the user that they can't actually buy what they wanted to purchase.  If the most recent document version has a quantity greater than 0, you simply repeat the operation with the updated data, and start back at the beginning.  This forces you to do a bit more work than an RDBMS would, and could get a little annoying if there are frequent, conflicting updates.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Now, the answer I just gave presupposes that you're going to do things in CouchDB in much the same way that you would in an RDBMS.  I might approach this problem a bit differently:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;I'd start with a &amp;quot;master product&amp;quot; document that includes all the descriptor data (name, picture, description, price, etc).  Then I'd add an &amp;quot;inventory ticket&amp;quot; document for each specific instance, with fields for &amp;lt;code&amp;gt;product_key&amp;lt;/code&amp;gt; and &amp;lt;code&amp;gt;claimed_by&amp;lt;/code&amp;gt;.  If you're selling a model of hammer, and have 20 of them to sell, you might have documents with keys like &amp;lt;code&amp;gt;hammer-1&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;hammer-2&amp;lt;/code&amp;gt;, etc, to represent each available hammer.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Then, I'd create a view that gives me a list of available hammers, with a reduce function that lets me see a &amp;quot;total&amp;quot;.  These are completely off the cuff, but should give you an idea of what a working view would look like.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Map&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;function(doc) &#10;{ &#10;    if (doc.type == 'inventory_ticket' &amp;amp;#38;amp;&amp;amp;#38;amp; doc.claimed_by == null ) { &#10;     emit(doc.product_key, { 'inventory_ticket' :doc.id, '_rev' : doc._rev }); &#10;    } &#10;}&#10;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;This gives me a list of available &amp;quot;tickets&amp;quot;, by product key.  I could grab a group of these when someone wants to buy a hammer, then iterate through sending updates (using the &amp;lt;code&amp;gt;id&amp;lt;/code&amp;gt; and &amp;lt;code&amp;gt;_rev&amp;lt;/code&amp;gt;) until I successfully claim one (previously claimed tickets will result in an update error).&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Reduce&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;function (keys, values, combine) {&#10;    return values.length;&#10;}&#10;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;This reduce function simply returns the total number of unclaimed &amp;lt;code&amp;gt;inventory_ticket&amp;lt;/code&amp;gt; items, so you can tell how many &amp;quot;hammers&amp;quot; are available for purchase.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Caveats&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;This solution represents roughly 3.5 minutes of total thinking for the particular problem you've presented.  There may be better ways of doing this!  That said, it does substantially reduce conflicting updates, and cuts down on the need to respond to a conflict with a new update.  Under this model, you won't have multiple users attempting to change data in primary product entry.  At the very worst, you'll have multiple users attempting to claim a single ticket, and if you've grabbed several of those from your view, you simply move on to the next ticket and try again.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="316875" ParentId="299723" CreationDate="2008-11-25T10:02:12.037" OwnerUserId="39392" Tags="[]" Body="&amp;lt;p&amp;gt;Expanding on MrKurt's answer. For lots of scenarios you don't need to have stock tickets redeemed in order.  Instead of selecting the first ticket, you can select randomly from the remaining tickets. Given a large number tickets and a large number of concurrent requests, you will get much reduced contention on those tickets, versus everyone trying to get the first ticket.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="337398" ParentId="337344" CreationDate="2008-12-03T14:57:27.837" OwnerUserId="42439" Tags="[]" Body="&amp;lt;p&amp;gt;Document based DBs are best suiting for storing, well, documents. Lotus Notes is a common implementation and Notes email is an example. For what you are describing, eCommerce, CRUD, etc., realtional DBs are better designed for storage and retrieval of data items/elements that are indexed (as opposed to documents).&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="337851" ParentId="337344" CreationDate="2008-12-03T16:49:00.950" OwnerUserId="39392" Tags="[]" Body="&amp;lt;p&amp;gt;You need to think of how you approach the application in an Document oriented way.  If you simply try and replicate how you would model the problem in an RDBMS you will fail.  There are also different trade-offs that you might want to make.  Remember as well that CouchDB's design is assuming that you will have an active active cluster of many nodes that could fail at any time.  How is your app going to handle one of the database nodes dissapearing from under it?&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;One way to think about it is to imagine you didn't have any computers, just paper documents.  How would you create an efficient business process using bits of paper being passed around?  How can you avoid bottlenecks?  What if something goes wrong?&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Another angle you should think about is eventual consistency, where you will get into a consistent state eventually, but you may be inconsistent for some period of time.  This is an anathema in RMDBS land, but is extremely common in the real world.  The canonical transaction example is of transferring money from bank accounts.  How does this actually happen in the real world?  Through a single atomic transactions or through different banks issuing credit and debit notices to each other?  What happens when you write a cheque?&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;So lets look at your examples:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;ul&amp;gt;&#10;&amp;lt;li&amp;gt;Crud of entities with some fields with unique index on it.&amp;lt;/li&amp;gt;&#10;&amp;lt;/ul&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;If I understand this correctly in CouchDB terms, you want to have a collection of documents where some that some named value is guaranteed to be unique across all those documents?  That case isn't generally supportable because documents may be created on different replicas.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;So we need to look at the real world problem and see if we can model that.  Do you really need them to be unique?  Can your application handle multiple docs with the same value?  Do you need to assign a unique identifier?  Can you do that deterministically?  A common scenario where this is required is where you need a unique sequential identifier.  This is tough to solve in a replicated environment.  In fact if the unique id is need to be strictly sequential with respect to time created it's impossible if you need the id straight away.  You need to relax at least one of those constraints.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;ul&amp;gt;&#10;&amp;lt;li&amp;gt;ecommerce web app like ebay&amp;lt;/li&amp;gt;&#10;&amp;lt;/ul&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;I'm not sure what to add here as the last comment you made on that post was to say &amp;quot;very useful! thanks&amp;quot;.  Was there something missing from the approach outlined there that is still causing you a problem?  I thought MrKurt's answer was pretty full and I added a little enhancement that would reduce contention.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="337861" ParentId="337344" CreationDate="2008-12-03T16:52:27.543" OwnerUserId="13930" Tags="[]" Body="&amp;lt;p&amp;gt;Is there a need to normalize the data?&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;ul&amp;gt;&#10;&amp;lt;li&amp;gt;Yes: Use relational.&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;No: Use document.&amp;lt;/li&amp;gt;&#10;&amp;lt;/ul&amp;gt;&#10;"/>
  <row Id="568675" ParentId="299723" CreationDate="2009-02-20T08:09:54.137" OwnerUserId="6277" Tags="[]" Body="&amp;lt;p&amp;gt;Actually, you can in a way.  Have a look at the &amp;lt;a href=&amp;quot;http://wiki.apache.org/couchdb/HTTP%5FDocument%5FAPI&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;HTTP Document API&amp;lt;/a&amp;gt; and scroll down to the heading &amp;quot;Modify Multiple Documents With a Single Request&amp;quot;.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Basically you can create/update/delete a bunch of documents in a single post request to *URI /{dbname}/_bulk_docs* and they will either all succeed or all fail.  The document does caution that this behaviour may change in the future, though.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;EDIT: As predicted, from version 0.9 the bulk docs no longer works this way.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="667161" ParentId="667141" CreationDate="2009-03-20T17:31:11.260" OwnerUserId="11208" Tags="[]" Body="&amp;lt;p&amp;gt;I suggest you visit the &amp;lt;a href=&amp;quot;http://highscalability.com/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;High Scalability blog&amp;lt;/a&amp;gt;, which discusses this topic almost on a daily basis and has many articles about projects that chose distributed hashes, etc. over RDMBS.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;The quick (but very incomplete answer) is that not all data translates well to tables in efficient ways. For example, if your data is essentially one big dictionary, there are probably much faster alternatives that plain old RDBMS. Having said that, it mostly a matter of performance, and if performance isn't a huge concern in a project, and stability, consistency and reliability, for example, are, then I don't see much point in delving into these technologies when RDBMS is a much more mature and well developed scheme, with support in all languages and platforms and a huge set of solutions to choose from.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="667162" ParentId="667141" CreationDate="2009-03-20T17:31:15.647" OwnerUserId="69307" Tags="[]" Body="&amp;lt;p&amp;gt;Fifteen years ago I was working on a credit risk system (basically a big tree walking system). We were using Sybase on HPUX &amp;amp;#38;amp; solaris and performnce was killing us. We hired in consultants direct from Sybase who said it couldn't be done. Then we switched to an OO database (Object store in this case) and got a about a 100x performance increase (and the code was about 100x easier to write too)&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;But such situations are quite rare - a relational database is a good first choice.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="667355" ParentId="667141" CreationDate="2009-03-20T18:21:21.657" OwnerUserId="20860" Tags="[]" Body="&amp;lt;p&amp;gt;The relational database paradigm makes some assumptions about usage of data.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;ul&amp;gt;&#10;&amp;lt;li&amp;gt;A relation consists of an unordered set of rows.&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;All rows in a relation have the same set of columns.&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;Each column has a fixed name and data type and semantic meaning on all rows.&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;Rows in a relation are identified by unique values in primary key column(s).&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;etc.&amp;lt;/li&amp;gt;&#10;&amp;lt;/ul&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;These assumptions support simplicity and structure, at the cost of some flexibility.  Not all data management tasks fit into this kind of structure.  Entities with complex attributes or variable attributes do not, for instance.  If you need flexibility in areas where a relational database solution doesn't support it, you need to use a different kind of solution.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;There are other solutions for managing data with different requirements.  Semantic Web technology, for example, allows each entity to define its own attributes and to be self-describing, by treating metadata as attributes just like data.  This is more flexible than the structure imposed by a relational database, but that flexibility comes with a cost of its own.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Overall, you should use the right tool for each job.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;See also my other answer to &amp;quot;&amp;lt;a href=&amp;quot;http://stackoverflow.com/questions/282783/the-next-gen-databases/282813#282813&amp;quot;&amp;gt;The Next-gen databases&amp;lt;/a&amp;gt;.&amp;quot;&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="667673" ParentId="667141" CreationDate="2009-03-20T19:41:21.667" OwnerUserId="726" Tags="[]" Body="&amp;lt;p&amp;gt;In my experience, you shouldn't use a relational database when any one of these criteria are true:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;ul&amp;gt;&#10;&amp;lt;li&amp;gt;your data is structured as a hierarchy or a graph (network),&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;the typical access pattern emphasizes reading over writing, or&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;there&#x2019;s no requirement for ad-hoc queries.&amp;lt;/li&amp;gt;&#10;&amp;lt;/ul&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Hierarchies and graphs do not translate well to relational tables. Even with the assistance of proprietary extensions like Oracle's &amp;lt;code&amp;gt;CONNECT BY&amp;lt;/code&amp;gt;, chasing down trees is a mighty pain using SQL.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Relational databases add a lot of overhead for simple read access. Transactional and referential integrity are powerful, but overkill for some applications. So for read-mostly applications, a file metaphor is good enough.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Finally, you simply don&#x2019;t need a relational database with its full-blown query language if there are no unexpected queries anticipated. If there are no suits asking questions like &amp;quot;how many 5%-discounted blue widgets did we sell in on the east coast grouped by salesperson?&amp;quot;, and there never will be, then you, sir, can live free of DB.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="667704" ParentId="667141" CreationDate="2009-03-20T19:50:48.290" OwnerUserId="68869" Tags="[]" Body="&amp;lt;p&amp;gt;&#10;About 7-8 years ago I worked on a web site that grew in popularity beyond our initial expectations and it got us in trouble performance-wise. Since we were all relatively inexperienced in web based projects it posed a significant strain on us about what to do beyond usual database separation onto separate server, load balancing etc.&#10;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;One day I've thought of something pretty simple. Since site was based on users, their profiles were stored in a database table the usual way someone would do it - user id, lots of info variables and stuff like that - which would show up as a users profile page which other users could look up. I've flushed all that data into a simple html file, already prepared as a users profile page and got a significant boost - basically a cache. I even made a system that when user edited their profile info, it would parse original html file, put it up for edit, and then flush out html back to the file system - got even more boost.&#10;&amp;lt;p&amp;gt;&#10;I made something simillar with messages users sent to each other. Basically wherever I could make a system bypass a database altogether, avoiding a INSERT or UPDATE, I got a significant boost. It may sound like a common sense, but it was an enlightening moment. It is not an avoidance of relational setup per se, but it is an avoidance of the database altogether - KISS. &#10;&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="667878" ParentId="667141" CreationDate="2009-03-20T20:37:07.587" OwnerUserId="27978" Tags="[]" Body="&amp;lt;p&amp;gt;When you schema varies a lot you will have a hard time with relational databases. This is where XML databases or key-value pair databases work best. or you could use IBM DB2 and have both relational data and XML data managed by a single database engine. Get it free - check &amp;lt;a href=&amp;quot;http://FreeDB2.com&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://FreeDB2.com&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="668500" ParentId="667141" CreationDate="2009-03-21T00:57:56.070" OwnerUserId="49716" Tags="[]" Body="&amp;lt;p&amp;gt;A very good reason not to use a relational DBMS is the case when you can't properly design a relational schema, that means you are unaware of Relational Model:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;ul&amp;gt;&#10;&amp;lt;li&amp;gt;Relational algebra&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;Functional dependencies theory &amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;Normalization theory and normal forms&amp;lt;/li&amp;gt;&#10;&amp;lt;/ul&amp;gt;&#10;"/>
  <row Id="823509" ParentId="299723" CreationDate="2009-05-05T05:47:50.337" OwnerUserId="" Tags="[]" Body="&amp;lt;p&amp;gt;How do you do the classic &amp;quot;bank account&amp;quot; example of a database transaction?  I.e. you want to atomically withdraw $100 from Alice's account and deposit it into Bob's.  There are millions of accounts so you can't really expect Alice's and Bob's accounts to be the same document.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1118594" ParentId="337344" CreationDate="2009-07-13T09:59:34.833" OwnerUserId="" Tags="[]" Body="&amp;lt;p&amp;gt;when is there a need for normalized data?&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1145740" ParentId="1145726" CreationDate="2009-07-17T21:18:02.017" OwnerUserId="3043" Tags="[]" Body="&amp;lt;p&amp;gt;It's like Jacuzzi: both a brand and a generic name.  It's not just a specific technology, but rather a specific &amp;lt;em&amp;gt;type&amp;lt;/em&amp;gt; of technology, in this case referring to large-scale (often sparse) &amp;quot;databases&amp;quot; like Google's BigTable or CouchDB.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1145751" ParentId="1145726" CreationDate="2009-07-17T21:21:16.177" OwnerUserId="122228" Tags="[]" Body="&amp;lt;p&amp;gt;I assume you are refering to &amp;lt;a href=&amp;quot;http://blog.oskarsson.nu/2009/06/nosql-debrief.html&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;this&amp;lt;/a&amp;gt; meaning of NoSQL.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;If I recall correctly, it refers to types of databases that don't neccessarily follow the relational form. Document databases come to mind, databases without a specific structure, and which don't use SQL as a specific query language.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;If I am recalling correctly, its generally better in web applications that rely on performance of the database, and don't need more advanced features of Relation Database Engines. For example, a Key-&amp;gt;Value store providing a simple query by id interface might be 10-100x faster then the corresponding SQL server implementation, with a lower developer maintenance cost. &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;One example is this &amp;lt;a href=&amp;quot;http://www.vldb.org/conf/2007/papers/industrial/p1150-stonebraker.pdf&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;paper&amp;lt;/a&amp;gt; for an &amp;lt;a href=&amp;quot;http://en.wikipedia.org/wiki/Online%5Ftransaction%5Fprocessing&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;OLTP&amp;lt;/a&amp;gt; Tuple Store, which sacrificed transactions for single threaded processing (no concurrency problem because no concurrency allowed), and kept all data in memory; achieving 10-100x better performance as compared to a similar RDBMS driven system. Basically, it's moving away from the 'One Size Fits All' view of SQL and database systems. &amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1145871" ParentId="1145726" CreationDate="2009-07-17T21:57:18.193" OwnerUserId="47773" Tags="[]" Body="&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://www.strozzi.it/cgi-bin/CSA/tw7/I/en%5FUS/nosql/Home%20Page&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;NoSQL&amp;lt;/a&amp;gt; the actual program appears to be a relational database implemented in awk using flat files on the backend.  Though they profess, &amp;quot;NoSQL essentially has no arbitrary limits, and can work where other products can't. For example there is no limit on data field size, the number of columns, or file size&amp;quot; , I don't think it is the large scale database of the future.  &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;As Joel says, massively scalable databases like &amp;lt;a href=&amp;quot;http://en.wikipedia.org/wiki/BigTable&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;BigTable&amp;lt;/a&amp;gt; or &amp;lt;a href=&amp;quot;http://en.wikipedia.org/wiki/Hbase&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;HBase&amp;lt;/a&amp;gt;, are much more interesting.  GQL is the query language associated with BigTable and App Engine.  It's largely SQL tweaked to avoid features Google considers bottle-necks (like joins).  However, I haven't heard this referred to as &amp;quot;NoSQL&amp;quot; before.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1164587" ParentId="1145726" CreationDate="2009-07-22T11:17:58.127" OwnerUserId="142745" Tags="[]" Body="&amp;lt;p&amp;gt;As the author of NoSQL I'm pleased to learn that Matthew gave me the due credit by posting a link to NoSQL's Wiki site. I'm really disappointed by learning that mr. Johan Oskarsson, who's behind that newborn &amp;quot;nosql movement&amp;quot;, has carefully avoided to mention the original implementation of NoSQL in his posts, events and web pages, in spite of the fact the if one googles for nosql the thruth pops up right away. By doing so, mr. Oskarsson also denies to give due credit to the many who have contributed with creating and evolving NoSQL over the last 15 years or so, and who are dutifully listed on NoSQL's home page. As if that was not enough, some others, who obviusly have never heard of Google, have gone to the point to closely mimic the NoSQL logo, as you may see in &amp;lt;a href=&amp;quot;http://www.cwi.it/notizia/18526/2009-07-21/Cresce-il-movimento-anti-database.html&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;this Italian translation&amp;lt;/a&amp;gt; of a recent Computerworld article about said &amp;quot;nosql movement&amp;quot;. Those folks too, of course, did not give any credits either. And I do not blame you for saying about NoSQL &amp;quot;I don't think it is the large scale database of the future.&amp;quot;, because it never indended to be. Thank-you Matthew, I mean it.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1164798" ParentId="1145726" CreationDate="2009-07-22T12:01:27.667" OwnerUserId="16883" Tags="[]" Body="&amp;lt;blockquote&amp;gt;&#10;  &amp;lt;ol&amp;gt;&#10;  &amp;lt;li&amp;gt;What exactly is it?&amp;lt;/li&amp;gt;&#10;  &amp;lt;/ol&amp;gt;&#10;&amp;lt;/blockquote&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;On one hand, a &amp;lt;a href=&amp;quot;http://www.strozzi.it/cgi-bin/CSA/tw7/I/en%5FUS/nosql/Home%20Page&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;specific system&amp;lt;/a&amp;gt;, but it has also become a generic word for a &amp;lt;a href=&amp;quot;http://www.eflorenzano.com/blog/post/my-thoughts-nosql/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;variety of new data storage backends&amp;lt;/a&amp;gt; that do not follow the relational DB model.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;blockquote&amp;gt;&#10;  &amp;lt;ol&amp;gt;&#10;  &amp;lt;li&amp;gt;How does it work?&amp;lt;/li&amp;gt;&#10;  &amp;lt;/ol&amp;gt;&#10;&amp;lt;/blockquote&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Each of the systems labelled with the generic name works differently, but the basic idea is to offer better scalability and performance by using DB models that don't support all the functionality of a generic RDBMS, but still enough functionality to be useful. In a way it's like MySQL, which at one time lacked support for transactions but, exactly &amp;lt;em&amp;gt;because&amp;lt;/em&amp;gt; of that, managed to outperform other DB systems. If you could write your app in a way that didn't require transactions, it was great.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;blockquote&amp;gt;&#10;  &amp;lt;ol&amp;gt;&#10;  &amp;lt;li&amp;gt;Why would it be better than using a SQL Database? And how much better is it?&amp;lt;/li&amp;gt;&#10;  &amp;lt;/ol&amp;gt;&#10;&amp;lt;/blockquote&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;It would be better when your site needs to scale so massively that the best RDBMS running on the best hardware you can afford and optimized as much as possible simply can't keep up with the load. How much better it is depends on the specific use case (lots of update activity combined with lots of joins is very hard on &amp;quot;traditional&amp;quot; RDBMSs) - could well be a factor of 1000 in extreme cases.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;blockquote&amp;gt;&#10;  &amp;lt;ol&amp;gt;&#10;  &amp;lt;li&amp;gt;Is the technology too new to start implementing yet or is it worth taking a look into?&amp;lt;/li&amp;gt;&#10;  &amp;lt;/ol&amp;gt;&#10;&amp;lt;/blockquote&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Depends mainly on what you're trying to achieve. It's certainly mature enough to use. But few applications really need to scale that massively. For most, a traditional RDBMS is sufficient. However, with internet usage becoming more ubiquitous all the time, it's quite likely that applications that do will become more common (though probably not dominant).&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1165148" ParentId="1145726" CreationDate="2009-07-22T13:08:55.227" OwnerUserId="142745" Tags="[]" Body="&amp;lt;p&amp;gt;Since someone said that my previous post was off-topic, I'll try to compensate :-) NoSQL is not, and never was, intended to be a replacement for more mainstream SQL databases, but a couple of words are in order to get things in the right perspective. At the very hart of the &amp;lt;a href=&amp;quot;http://www.strozzi.it/cgi-bin/CSA/tw7/I/en%5FUS/NoSQL/Philosophy%20of%20NoSQL&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;NoSQL philosophy&amp;lt;/a&amp;gt; lies the consideration that, possibly for commercial and portability reasons, SQL engines tend to disregard the tremendous power of the UNIX operating system and its derivatives. With a filesystem-based database, you can take immediate advantage of the ever increasing capabilities and power of the underlying operating system, which have been steadily increasing for many years now in accordance with Moore's law. With this approach, many operating-system commands become automatically also &amp;quot;database operators&amp;quot; (think of  &amp;quot;ls&amp;quot; &amp;quot;sort&amp;quot;, &amp;quot;find&amp;quot; and the other countless UNIX shell utilities). With this in mind, and a bit of creativity, you can indeed devise a filesystem-based database that is able to overcome the limitations of many common SQL engines, at least for specific usage patterns, and this is the whole point behind NoSQL's philosophy the way I see it. I run hundreds of web sites and they all use NoSQL to a greater or lesser extent. In fact, they do not host huge amounts of data, but even if some of them did I could probably think of a creative use of NoSQL and the filesystem, to overcome any bottlenecks. Something that would likely be more difficult with traditional SQL &amp;quot;jails&amp;quot;. I urge you to google for &amp;quot;unix&amp;quot;, &amp;quot;manis&amp;quot; and &amp;quot;shaffer&amp;quot; to understand what I mean.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1182873" ParentId="1165185" CreationDate="2009-07-25T19:40:22.670" OwnerUserId="54990" Tags="[]" Body="&amp;lt;p&amp;gt;It all depends on your scaling requirments. RBDMS require locks to work and so can only really be scaled &amp;quot;up&amp;quot;. NoSQL-style DBs such as Googles bigtable and CouchDB are massively scalable and very cheap, but can get very complicated to write an app on top of as developers have to deal with all kinds of data consistency/fault tolerance issues in thier application layer. &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;I would say for a small application you're probably better off with a SQL-based relational database. Whilst in theory much more expensive, being realistic at a small scale that price trades off as a much simpler system to work with.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;If however you're start up is a muti-tenant solution which needs to deal with a lot of writes, I'd look carefully at alternatives.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1189998" ParentId="1189911" CreationDate="2009-07-27T19:05:09.473" OwnerUserId="121191" Tags="[]" Body="&amp;lt;p&amp;gt;I'm answering this with CouchDB in the back of my mind, but I would presume most would be true for other DBs also. We looked at using CouchDB, but finally decided against it since our data access is not known beforehand and scalability is not the issue.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Harder:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;ul&amp;gt;&#10;&amp;lt;li&amp;gt;Takes rethinking on conceptual level so it's 'harder' since it is just different. Since you have to know your data access patterns in advance, no automatic translation can be applied. You would need to add the access pattern at least.&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;Consistency is not handled by the database but must be dealt with in the application. Less guarantees means easier migration, fail-over and better scalability at the cost of a more complicated application. An application has to deal with conflicts and inconsistencies.&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;Links which cross documents (or key/value) have to be dealt with on application level also.&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;SQL type of databases have IDEs which are much more mature. You get a lot of support libraries (although the layering of those libraries make things much more complex than needed for SQL).&amp;lt;/li&amp;gt;&#10;&amp;lt;/ul&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Easier:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;ul&amp;gt;&#10;&amp;lt;li&amp;gt;Faster if you know your data access patterns.&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;Migration / Fail-over is easier for the database since no promises are made to you as an application programmer. Although you get eventual consistency. Probably. Finally. Some time.&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;One key / value is much easier to understand than one row from a table. All the (tree) relations are already in, and complete objects can be recognized.&amp;lt;/li&amp;gt;&#10;&amp;lt;/ul&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;The modeling should be about the same but you have to be careful about what you put in one document: UML can also be used for both OO modeling as well as DB modeling, which are two different beasts already.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;I would have liked to see a good open OO database nicely integrated with C# / Silverlight. Just to make the choice even more difficult. :)&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1190022" ParentId="1189911" CreationDate="2009-07-27T19:11:08.167" OwnerUserId="14149" Tags="[]" Body="&amp;lt;p&amp;gt;Flat files have long been considered arcane and impractical for a data set of any size. However, faster computers with more memory make it possible to load a file into memory and sort it in real time, at least for reasonably small n and local, single-user applications.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;For example, you can usually read a file of 10,000 records AND sort it on a field in less than half a second, an acceptable response time.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Of course, there are reasons to use a database instead of a flat file -- relational operations, data integrity, multiuser capability, remote acccess, larger capacity, standardization, etc., but increased computer speed and memory capacity have made in-memory manipulation of data more practical in some cases.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1192822" ParentId="1189911" CreationDate="2009-07-28T08:57:49.517" OwnerUserId="36710" Tags="[]" Body="&amp;lt;p&amp;gt;I think you have to consider that the non-relational DBMS differ a lot regarding their data model and therefore the conceptual data design will also differ a lot. In the thread &amp;lt;a href=&amp;quot;http://groups.google.com/group/nosql-discussion/browse%5Fthread/thread/bbe3aa69071fd7b9/b5bb363c32f598c9&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Data Design in Non-Relational Databases&amp;lt;/a&amp;gt; of the &amp;lt;a href=&amp;quot;http://groups.google.com/group/nosql-discussion/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;NOSQL Google group&amp;lt;/a&amp;gt; the different paradigms are categorized like this:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;ol&amp;gt;&#10;&amp;lt;li&amp;gt;Bigtable-like systems (HBase,&#10;Hypertable, etc)&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;Key-value stores (Tokyo, Voldemort,&#10;etc)&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;Document databases (CouchDB,&#10;MongoDB, etc)&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;Graph databases (AllegroGraph,&#10;Neo4j, Sesame, etc)&amp;lt;/li&amp;gt;&#10;&amp;lt;/ol&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;I'm mostly into &amp;lt;a href=&amp;quot;http://stackoverflow.com/questions/1000162/have-anyone-used-graph-based-databases-http-neo4j-org&amp;quot;&amp;gt;graph databases&amp;lt;/a&amp;gt;, and the elegance of data design using this paradigm was what brought me there, tired of the shortcomings of &amp;lt;a href=&amp;quot;http://en.wikipedia.org/wiki/Relational%5Fdatabase%5Fmanagement%5Fsystem&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;RDBMS&amp;lt;/a&amp;gt;. I have put a few examples of data design using a graph database on this &amp;lt;a href=&amp;quot;http://wiki.neo4j.org/content/Domain%5FModeling%5FGallery&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;wiki page&amp;lt;/a&amp;gt; and there's an &amp;lt;a href=&amp;quot;http://wiki.neo4j.org/content/IMDB%5FThe%5FDomain&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;example of how to model&amp;lt;/a&amp;gt; the basic &amp;lt;a href=&amp;quot;http://en.wikipedia.org/wiki/Internet%5FMovie%5FDatabase&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;IMDB&amp;lt;/a&amp;gt; movie/actor/role data too.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;The presentation slides (pdf) &amp;lt;a href=&amp;quot;http://markorodriguez.com/Lectures%5Ffiles/risk-symposium2009.pdf&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Graph Databases and the Future of Large-Scale Knowledge Management&amp;lt;/a&amp;gt; by &amp;lt;a href=&amp;quot;http://markorodriguez.com/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Marko Rodriguez&amp;lt;/a&amp;gt; contains a very nice introduction to data design using a graph database as well.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;em&amp;gt;Answering the specific questions from a graphdb point of view:&amp;lt;/em&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Alternate design: adding relationships between many different kinds of entities without any worries or a need to predefine which entities can get connected.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Bridging the gap: I tend to do this different for every case, based on the domain itself, as I don't want a &amp;quot;table-oriented graph&amp;quot; and the like. However, &amp;lt;a href=&amp;quot;http://wiki.neo4j.org/content/SQL%5FImporter&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;here's&amp;lt;/a&amp;gt; some information on automatic translation from RDBMS to graphdb.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Explicit data models: I do these all the time (whiteboard style), and then use the model as it is in the DB as well.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Miss from RDBMS world: easy ways to create reports.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1203360" ParentId="1203010" CreationDate="2009-07-29T22:12:01.220" OwnerUserId="2958" Tags="[]" Body="&amp;lt;p&amp;gt;I think &amp;lt;a href=&amp;quot;http://www.mongodb.org/display/DOCS/Home&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;MongoDB&amp;lt;/a&amp;gt; is beginning to look like the front runner performance wise for schemaless data stores.  &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;We're currently in the processes of evaluating this for storing binary objects that can range from 10Kb to 50Mb and I've been very impressed with it's performance even on modest hardware.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1203457" ParentId="1203010" CreationDate="2009-07-29T22:32:19.830" OwnerUserId="30506" Tags="[]" Body="&amp;lt;p&amp;gt;If it is primarily read performance you are worried about why not just put a &amp;lt;a href=&amp;quot;http://varnish.projects.linpro.no/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;varnish&amp;lt;/a&amp;gt; proxy in front of couchdb? I use a couple of custom configurations in varnish to tell it not to actually query couchdb for cached objects despite couchdb specifying must-validate, then have a script with an active HTTP GET on _changes that uses the data from _changes in order to explicitly purge changed entries from varnish.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;As a plus varnish lets you do URL rewriting, which I need. Most of the other solutions for it involve running something like apache or ngnix just to rewrite URLs for couchdb.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1215297" ParentId="299723" CreationDate="2009-07-31T23:01:59.983" OwnerUserId="9069" Tags="[]" Body="&amp;lt;p&amp;gt;A design pattern for restfull transactions is to create a &amp;quot;tension&amp;quot; in the system. For the popular example use case of a bank account transaction you must ensure to update the total for both involved accounts:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;ul&amp;gt;&#10;&amp;lt;li&amp;gt;Create a transaction document &amp;quot;transfer USD 10 from account 11223 to account 88733&amp;quot;. This creates the tension in the system.&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;To resolve any tension scan for all transaction documents and&#10;&amp;lt;ul&amp;gt;&#10;&amp;lt;li&amp;gt;If the source account is not updated yet update the source account (-10 USD)&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;If the source account was updated but the transaction document does not show this then update the transaction document (e.g. set flag &amp;quot;sourcedone&amp;quot; in the document)&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;If the target account is not updated yet update the target account (+10 USD)&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;If the target  account was updated but the transaction document does not show this then update the transaction document &amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;If both accouts have been updated you can delete the transaction document or keep it for auditing.&amp;lt;/li&amp;gt;&#10;&amp;lt;/ul&amp;gt;&amp;lt;/li&amp;gt;&#10;&amp;lt;/ul&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;The scanning for tension should be done in a backend process for all &amp;quot;tension documents&amp;quot; to keep the times of tension in the system short. In the above example there will be a short time anticipated inconsistence when the first account has been updated but the second is not updated yet. This must be taken into account the same way you'll deal with eventual consistency if your Couchdb is distributed.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Another possible implementation avoids the need for transactions completely: just store the tension documents and evaluate the state of your system by evaluating every involved tension document. In the example above this would mean that the total for a account is only determined as the sum values in the transaction documents where this account is involved. In Couchdb you can modles this very nicely as a map/reduce view.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1245361" ParentId="1245338" CreationDate="2009-08-07T15:17:44.580" OwnerUserId="6568" Tags="[]" Body="&amp;lt;p&amp;gt;Put simply, it means not using a relational database for data storage.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Here's a relevant article:  &amp;lt;a href=&amp;quot;http://www.computerworld.com/s/article/9135086/No_to_SQL_Anti_database_movement_gains_steam_&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://www.computerworld.com/s/article/9135086/No_to_SQL_Anti_database_movement_gains_steam_&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1245362" ParentId="1245338" CreationDate="2009-08-07T15:17:48.947" OwnerUserId="2469" Tags="[]" Body="&amp;lt;p&amp;gt;From the &amp;lt;a href=&amp;quot;http://www.strozzi.it/cgi-bin/CSA/tw7/I/en%5FUS/nosql/Home%20Page&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;NoSQL Homepage&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;blockquote&amp;gt;&#10;  &amp;lt;p&amp;gt;NoSQL is a fast, portable, relational database management system without arbitrary limits, (other than memory and processor speed) that runs under, and interacts with, the UNIX  1 Operating System. It uses the &amp;quot;Operator-Stream Paradigm&amp;quot; described in &amp;quot;Unix Review&amp;quot;, March, 1991, page 24, entitled &amp;quot;A 4GL Language&amp;quot;. There are a number of &amp;quot;operators&amp;quot; that each perform a unique function on the data. The &amp;quot;stream&amp;quot; is supplied by the UNIX Input/Output redirection mechanism. Therefore each operator processes some data and then passes it along to the next operator via the UNIX pipe function. This is very efficient as UNIX pipes are implemented in memory. NoSQL is compliant with the &amp;quot;Relational Model&amp;quot;.&amp;lt;/p&amp;gt;&#10;&amp;lt;/blockquote&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;I would also see this answer on &amp;lt;a href=&amp;quot;http://stackoverflow.com/questions/1145726/what-is-nosql-how-does-it-work-and-what-benefits-does-it-profide/1145751#1145751&amp;quot;&amp;gt;Stackoverflow&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1245379" ParentId="1245338" CreationDate="2009-08-07T15:19:58.493" OwnerUserId="25538" Tags="[]" Body="&amp;lt;p&amp;gt;If you've ever worked with a database, you've probably worked with a &amp;lt;em&amp;gt;relational&amp;lt;/em&amp;gt; database.  Examples would be an Access database, SQL Server, or MySQL.  When you think about tables in these kinds of databases, you generally think of a grid, like in Excel.  You have to name each column of your database table, and you have to specify whether all the values in that column are integers, strings, etc.  Finally, when you want to look up information in that table, you have to use a language called SQL.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;A new trend is forming around non-relational databases, that is, databases that do not fall into a neat grid.  You don't have to specify which things are integers and strings and booleans, etc.  These types of databases are more flexible, but they don't use SQL, because they are not structured that way.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Put simply, that is why they are &amp;quot;NoSQL&amp;quot; databases.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;The advantage of using a NoSQL database is that you don't have to know exactly what your data will look like ahead of time.  Perhaps you have a Contacts table, but you don't know what kind of information you'll want to store about each contact.  In a relational database, you need to make columns like &amp;quot;Name&amp;quot; and &amp;quot;Address&amp;quot;.  If you find out later on that you need a phone number, you have to add a column for that.  There's no need for this kind of planning/structuring in a NoSQL database.  There are also potential scaling advantages, but that is a bit controversial, so I won't make any claims there.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Disadvantages of NoSQL databases is really the lack of SQL.  SQL is simple and ubiquitous.  SQL allows you to slice and dice your data easier to get aggregate results, whereas it's a bit more complicated in NoSQL databases (you'll probably use things like MapReduce, for which there is a bit of a learning curve). &amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1245392" ParentId="1245338" CreationDate="2009-08-07T15:22:43.900" OwnerUserId="33052" Tags="[]" Body="&amp;lt;p&amp;gt;NoSql is the new database philosophy which talks about all the shortcomings of the relational database design, particularly the problems they have in scaling up for today's demanding web environments.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;NoSql is quickly evolving into a movement with new tools, software and formats coming up as alternative to SQL.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;RDBMS is as ubiquitous as OOP and while both of these design methodologies solve some problems wonderfully, they don't solve all.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;So think of NoSql as the functional programmin of the database world.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Was this simple enough?&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1248165" ParentId="1245338" CreationDate="2009-08-08T06:43:49.370" OwnerUserId="49478" Tags="[]" Body="&amp;lt;p&amp;gt;NoSQL is the idea that SQL-type databases don't satisfy the demands/requirements of a heavily-used database that requires transactions be reliable and failsafe (or close to it). This ties into the ideas of ACID and CAP, both things worth looking into but not something to lose sleep over unless you run a really popular site that is transaction-heavy (ie Amazon or Ebay). To get a great start on these subjects, I suggest:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://www.eflorenzano.com/blog/post/my-thoughts-nosql/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://www.eflorenzano.com/blog/post/my-thoughts-nosql/&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;and&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://www.julianbrowne.com/article/viewer/brewers-cap-theorem&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://www.julianbrowne.com/article/viewer/brewers-cap-theorem&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1342883" ParentId="1342741" CreationDate="2009-08-27T18:21:30.437" OwnerUserId="143972" Tags="[]" Body="&amp;lt;p&amp;gt;I am also planning on moving away from SQL. I have been looking at &amp;lt;a href=&amp;quot;http://couchdb.apache.org/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;CouchDB&amp;lt;/a&amp;gt;, which looks promising. Looking at your requirements, I think all can be done with CouchDB views, and the list api.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1343331" ParentId="1342741" CreationDate="2009-08-27T19:31:45.503" OwnerUserId="115305" Tags="[]" Body="&amp;lt;p&amp;gt;For a project I once needed a simple database that was fast at doing lookups and which would do lots of lookups and just an occasional write. I just ended up writing my own file format.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;While you could do this too, it is pretty complex, especially if you need to support it from a web server. With a web server, you would at least need to protect every write to the file and make sure it can be read from multiple threads. The design of this file format is something you should work out as good as possible with plenty of testing and experiments. One minor bug could prove fatal for a web project in this style, but if you get it working, it can work real well and extremely fast.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;But for 99.999% of all situations, you don't want such a custom solution. It's easier to just upgrade the hardware, move to Oracle, SQL Server or InterBase, use a dedicated database server, use faster hard disks, install more memory, upgrade to a 64-bit system. Those are the more generic tricks to improve performance with the least effort.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1343565" ParentId="1342741" CreationDate="2009-08-27T20:25:08.657" OwnerUserId="13724" Tags="[]" Body="&amp;lt;p&amp;gt;I'd really, really, suggest stay with MySQL (or a RDBMS) until you fully understand the situation.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;I have no idea how much performance or much data you plan on using, but 30M rows is not very many. &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;If you need to optimise certain range scans, you can do this with (for example) InnoDB by choosing a (implicitly clustered) primary key judiciously, and/or denormalising where necessary.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;But like most things, make it work first, then fix performance problems you detect in your performance test lab on production-grade hardware.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;hr /&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;EDIT:Some other points:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;ul&amp;gt;&#10;&amp;lt;li&amp;gt;key/value database such as Cassandra, Voldermort etc, do not generally support secondary indexes&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;Therefore, you cannot do a CREATE INDEX&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;Most of them also don't do range scans (even on the main index) because they're using hashing to implement partitioning (which they mostly do).&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;Therefore they also don't do range expiry (DELETE FROM tbl WHERE ts &amp;amp;#38;lt; NOW() - INTERVAL 30 DAYS)&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;Your application must do ALL of this itself or manage without it; secondary indexes are really the killer&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;ALTER TABLE ... ADD INDEX takes quite a long time in e.g. MySQL with a large table, but at least you don't have to write much code to do it. In a &amp;quot;nosql&amp;quot; database, it will also take a long time BUT also you have to write heaps and heaps of code to maintain the new secondary index, expire it correctly, AND modify your queries to use it.&amp;lt;/li&amp;gt;&#10;&amp;lt;/ul&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;In short... you can't use a key/value database as a shortcut to avoid ALTER TABLE.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1345085" ParentId="1245338" CreationDate="2009-08-28T04:55:33.297" OwnerUserId="15962" Tags="[]" Body="&amp;lt;p&amp;gt;Something everyone considering a &amp;quot;nosql&amp;quot; approach should consider:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;(I shan't risk putting the image into this post as it contains a curse word, and I don't want offensive flags. So clicker beware -- there's an f-word in there.  Only click if you have a sense of humor.)&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://browsertoolkit.com/fault-tolerance.png&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://browsertoolkit.com/fault-tolerance.png&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1387734" ParentId="1342741" CreationDate="2009-09-07T05:53:08.153" OwnerUserId="20860" Tags="[]" Body="&amp;lt;p&amp;gt;I'd recommend learning about &amp;lt;a href=&amp;quot;http://en.wikipedia.org/wiki/Message%5Fqueue&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;&amp;lt;strong&amp;gt;message queue&amp;lt;/strong&amp;gt;&amp;lt;/a&amp;gt; technology.  There are several open-source options available, and also robust commercial products that would serve up the volume you describe as a tiny snack.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1387872" ParentId="1342741" CreationDate="2009-09-07T06:43:18.427" OwnerUserId="38207" Tags="[]" Body="&amp;lt;p&amp;gt;It seems to me that what you want to do -- Query a large set of data in several different ways and order the results -- is exactly and precisely what RDBMeS were designed for.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;I doubt you would find any other datastore that would do this as well as a modern commercial DBMS (Oracle, SQLServer, DB2 etc.) or any opn source tool that would accomplish&#10;this any better than MySql.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;You could have a look at Googles BigTable, which is really a relational database but&#10;it can present an 'object'y personality to your program. Its exceptionaly good for free format text &#10;searches, and complex predicates. As the whole thing (at least the version you can download) is implemented in Python I doubt it would beat MySql in a query marathon.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1408093" ParentId="1245338" CreationDate="2009-09-10T22:39:12.707" OwnerUserId="20126" Tags="[]" Body="&amp;lt;p&amp;gt;Found this &amp;lt;a href=&amp;quot;http://www.25hoursaday.com/weblog/2009/09/10/BuildingScalableDatabasesDenormalizationTheNoSQLMovementAndDigg.aspx&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;nice article about no-sql&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;and this as well: &#10;&amp;lt;a href=&amp;quot;http://www.elasticsearch.com//blog/2010/02/25/nosql_yessearch.html&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;NoSQL, Yes Search&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1429406" ParentId="1342741" CreationDate="2009-09-15T20:21:08.323" OwnerUserId="133221" Tags="[]" Body="&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://couchdb.apache.org&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;CouchDB&amp;lt;/a&amp;gt; is schema-free, and it's fairly simple to retrieve a huge amount of data quickly, because you are working only with indexes.  You are not &amp;quot;querying&amp;quot; the database each time, you are retrieving only matching keys (which are pre-sorted making it even faster).  &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;quot;Views&amp;quot; are re-indexed everytime new data is entered into the database, but this takes place transparently to the user, so while there might be potential delay in generating an updated view, there will virtually never be any delay in retrieving results.  &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;I've just started to explore building an &amp;quot;activity stream&amp;quot; solution using CouchDB, and because the paradigm is different, my thinking about the process had to change from the SQL thinking.  &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Rather than figure out how to query the data I want and then process it on the page, I instead generate a view that keys all documents by date, so I can easily create multiple groups of data, just by using the appropriate date key, essentially running several queries simultaneously, but with no degradation in performance.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;This is ideal for activity streams, and I can isolate everything by date, or along with date isolation I can further filter results of a particular subtype, etc - by creating a view as needed, and because the view itself is just using javascript and all data in CouchDB is JSON, virtually everything can be done client-side to render your page.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1457656" ParentId="1436076" CreationDate="2009-09-22T01:01:52.763" OwnerUserId="41887" Tags="[]" Body="&amp;lt;p&amp;gt;This type of querying is not available through the 0.20.0 API. I'm not sure if there are any plans for it (I doubt it would appear anytime soon). You'll find some roadmap details on the HBase website that &amp;lt;em&amp;gt;might&amp;lt;/em&amp;gt; answer that question.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;You'll need to compute the answer in your own application (although I'd love to be proved wrong).&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1506162" ParentId="1436076" CreationDate="2009-10-01T20:08:08.833" OwnerUserId="27587" Tags="[]" Body="&amp;lt;p&amp;gt;The query as described is better suited to a relational database.  You can answer the query quickly, however, by precomputing the result.  For example, you might have a table where the key is the number of classes in common, and the cells are individual students that have key-many classes in common.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;You could use a variant on this to answer questions like &amp;quot;which students are in class X and class Y&amp;quot;: use the classes as pieces of the key (in alphabetical ordering, or something at least consistent), and again, each column is a student.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1512978" ParentId="1502735" CreationDate="2009-10-03T06:26:31.557" OwnerUserId="13724" Tags="[]" Body="&amp;lt;p&amp;gt;For me, the main thing is a decision whether to use the OrderedPartitioner or RandomPartitioner.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;If you use the RandomPartitioner, range scans are not possible. This means that you must know the exact key for any activity, INCLUDING CLEANING UP OLD DATA.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;So if you've got a lot of churn, unless you have some magic way of knowing exactly which keys you've inserted stuff for, using the random partitioner you can easily &amp;quot;lose&amp;quot; stuff, which causes a disc space leak and will eventually consume all storage.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;On the other hand, you can ask the ordered partitioner &amp;quot;what keys do I have in Column Family X between A and B&amp;quot; ? - and it'll tell you. You can then clean them up.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;However, there is a downside as well. As Cassandra doesn't do automatic load balancing, if you use the ordered partitioner, in all likelihood all your data will end up in just one or two nodes and none in the others, which means you'll waste resources.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;I don't have any easy answer for this, except you can get &amp;quot;best of both worlds&amp;quot; in some cases by putting a short hash value (of something you can enumerate easily from other data sources) on the beginning of your keys - for example a 16-bit hex hash of the user ID - which will give you 4 hex digits, followed by whatever the key is you really wanted to use.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Then if you had a list of recently-deleted users, you can just hash their IDs and range scan to clean up anything related to them.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;The next tricky bit is secondary indexes - Cassandra doesn't have any - so if you need to look up X by Y, you need to insert the data under both keys, or have a pointer. Likewise, these pointers may need to be cleaned up when the thing they point to doesn't exist, but there's no easy way of querying stuff on this basis, so your app needs to Just Remember.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;And application bugs may leave orphaned keys that you've forgotten about, and you'll have no way of easily detecting them, unless you write some garbage collector which periodically scans every single key in the db (this is going to take a while - but you can do it in chunks) to check for ones which aren't needed any more.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;None of this is based on real usage, just what I've figured out during research. We don't use Cassandra in production.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1515470" ParentId="1502735" CreationDate="2009-10-04T02:47:41.340" OwnerUserId="178678" Tags="[]" Body="&amp;lt;p&amp;gt;Another tutorial is: here &amp;lt;a href=&amp;quot;http://blog.evanweaver.com/articles/2009/07/06/up-and-running-with-cassandra/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://blog.evanweaver.com/articles/2009/07/06/up-and-running-with-cassandra/&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1528860" ParentId="1528827" CreationDate="2009-10-07T00:20:09.730" OwnerUserId="99967" Tags="[]" Body="&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://code.google.com/p/app-engine-site-creator/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;App Engine Site Creator&amp;lt;/a&amp;gt; &amp;quot;is designed to be a highly extensible and light weight content management system. It features a user-friendly content editing interface, a high degree of flexibility and customization, a file sharing mechanism, full support for page hierarchies, and fine-grained mechanisms for user management and access controls. It is built to run on Google App Engine and to scale well with minimal engineering maintenance.&amp;quot;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;I haven't used it, but I think it at least claims to be what you want.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1529134" ParentId="1528827" CreationDate="2009-10-07T02:01:17.873" OwnerUserId="125525" Tags="[]" Body="&amp;lt;p&amp;gt;What you will find is that whilst the database itself is the reason for a slow performing site, you need to think about the site itself as a whole.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;CMS systems use a database to store the content of pages simply so that they are easily editable. In high traffic scenarios, there is absolutely no appreciable change in content from one user to the next.&#10;As such, most CMS systems also provide caching mechanisms to overcome the load required to interact with a database. A typical flowchart of this is in action is:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;1. Is the page already cached in memory/disk?&#10;2. If already cached, goto step 5.&#10;3. If not, access the database and format the page.&#10;4. Store the page to memory/disk.&#10;5. retrieve that page from memory/disk.&#10;6. serve the page.&#10;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Obviously, things get a little tricky if you want to show custom login details on the page. However, by using a judicial balance of reducing database load, caching all/some parts of the page, the effect of being slashdotted/digged can be reduced significantly.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Don't forget that you can also specify cache header (Cache-Control) information in your returned pages so that the same user returning to the page can reuse previously sent information. See this &amp;lt;a href=&amp;quot;http://www.web-caching.com/mnot%5Ftutorial/how.html&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;link&amp;lt;/a&amp;gt; for some information.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;So, to answer your question. The best way to reduce database issues in high traffic scenarios, it's best not to use the database at all :)&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1543990" ParentId="1543965" CreationDate="2009-10-09T14:05:31.860" OwnerUserId="71883" Tags="[]" Body="&amp;lt;p&amp;gt;The community based opensource.net driver for mongodb works quite nice and is really fast. It can be found on the mongodb homepage&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1544012" ParentId="1543965" CreationDate="2009-10-09T14:08:18.433" OwnerUserId="37020" Tags="[]" Body="&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://msdn.microsoft.com/en-us/data/cc655792.aspx&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Microsoft &amp;quot;Velocity&amp;quot;&amp;lt;/a&amp;gt; does this (also a link to &amp;lt;a href=&amp;quot;http://blogs.msdn.com/velocity/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;their blog&amp;lt;/a&amp;gt;), but is still in community technology preview (i.e. &amp;quot;beta&amp;quot;).&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Other projects, like memcached, have .NET APIs.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1544086" ParentId="1543965" CreationDate="2009-10-09T14:22:26.927" OwnerUserId="97572" Tags="[]" Body="&amp;lt;p&amp;gt;Community supported C# driver for &amp;lt;a href=&amp;quot;http://www.mongodb.org/display/DOCS/Drivers&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;mongodb&amp;lt;/a&amp;gt; avaiable in &amp;lt;a href=&amp;quot;http://github.com/samus/mongodb-csharp&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;github&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;And another promising key value store is &amp;lt;a href=&amp;quot;http://www.hypertable.org/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;hyphertable&amp;lt;/a&amp;gt;. You can access this through c# thrift client. You can get it &amp;lt;a href=&amp;quot;http://wiki.apache.org/thrift/ThriftUsageC%23&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;here&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;I dont have any working experience with thrift clients. So you can clarify it in hyphertable forum..&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Cheers&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Ramesh Vel&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1545529" ParentId="1543965" CreationDate="2009-10-09T19:02:12.090" OwnerUserId="71883" Tags="[]" Body="&amp;lt;p&amp;gt;there is a memcachedb which is persistent, and also the tokyo cabinet which is persistent (and supposedly very fast). Both are compatible with the memcache protocol sot you can use their drivers for .net&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1595672" ParentId="1595562" CreationDate="2009-10-20T15:56:52.920" OwnerUserId="102937" Tags="[]" Body="&amp;lt;p&amp;gt;Project Voldermort is part of the &amp;lt;a href=&amp;quot;http://en.wikipedia.org/wiki/Nosql&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;NoSQL&amp;lt;/a&amp;gt; movement.  Trends in computer architectures are pressing databases in a direction that requires horizontal scalability. NOSQL attempts to address this requirement.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Among the claimed benefits of such Key/Value stores is the ability to blow through enormous amounts of data without the overhead of a traditional RDBMS.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://www.computerworld.com/s/article/9135086/No%5Fto%5FSQL%5FAnti%5Fdatabase%5Fmovement%5Fgains%5Fsteam%5F&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://www.computerworld.com/s/article/9135086/No_to_SQL_Anti_database_movement_gains_steam_&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1604444" ParentId="1604025" CreationDate="2009-10-22T00:43:12.217" OwnerUserId="111332" Tags="[]" Body="&amp;lt;p&amp;gt;MongoDB doesn't use magic strings, but uses query documents to represent queries. There is also an &amp;lt;a href=&amp;quot;http://github.com/samus/mongodb-csharp&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;open source C# driver&amp;lt;/a&amp;gt; available. I'm not sure of the specifics of the C# driver, but it should be relatively easy to add a validation layer on top of it if one doesn't exist already. There are similar projects on top of the drivers in Python and Ruby, for example.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1604801" ParentId="1604025" CreationDate="2009-10-22T03:02:50.387" OwnerUserId="179972" Tags="[]" Body="&amp;lt;p&amp;gt;You can connect to text files using ADO.NET and read/write them using SQL syntax and Commands issued through ADO.NET. &amp;lt;a href=&amp;quot;http://www.c-sharpcorner.com/UploadFile/mgold/ConnectODBCText11262005070206AM/ConnectODBCText.aspx&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;There's an example in this article&amp;lt;/a&amp;gt;. Your data will be stored in human-readable format in comma- or tab-delimited record format. Of course it won't be fast with large data sets.&#10;I'm unsure if you're trying to get away from both SQL databases and SQL syntax. The text file solutions is queryable by SQL.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;You can also do the same with Excel spreadsheets by treating them like SQL data sources (even though they're not) through ADO.NET access.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1655701" ParentId="1604025" CreationDate="2009-10-31T21:40:14.833" OwnerUserId="149270" Tags="[]" Body="&amp;lt;p&amp;gt;Not sure if it is what you are looking for but you could try &amp;lt;a href=&amp;quot;http://www.db4o.com/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://www.db4o.com/&amp;lt;/a&amp;gt; I've never used it myself but it may help you&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1684143" ParentId="1502735" CreationDate="2009-11-05T22:36:52.260" OwnerUserId="204234" Tags="[]" Body="&amp;lt;blockquote&amp;gt;&#10;  &amp;lt;p&amp;gt;Are there any deal breaks for you?&#10;  Not necessarily deal breakers but something to be aware of &amp;lt;/p&amp;gt;&#10;&amp;lt;/blockquote&amp;gt;&#10;&#10;&amp;lt;ol&amp;gt;&#10;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;A client connects to a nearest node, which address it should know beforehand, all communications with all other Cassandra nodes proxied through it.&#10;a. read/write traffic is not evenly distributed among nodes - some nodes proxy more data than they host themselves&#10;b. Should the node go down, the client is helpless, can&#x2019;t read, can&#x2019;t write anywhere in the cluster.&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;Although Cassandra claims that &#x201C;writes never fail&#x201D; they do fail, at least at the moment of speaking they do. Should the target data node become sluggish, request times out and write fails. There are many reason for a node to become unresponsive: garbage collector kicks in, compaction process, whatever&#x2026;&#10;In all such cases all write/read request fail. In a conventional database these requests would have become proportionally slow, but in Cassandra they just fail.&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;There is multi-get but there is no multi-delete and one can&#x2019;t truncate ColumnFamily either&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;Should a new, empty data node enter the cluster, portion of data from one neighbor nodes on the key-ring will be transfered only. This leads to uneven data distribution and uneven load. You can fix it by always doubling number of nodes.One should also keep track on tokens manually and select them wisely.&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&#10;&amp;lt;/ol&amp;gt;&#10;"/>
  <row Id="1690853" ParentId="1604025" CreationDate="2009-11-06T22:16:13.557" OwnerUserId="2351" Tags="[]" Body="&amp;lt;p&amp;gt;I'm the principle author behind the .Net driver for Mongo.  There isn't currently a ORM like mapper for it yet.  Instead it works on simple documents that are the equivalent of a dictionary.  It wouldn't be hard to use reflection to iterate over the fields in a document and assign them to properties on an object.  I've written a simple thing like that for LDAP results in the past.  You don't have to worry about sql injection with Mongo as there really isn't a query language that gets parsed.  All drivers talk to Mongo in its native tongue.  There is some potential if you dynamically generate javascript and send it to the DB but the need for that should mostly be rare.  If you have any questions about using the driver feel free to post them to the Google Group or send a message through GitHub.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1708336" ParentId="1700827" CreationDate="2009-11-10T14:22:54.787" OwnerUserId="111332" Tags="[]" Body="&amp;lt;p&amp;gt;There's no great way to represent this query yet (as of 1.1.2) - if you ask on the list or file a feature request we can try to get something cooked up.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;For now the best bet is probably to use an $in query to do half of the work:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;db.test.find({keys: {$in: Keys1}})&amp;lt;/code&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;You can do this in combination with a $where which can do the Keys2 part (but won't take advantage of an index - that's why it is good to do as much as possible with the regular query syntax). This would look something like this:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;db.test.find({keys: {$in: Keys1}, $where: &amp;quot;for (i in this.keys) { for (j in Keys2) { if (this.keys[i] == Keys2[j]) return true;}} return false;&amp;quot;})&amp;lt;/code&amp;gt;&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1737014" ParentId="1736840" CreationDate="2009-11-15T08:46:42.873" OwnerUserId="146325" Tags="[]" Body="&amp;lt;p&amp;gt;I presume you are meaning products such as Couch DB or Tokyo Cabinet (rather than ECM products like Documentum).  I think the attraction for many developers is familiarity.  &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Firstly, the conceptual model (in most cases) is key-value pairs, like a configuration file.  As most frameworks seem to require a lot of configuration-wrangling, front-end/middle tier developers are comfortable with that way of working working.  Secondly, these tools offer interfaces in developer-friendly languages like Java, Python, etc.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Whereas, traditional RDBMS products require thinking in a different fashion - relationally.  And they require learning not just a weird language, SQL, but a new way of programming: set-based rather than procedural.  If you rehearse the arguments for putting business logic in the middle tier rather stored procedures in the database, well a lot of them apply to No SQL as well.   &amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1737029" ParentId="1736840" CreationDate="2009-11-15T08:55:37.587" OwnerUserId="13447" Tags="[]" Body="&amp;lt;p&amp;gt;I enjoyed listening to the &amp;lt;a href=&amp;quot;http://twit.tv/floss36&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;floss weekly episode&amp;lt;/a&amp;gt; about CouchDB. Lots of reasoning and ideas there. &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Prior to listening, most of the stuff I read about this topic triggered not much insight (for me). Listening to people talking and reasoning about why&amp;amp;#38;amp;where you want to use document-oriented DBs helped me a lot to really get the concepts, reasoning, pros and cons. Now all the articles and statements (IMHO) suddenly make a lot more sense. &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Your mileage may vary, but this helped me a lot.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1744506" ParentId="1740882" CreationDate="2009-11-16T20:00:43.123" OwnerUserId="188094" Tags="[]" Body="&amp;lt;p&amp;gt;Try using low-level datastore API, with the item ID as a key and &amp;quot;friends&amp;quot; IDs as property names (property value is true or false in this case). I think that lookup with a key filter  must be quite fast.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1777166" ParentId="1777103" CreationDate="2009-11-21T23:40:45.567" OwnerUserId="62368" Tags="[]" Body="&amp;lt;p&amp;gt;I guess you mean non-&amp;lt;a href=&amp;quot;http://en.wikipedia.org/wiki/Relational%5Fdatabase%5Fmanagement%5Fsystem&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;RDBMS&amp;lt;/a&amp;gt;? If so take a look at &amp;lt;a href=&amp;quot;http://www.db4o.com/about/productinformation/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;db4o&amp;lt;/a&amp;gt;. It's object-based, easy, works with LINQ and it's open source.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1777181" ParentId="1777103" CreationDate="2009-11-21T23:45:17.167" OwnerUserId="200872" Tags="[]" Body="&amp;lt;p&amp;gt;You might want to check Ayende's Rhino.DHT:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://github.com/ayende/rhino-dht&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://github.com/ayende/rhino-dht&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://ayende.com/Blog/category/555.aspx&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://ayende.com/Blog/category/555.aspx&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;or the rather new MS project - Velocity:&#10;&amp;lt;a href=&amp;quot;http://www.google.com/search?rlz=1C1CHMB%5FplPL350PL350&amp;amp;#38;amp;sourceid=chrome&amp;amp;#38;amp;ie=UTF-8&amp;amp;#38;amp;q=microsoft+velocity&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://www.google.com/search?rlz=1C1CHMB_plPL350PL350&amp;amp;#38;amp;sourceid=chrome&amp;amp;#38;amp;ie=UTF-8&amp;amp;#38;amp;q=microsoft+velocity&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1777263" ParentId="1777103" CreationDate="2009-11-22T00:13:45.800" OwnerUserId="12968" Tags="[]" Body="&amp;lt;p&amp;gt;You don't state what your requirements are (i.e. has to run on Windows), so I'll throw out the 2 that I've used successfully.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://www.mongodb.org/display/DOCS/Home&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;MongoDB&amp;lt;/a&amp;gt; is a document database that has prebuilt binaries for 32bit and 64bit Windows.  That's always a nice thing to see.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Client access can be done with &amp;lt;a href=&amp;quot;http://github.com/samus/mongodb-csharp/tree/master&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;this driver&amp;lt;/a&amp;gt;.  It isn't an official client from the MongoDB team itself, but I've used it.  And in my usage, it has supported what I need.  There is some &amp;lt;a href=&amp;quot;http://github.com/samus/mongodb-csharp/tree/master/MongoDB.Linq/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;LINQ stuff in the repo&amp;lt;/a&amp;gt;, but I haven't tried it.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;// from the wiki&#10;using MongoDB.Driver; &#10;Mongo db = new Mongo(); &#10;db.Connect(); //Connect to localhost on the default port. &#10;Document query = new Document(); &#10;query[&amp;quot;field1&amp;quot;] = 10; &#10;Document result = db[&amp;quot;tests&amp;quot;][&amp;quot;reads&amp;quot;].FindOne(query); &#10;db.Disconnect();&#10;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;I was able to run both client and server on Windows with no problems.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://couchdb.apache.org/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;CouchDB&amp;lt;/a&amp;gt; is an option as well.  There are some native .NET clients, but all of CouchDB is done with REST.  So HttpWebRequest/Response will serve you well here.  A &amp;lt;a href=&amp;quot;http://abdullin.com/journal/2009/7/24/couchdb-in-the-cloud-persisting-from-net-code.html&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;blog post by Rinat Abdullin&amp;lt;/a&amp;gt; shows how some of the pieces fit together.  There is also &amp;lt;a href=&amp;quot;http://code.google.com/p/couchbrowse/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;CouchBrowse&amp;lt;/a&amp;gt;.  I've never used a native client.  GET/PUT/POST have worked very well for me.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;I got CouchDB to work on Windows (it's written in Erlang), but my performance testing showed that Linux was faster.  My guess is maybe in how Erlang itself is implemented?  I dunno.  But it runs on both Windows and Linux.  And I was able to call the Linux instance from Windows easily (it's just REST).&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;This next one I've never tried, but I've got a friend who is a committer on the &amp;lt;a href=&amp;quot;http://hadoop.apache.org/hbase/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;HBase project&amp;lt;/a&amp;gt;.  And he thinks that the &amp;lt;a href=&amp;quot;http://wiki.apache.org/hadoop/Hbase/ThriftApi&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Thrift interface to HBase&amp;lt;/a&amp;gt; should be usable from .NET (since &amp;lt;a href=&amp;quot;http://incubator.apache.org/thrift/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Thrift&amp;lt;/a&amp;gt; will generate C#).  The big thing here is the fact that Hadoop/HBase are focused more on *nix environments.  But there is no reason you couldn't run HBase on a Linux cluster and connect to it from .NET on Windows for production.  For development, you can run HBase on Windows using Cygwin.  A good set of instructions on how to do this is &amp;lt;a href=&amp;quot;http://hadoop.apache.org/hbase/docs/r0.20.2/cygwin.html&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;here&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;There are others (Valdemort, Cassandra, etc.) but I have no real experience with them so I won't pretend to say how they integrate with C#/.NET.  The big thing to look at is what their API looks like - if it has a Thrift interface, REST, etc. you should be able to connect to them with no problems.  You might not be able to run the NoSQL Service on Windows OS as efficiently as Linux, but maybe that isn't a big deal.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;EDIT&amp;lt;/strong&amp;gt; Changed that there are some native CouchDB clients.  I'm not familiar with them as I always use raw HTTP and my own little wrapper classes.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1778782" ParentId="1778763" CreationDate="2009-11-22T14:00:20.190" OwnerUserId="67585" Tags="[]" Body="&amp;lt;p&amp;gt;The &amp;lt;a href=&amp;quot;http://martinfowler.com/eaaCatalog/repository.html&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Repository-pattern&amp;lt;/a&amp;gt; is a well-known and widespread pattern to map you DAL to you domain-layer.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1778885" ParentId="1778763" CreationDate="2009-11-22T14:44:40.440" OwnerUserId="170034" Tags="[]" Body="&amp;lt;p&amp;gt;Hello,&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;In addition to the Repository pattern proposed by cwap, you should also look at the Data Mapper pattern. (&amp;lt;a href=&amp;quot;http://martinfowler.com/eaaCatalog/dataMapper.html&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Data Mapper&amp;lt;/a&amp;gt;). From my understanding, both work together. Repository relies on the Data Mapper when it comes to write or read the object to the database (or other persistance media). It is the data mapper that deals with the specific persistance technology. The Repository on the other hand can remain unchanged even if the repository changes.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1786655" ParentId="1543965" CreationDate="2009-11-23T22:58:11.177" OwnerUserId="12748" Tags="[]" Body="&amp;lt;p&amp;gt;CouchDB is well regarded and &amp;lt;a href=&amp;quot;http://stackoverflow.com/questions/1050152/use-couchdb-with-net&amp;quot;&amp;gt;accessible via .Net&amp;lt;/a&amp;gt; albeit not that pleasant to install on windows still.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Thrift api compatible servers like &amp;lt;a href=&amp;quot;http://wiki.apache.org/cassandra/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;cassandra&amp;lt;/a&amp;gt; will talk &amp;lt;a href=&amp;quot;http://svn.apache.org/viewvc/incubator/thrift/trunk/lib/csharp/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;.Net&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://1978th.net/tokyocabinet/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Tokyo Cabinet&amp;lt;/a&amp;gt; can be simply accessed by the (apparently) full &amp;lt;a href=&amp;quot;http://tokyotyrant.codeplex.com/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;.Net port of Tokyo Tyrant&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://www.mongodb.org&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;MongoDB&amp;lt;/a&amp;gt; has &amp;lt;a href=&amp;quot;http://www.mongodb.org/display/DOCS/Drivers&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;several .Net api options&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;I would suggest that indicating whether sharding (or other horizontal scaling capabilities) are more or less important that some level of consistency in your persistent store since all of the above trade off the consistency for low latency and good scalability in some way or another.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1799987" ParentId="1799958" CreationDate="2009-11-25T21:13:28.923" OwnerUserId="51233" Tags="[]" Body="&amp;lt;p&amp;gt;Looks like the riak source has several bash start scripts. You would have to convert those to a windows batch script equivalent. That could be a fairly interesting chore given how limited batch scripts are. Those start-*.sh files show how to start it up though so I'd start there.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;The &amp;lt;a href=&amp;quot;http://hg.basho.com/riak/src/tip/README&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://hg.basho.com/riak/src/tip/README&amp;lt;/a&amp;gt; Readme file has futher info on what each script does.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1813745" ParentId="1813612" CreationDate="2009-11-28T20:47:07.223" OwnerUserId="2140" Tags="[]" Body="&amp;lt;p&amp;gt;If you go with CouchDB, you can use &amp;lt;a href=&amp;quot;http://github.com/couchapp/couchapp&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;CouchApp&amp;lt;/a&amp;gt; which is a set of scripts for deploying an application directly to a CouchDB database. In essence, you skip the middleware and use CouchDB's views, lists, and show functions along with clientside JavaScript to implement the whole app. If your app works in this architecture, it's surprisingly refreshing, simple and cool. &amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1815932" ParentId="1815731" CreationDate="2009-11-29T16:13:44.370" OwnerUserId="199201" Tags="[]" Body="&amp;lt;p&amp;gt;Ok, you haven given a normalized data model as you would do in an SQL setup.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;In my understanding you don't do this in MongoDB. You could store references, but you do not for performance reasons in the general case.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;I'm not an expert in the NoSQL area in no way, but why don't you simply follow your needs and store the user (ids) that have voted for a story in the stories collection and the story (ids) a user has voted for in the users collection?&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1815943" ParentId="1815731" CreationDate="2009-11-29T16:18:33.623" OwnerUserId="111332" Tags="[]" Body="&amp;lt;p&amp;gt;I would suggest storing votes as a list of story &amp;lt;code&amp;gt;_id&amp;lt;/code&amp;gt;s in each user. That way you can find out what stories a user has voted for just by looking at the list. To get the users who have voted for a story you can do something like:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;db.users.find({stories: story_id})&amp;lt;/code&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;where &amp;lt;code&amp;gt;story_id&amp;lt;/code&amp;gt; is the &amp;lt;code&amp;gt;_id&amp;lt;/code&amp;gt; of the story in question. If you create an index on the &amp;lt;code&amp;gt;stories&amp;lt;/code&amp;gt; field both of those queries will be fast.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1816191" ParentId="1815731" CreationDate="2009-11-29T17:50:12.903" OwnerUserId="32797" Tags="[]" Body="&amp;lt;p&amp;gt;In CouchDB this is very simple. One view emits:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;function(doc) {&#10; if(doc.type == &amp;quot;vote&amp;quot;) {&#10;   emit(doc.story_id, doc.user_id);&#10; }&#10;}&#10;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Another view emits:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;function(doc) {&#10; if(doc.type == &amp;quot;vote&amp;quot;) {&#10;   emit(doc.user_id, doc.story_id);&#10; }&#10;}&#10;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Both are queries extremely fast since there is no join. If you do need user data or story data, CouchDB supports multi-document fetch. Also quite fast and is one way to do a &amp;quot;join&amp;quot;.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1823472" ParentId="1822444" CreationDate="2009-12-01T01:21:49.077" OwnerUserId="32797" Tags="[]" Body="&amp;lt;p&amp;gt;Your approach is fine. Using CouchDB doesn't mean you'll just abandon relational modeling. You will need need to run two queries but that's because this is a &amp;quot;join&amp;quot;. SQL queries with joins are also slow but the SQL syntax lets you express the query in one statement.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;In my few months of experience with CouchDB this is what I've discovered:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;ol&amp;gt;&#10;&amp;lt;li&amp;gt;No schema, so designing the application models is fast and flexible&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;CRUD is there, so developing your application is fast and flexible&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;Goodbye SQL injection&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;What would be a SQL join takes a little bit more work in CouchDB&amp;lt;/li&amp;gt;&#10;&amp;lt;/ol&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Depending on your needs I've found that couchdb-lucene is also useful for building more complex queries.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1823549" ParentId="1823536" CreationDate="2009-12-01T01:53:15.083" OwnerUserId="79914" Tags="[]" Body="&amp;lt;p&amp;gt;SQL-subsets like GQL obviously still concern themselves with it -- but pure non-SQL databases like CouchDB, Voldemort, etc should put &amp;amp;#38;amp; get data without concern for SQL-injection-style attacks.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;That however does not excuse you from doing content validation, because while it might not break the database, it may break your application and allow things like XSS (if it is a web app).&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1823567" ParentId="1823536" CreationDate="2009-12-01T01:58:30.593" OwnerUserId="213421" Tags="[]" Body="&amp;lt;p&amp;gt;Anytime data that is from or manipulated by user input is used to control the execution of code, there needs to be sanitization.  I've seen cases where code used user input to execute a command without sanitizing the input.  It hadn't been exploited, but if it had been it would have been a horrible attack vector.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1823568" ParentId="1823536" CreationDate="2009-12-01T01:58:38.083" OwnerUserId="55164" Tags="[]" Body="&amp;lt;p&amp;gt;SQl Injection is only a subset of a type of security flaw in which any uncontrolled input gets evaluated.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;techincally, you could &amp;quot;inject&amp;quot; javascript, among others.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1823603" ParentId="1823536" CreationDate="2009-12-01T02:11:43.767" OwnerUserId="18936" Tags="[]" Body="&amp;lt;p&amp;gt;&#x201C;Injection&#x201D; holes are to do with text context mismatches. Every time you put a text string into another context of string you need to do encoding to fit the changed context. It seems seductively simple to blindly stuff strings together, but the difficulty of string processing is deceptive.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Databases with a purely object-based interface are immune to injection vulnerabilities, just like parameterised queries are in SQL. There is nothing an attacker can put in his string to break out of the string literal context in which you've put him.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;But GQL specifically is not one of these. It's a string query language, and if you go concatenating untrusted unescaped material into a query like &amp;lt;code&amp;gt;&amp;quot;WHERE title='%s'&amp;quot; % title&amp;lt;/code&amp;gt;, you're just as vulnerable as you were with full-on SQL. Maybe the limited capabilities of GQL make it more difficult to exploit that to completely compromise the application, but certainly not impossible in general, and in the very best case your application is still wrong and will fall over when people try to legitimately use apostrophes.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;GQL has a parameter binding interface. Use it. Resist the allure of string hacking.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1823804" ParentId="1822444" CreationDate="2009-12-01T03:25:00.453" OwnerUserId="53529" Tags="[]" Body="&amp;lt;p&amp;gt;I cross-posted this question to the &amp;lt;a href=&amp;quot;http://couchdb.apache.org/community/lists.html&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;couchdb users mailing list&amp;lt;/a&amp;gt; and Nathan Stott &amp;lt;a href=&amp;quot;http://markmail.org/message/vsvwyz4rccc33jox&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;pointed me to&amp;lt;/a&amp;gt; a &amp;lt;a href=&amp;quot;http://www.cmlenz.net/archives/2007/10/couchdb-joins&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;very helpful blog post&amp;lt;/a&amp;gt; by Christopher Lenz&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1823934" ParentId="1823924" CreationDate="2009-12-01T04:05:37.437" OwnerUserId="15124" Tags="[]" Body="&amp;lt;p&amp;gt;A great article about NOSQL patterns is found here:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://horicky.blogspot.com/2009/11/nosql-patterns.html&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://horicky.blogspot.com/2009/11/nosql-patterns.html&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;covers&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;ul&amp;gt;&#10;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;API model&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;Machines layout&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;Data partitioning (Consistent&#10;Hashing)&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;Data replication&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;Membership Changes&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;Client Consistency&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;Master Slave (or Single Master) Model&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;Multi-Master (or No Master) Model&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;Quorum Based 2PC&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;Vector Clock&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;State Transfer Model&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;Operation Transfer Model&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;Map Reduce Execution&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;Handling Deletes&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;Storage Implementation&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&#10;&amp;lt;/ul&amp;gt;&#10;"/>
  <row Id="1841979" ParentId="1841883" CreationDate="2009-12-03T18:40:03.713" OwnerUserId="2114" Tags="[]" Body="&amp;lt;p&amp;gt;The section about View Indexes in the &amp;lt;a href=&amp;quot;http://couchdb.apache.org/docs/overview.html&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Technical Overview&amp;lt;/a&amp;gt; is a great guide to this.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;blockquote&amp;gt;The view builder uses the database sequence ID to determine if the view group is fully up-to-date with the database. If not, the view engine examines the all database documents (in packed sequential order) changed since the last refresh. Documents are read in the order they occur in the disk file, reducing the frequency and cost of disk head seeks.&amp;lt;/blockquote&amp;gt;&#10;&#10;&amp;lt;blockquote&amp;gt;As documents are examined, their previous row values are removed from the view indexes, if they exist. If the document is selected by a view function, the function results are inserted into the view as a new row.&amp;lt;/blockquote&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;CouchDB first checks to see if &amp;lt;em&amp;gt;anything&amp;lt;/em&amp;gt; has changed in the entire database using a sequence id (that gets updated whenever there's a change to any document in the database). If something has changed it goes looking for those documents and runs the map function on them.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;There really shouldn't be any need to rebuild/regenerate your views since it will incrementally refresh as you modify your documents (note that it won't update the view until you use it though). With hat said one way (and I'm sure there's a better way) would be to remove the design document describing the view and insert it again seeing as a design document is no different (almost) from a normal document.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1852372" ParentId="1849204" CreationDate="2009-12-05T14:44:35.613" OwnerUserId="130168" Tags="[]" Body="&amp;lt;p&amp;gt;Anecdotally: yes, Twitter, Digg, Ooyala, SimpleGeo, Mahalo, and others are using or moving to Cassandra for a primary data store (&amp;lt;a href=&amp;quot;http://n2.nabble.com/Cassandra-users-survey-td4040068.html&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://n2.nabble.com/Cassandra-users-survey-td4040068.html&amp;lt;/a&amp;gt;).&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Technically: yes; besides supporting replication (including to multiple datacenters), each Cassandra node has an fsync'd commit log to make sure writes are durable; from there writes are turned into SSTables which are immutable until compaction (which combines multiple SSTables to GC old versions).  Snapshotting is supported at any time, including automatic snapshot-before-compaction.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1855610" ParentId="1853735" CreationDate="2009-12-06T15:01:39.590" OwnerUserId="164255" Tags="[]" Body="&amp;lt;p&amp;gt;I think there is no perfect solution - depends on what operations are more important for your app. I believe Silicon Alley Insider stores comments nested with MongoDB for example. That does make the query you mention harder.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;One option is store at top-level in the post a list of all commenters in an array. Think of that as denormalized data. Then one can easily find all posts which involve a certain commenter. Then to drill down, you use map/reduce or db.eval() to get the nested post info within.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;One other note - if you are dealing with a single document, db.eval() is probably lighter-weight than map/reduce. $where is also an option but can be slow so I like the additional 'list of commenters' mentioned above - not it is also easy to index that array too (see 'Multikey' in the docs).&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;See also:&#10;&amp;lt;a href=&amp;quot;http://groups.google.com/group/mongodb-user/browse%5Fthread/thread/df8250573c91f75a/e880d9c57e343b52?lnk=gst&amp;amp;#38;amp;q=trees#e880d9c57e343b52&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://groups.google.com/group/mongodb-user/browse%5Fthread/thread/df8250573c91f75a/e880d9c57e343b52?lnk=gst&amp;amp;#38;amp;q=trees#e880d9c57e343b52&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1879118" ParentId="1839218" CreationDate="2009-12-10T06:53:02.203" OwnerUserId="170692" Tags="[]" Body="&amp;lt;p&amp;gt;Hi,&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;SimpleDB can only scale by sharding, has 10 GB data size limit per table, and query performance is parallel to record count (eg: poor if you have 1 million records). And google's datastore is slower than simpledb. Cassandra is much more scalable, high traffic sites began to use it, there is nothing better for free if you need high write rates with massive data. &amp;lt;a href=&amp;quot;http://n2.nabble.com/Cassandra-users-survey-td4040068.html&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;cassandra survey&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;If your read/write ratio is something like %90 for read and %10 for write, then terracotta  or infinispan with postgres is a better fit. There some free clustering options for postgresql but none of them matured (mostly prototypes).&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Another option is sharding. Hiberntae and NHibernate has sharding support. You can use them with postgres or mysql but you loose joins.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Regards&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1886658" ParentId="1886650" CreationDate="2009-12-11T08:40:39.697" OwnerUserId="47680" Tags="[]" Body="&amp;lt;p&amp;gt;Umm, &amp;lt;a href=&amp;quot;http://memcached.org/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;memcached&amp;lt;/a&amp;gt;?&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1886659" ParentId="1886650" CreationDate="2009-12-11T08:41:49.507" OwnerUserId="71883" Tags="[]" Body="&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://www.oracle.com/database/berkeley-db/index.html&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;BerkeleyDB&amp;lt;/a&amp;gt; is backed by Oracle&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Using the native C interface one can reach close to 1 million read requests per second.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;By the way, when you say thousands requests per minute, any 'normal' DB should be able to handle that easily too.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1886679" ParentId="1886650" CreationDate="2009-12-11T08:47:30.947" OwnerUserId="124894" Tags="[]" Body="&amp;lt;p&amp;gt;I think the NoSQL systems are an excellent choice if I you 'only' care about speed and service time (and not or less about stuff like consistency and transactions). Facebook uses Cassandra. &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;quot;Cassandra is used in Facebook as an email search system containing 25TB and over 100m mailboxes.&amp;quot; &amp;lt;a href=&amp;quot;http://highscalability.com/product-facebooks-cassandra-massive-distributed-store&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://highscalability.com/product-facebooks-cassandra-massive-distributed-store&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;I think CouchDb isn't really speedy, maybe you can use MongoDB: &amp;lt;a href=&amp;quot;http://www.mongodb.org/display/DOCS/Production+Deployments&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://www.mongodb.org/display/DOCS/Production+Deployments&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1886912" ParentId="1813612" CreationDate="2009-12-11T09:39:46.500" OwnerUserId="2108" Tags="[]" Body="&amp;lt;ol&amp;gt;&#10;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;Pick whichever middleware you are most comfortable with. &amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://github.com/couchapp/couchapp&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;CouchApp&amp;lt;/a&amp;gt; is very experimental at the moment. The main issue is being able to add security to your app without having a standard HTTP pop-up box. This is obviously a big issue for standard web apps.&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;Try and avoid parsing each DB request in the middleware and rebuilding the query for couchdb. You can make your middleware act like a proxy so most requests are forwarded on without modification. You can also add a security layer in the middlelayer on top of all requests that need authentication.&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;Pick a middleware/framework with good URL routing capabilities. For example you could route all requests that go to mydomain.com/db/ to couchdb.&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&#10;&amp;lt;/ol&amp;gt;&#10;"/>
  <row Id="1888750" ParentId="1886650" CreationDate="2009-12-11T15:20:50.903" OwnerUserId="130168" Tags="[]" Body="&amp;lt;p&amp;gt;Cassandra handles thousands of requests (including write-mostly workloads) per &amp;lt;em&amp;gt;second&amp;lt;/em&amp;gt;, per machine, and its scaling-by-adding-machines has been there since day 1.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Here is a thread about Cassandra use in production and in-production-soon at dozens of companies: &amp;lt;a href=&amp;quot;http://n2.nabble.com/Cassandra-users-survey-td4040068.html#a4040068&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://n2.nabble.com/Cassandra-users-survey-td4040068.html#a4040068&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;We're also adding more docs all the time, like &amp;lt;a href=&amp;quot;http://wiki.apache.org/cassandra/Operations&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://wiki.apache.org/cassandra/Operations&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1893485" ParentId="1886650" CreationDate="2009-12-12T13:47:39.340" OwnerUserId="142017" Tags="[]" Body="&amp;lt;p&amp;gt;Also worth consideration is using a traditional RDBMS like MySQL to store schema-less.  This method gives you the stability of a proven database server like MySQL with the flexibility a NoSQL solution.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Check out &amp;lt;a href=&amp;quot;http://bret.appspot.com/entry/how-friendfeed-uses-mysql&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;this&amp;lt;/a&amp;gt; blog posting on how &amp;lt;a href=&amp;quot;http://friendfeed.com/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;FriendFeed&amp;lt;/a&amp;gt; does this.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1900810" ParentId="1899843" CreationDate="2009-12-14T13:03:31.877" OwnerUserId="19636" Tags="[]" Body="&amp;lt;p&amp;gt;The relationships in the Google App Engine are only keys to entities that are automatically de-referenced when accessed in code.  And are only values when used to filter against.  Its a function of the DB Api rather than anything explicit, so the access to the ReferenceProperty will simply perform a query against the referenced model to get access to the object.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;If you look at something like MongoDB, the relationships are stored in-object (from what I remeber), but they can also be stored however you want in the sense that you would create an API that would search the joined table for your item in the relationship in a similar manner to who the App Engine works.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Paul.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1902758" ParentId="1899843" CreationDate="2009-12-14T18:51:18.727" OwnerUserId="36710" Tags="[]" Body="&amp;lt;p&amp;gt;It belongs to the core features of &amp;lt;strong&amp;gt;graph databases&amp;lt;/strong&amp;gt; to provide support for relationships between entities. Typically, you model your entities as nodes and the relationships as relationships/edges in the graph. Unlike &amp;lt;a href=&amp;quot;http://en.wikipedia.org/wiki/Relational%5Fdatabase%5Fmanagement%5Fsystem&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;RDBMS&amp;lt;/a&amp;gt; you don't have to define relationships in advance -- just add them to the graph as needed (schema-free). I created a &amp;lt;a href=&amp;quot;http://wiki.neo4j.org/content/Domain%5FModeling%5FGallery&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;domain modeling gallery&amp;lt;/a&amp;gt; giving a few examples of how this can look in practice. The examples use the Neo4j graphdb, a project I'm involved in. The &amp;lt;a href=&amp;quot;http://neo4j.org/community/list/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;mailing list&amp;lt;/a&amp;gt; of this project use to prove very helpful for graph modeling questions.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;The document-oriented database &amp;lt;a href=&amp;quot;http://riak.basho.com/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Riak&amp;lt;/a&amp;gt; has support for links between documents.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;You can add support for relationships on top of any database engine (like key/value), but it doesn't come whithout work. It all comes down to your use case. If you provide more details it's easier to come up with a useful answer.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Oops, now I saw that the title says &amp;quot;nosql store&amp;quot; and then your actual question narrows this down to &amp;quot;nosql key value store&amp;quot;. As key/value stores have no semantics for defining relationships between entities I'll still post my answer.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1909186" ParentId="1909110" CreationDate="2009-12-15T17:52:29.953" OwnerUserId="3408" Tags="[]" Body="&amp;lt;p&amp;gt;Probably because it's well promoted and quite good at what it does.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1909193" ParentId="1909110" CreationDate="2009-12-15T17:53:14.527" OwnerUserId="17413" Tags="[]" Body="&amp;lt;p&amp;gt;Here is a pretty good introduction&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://www.linux-mag.com/cache/7597/1.html&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://www.linux-mag.com/cache/7597/1.html&amp;lt;/a&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Snip from article:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;blockquote&amp;gt;&#10;  &amp;lt;p&amp;gt;You&#x2019;ll often see the word &#x201C;relax&#x201D;&#10;  associated with CouchDB. That&#x2019;s&#10;  because CouchDB tries to solve a lot&#10;  of the &#x201C;hard problems&#x201D; associated with&#10;  building a scalable distributed&#10;  document-oriented database. It does a&#10;  lot of heavy lifting for you so that&#10;  you can focus on building your&#10;  application without worrying too much&#10;  about administration or weird corner&#10;  cases.&amp;lt;/p&amp;gt;&#10;  &#10;  &amp;lt;p&amp;gt;CouchDB also sports a very simple and&#10;  easy to understand RESTful API. This&#10;  should make for a very low barrier to&#10;  entry and stress-free development. As&#10;  we progress through the process of&#10;  using CouchDB, I think you&#x2019;ll start to&#10;  realize that this motto is not just&#10;  &#x201C;marketing speak.&#x201D;&amp;lt;/p&amp;gt;&#10;&amp;lt;/blockquote&amp;gt;&#10;"/>
  <row Id="1909257" ParentId="1909110" CreationDate="2009-12-15T18:04:47.073" OwnerUserId="146325" Tags="[]" Body="&amp;lt;p&amp;gt;As the late, great Eric Morecombe once observed, &amp;quot;Sofa, so good&amp;quot;.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1909291" ParentId="1909110" CreationDate="2009-12-15T18:10:21.183" OwnerUserId="11181" Tags="[]" Body="&amp;lt;blockquote&amp;gt;&#10;  &amp;lt;ol&amp;gt;&#10;  &amp;lt;li&amp;gt;It's &amp;lt;strong&amp;gt;well-suited&amp;lt;/strong&amp;gt; to a good portion of web app development today where scalability and online/offline sysc are important (additionally, the strength of relational database's powerful data set analysis is often less important).&amp;lt;/li&amp;gt;&#10;  &amp;lt;li&amp;gt;Arguably trivial &amp;lt;strong&amp;gt;replication&amp;lt;/strong&amp;gt; built-in (replication is an afterthought in the lineage of most RDBMS ecosystems)&amp;lt;/li&amp;gt;&#10;  &amp;lt;li&amp;gt;It's emerging as an &amp;lt;strong&amp;gt;essential part of the stack&amp;lt;/strong&amp;gt; upon which desktop/cloud sync services in the open source arena are being built (see &amp;lt;a href=&amp;quot;https://one.ubuntu.com/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Ubuntu One&amp;lt;/a&amp;gt;).  &amp;lt;/li&amp;gt;&#10;  &amp;lt;/ol&amp;gt;&#10;&amp;lt;/blockquote&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Because of #3, there's a decent marketing/awareness campaign behind it right now.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1922422" ParentId="1502735" CreationDate="2009-12-17T15:16:51.967" OwnerUserId="130168" Tags="[]" Body="&amp;lt;p&amp;gt;This was too long to add as a comment, so to clear up some misconceptions from the list-of-problems reply:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;ol&amp;gt;&#10;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;Any client may connect to any node; if the first node you pick (or you connect to via a load balancer) goes down, simply connect to another. Additionally, a &amp;quot;fat client&amp;quot; api is available where the client can direct the writes itself; an example is on &amp;lt;a href=&amp;quot;http://wiki.apache.org/cassandra/ClientExamples&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://wiki.apache.org/cassandra/ClientExamples&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;Timing out when a server is unresponsive rather than hanging indefinitely is a feature that most people who have dealt with overloaded rdbms systems has wished for.  The Cassandra RPC timeout is configurable; if you wish, you are free to set it to several days and deal with hanging indefinitely instead. :)&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;It is true that there is no multidelete or truncation support yet, but there are patches for both of these in review.&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;There is obviously a tradeoff in keeping load balanced across cluster nodes: the more perfectly balanced you try to keep things, the more data movement you will do, which is not free.  By default, new nodes in a Cassandra cluster will move to the optimal position in the token ring to minimize uneven-ness.  In practice, this has been shown to work well, and the larger your cluster is, the less true it is that doubling is optimal.  This is covered more in &amp;lt;a href=&amp;quot;http://wiki.apache.org/cassandra/Operations&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://wiki.apache.org/cassandra/Operations&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&#10;&amp;lt;/ol&amp;gt;&#10;"/>
  <row Id="1928136" ParentId="1924871" CreationDate="2009-12-18T13:14:25.587" OwnerUserId="167866" Tags="[]" Body="&amp;lt;p&amp;gt;Hi, &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Check out &amp;lt;a href=&amp;quot;http://neo4j.org/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Neo4j&amp;lt;/a&amp;gt;. It is a graph database (schema-free) that can be used like a document or key/value store. &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Neo4j has been in production for many years in environments like you describe. Unlike many other NOSQL databases Neo4j actually flushes data to disk and uses a transaction log to recover from an inconsistent state. It also has real transactions (full ACID) that can span multiple operations and treat them as a single unit (which also seems to be a feature that is frequently left out in many other NOSQL stores).&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;-Johan&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;(Disclaimer: I am part of the Neo4j team)&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1930294" ParentId="1930243" CreationDate="2009-12-18T19:42:20.903" OwnerUserId="20860" Tags="[]" Body="&amp;lt;p&amp;gt;Consider Martin Fowler's &amp;lt;a href=&amp;quot;http://www.martinfowler.com/eaaCatalog/serializedLOB.html&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Serialized LOB&amp;lt;/a&amp;gt; pattern:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;CREATE TABLE Documents (&#10;  documentid SERIAL PRIMARY KEY,&#10;  -- fixed relational attributes ...&#10;  document TEXT -- contains XML, YAML, whatever&#10;);&#10;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;You can put any semi-structured data with dynamic attributes into the &amp;lt;code&amp;gt;document&amp;lt;/code&amp;gt; column.  You just can't easily use SQL predicates to search or sort by fields in that blob.  But you couldn't anyway -- variable attributes is a non-relational concept, and it's awkward to support them in SQL no matter what.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;You can use a hybrid approach, storing some fixed attributes in conventional columns, and all the variable attribute stuff in the blob.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;This points out why document-oriented databases exist.  They are designed to solve a problem that the relational paradigm has chosen not to support.  But document-oriented databases don't do some of the cool things that relational databases do, like referential integrity and even data type coherency.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1930754" ParentId="1930243" CreationDate="2009-12-18T21:21:39.797" OwnerUserId="47303" Tags="[]" Body="&amp;lt;p&amp;gt;A simple MySQL example:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;CREATE TABLE Docs (&#10;  id INT,&#10;  attr VARCHAR(255),&#10;  value BLOB,&#10;  PRIMARY KEY (id, attr),&#10;  KEY attr_index (attr)&#10;)&#10;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Once you have that you can add any attribute to a document and stuff anything in the value, and you can use self joins on the document table to do complex queries like:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;SELECT * FROM Docs AS d1, docs AS d2 WHERE d1.attr = &amp;quot;foo&amp;quot; AND d2.attr = &amp;quot;bar&amp;quot;&#10;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Which returns documents with both foo and bar attributes.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1933173" ParentId="1813612" CreationDate="2009-12-19T15:23:07.817" OwnerUserId="230894" Tags="[]" Body="&amp;lt;p&amp;gt;I've been tinkering with a few. Ultimately, I'd like to move my controller layer of MVC to the jQuery/javascript frontend and use pure JSON/REST to talk with the backend. Though the backend will need strong security and, for my application some ability to do workflow, queries, and rules. &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;You also might want to look at:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;1) Couldkit, which runs on Tokyo Cabinet. Supports JSONQuery and OAuth. Runs on Ruby/Rack may have enough functionality. Loks like a strong REST implementation.&#10;2) Persevere, which is Java based and strongly supported in Dojo. It is REST-ish but also has some RPC type calls. Seems very powerful overall, with server-side java scripting, etc.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;I wouldn't mind hearing how you're coming along.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Cheers,&#10;Alex&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1934092" ParentId="1924871" CreationDate="2009-12-19T20:48:35.833" OwnerUserId="121199" Tags="[]" Body="&amp;lt;p&amp;gt;CouchDB has the reliability you need:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;blockquote&amp;gt;&#10;  &amp;lt;p&amp;gt;The CouchDB file layout and commitment system features all Atomic Consistent Isolated Durable (ACID) properties. On-disk, CouchDB never overwrites committed data or associated structures, ensuring the database file is always in a consistent state. &amp;lt;/p&amp;gt;&#10;&amp;lt;/blockquote&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Look at the ACID Properties section &amp;lt;a href=&amp;quot;http://couchdb.apache.org/docs/overview.html&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;here&amp;lt;/a&amp;gt; for more info.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;With CouchDB you also get easy backup and replication. &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;I've no code in production using CouchDB yet, but so far I'm very happy with the tests and the development process with CouchDB.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1946581" ParentId="1543965" CreationDate="2009-12-22T14:09:33.873" OwnerUserId="34107" Tags="[]" Body="&amp;lt;p&amp;gt;The link to Tokyo Cabinet for .Net is for the client driver.&#10;There is a port of the Tokyo Cabinet og Tyrant it can be downloaded from this site:&#10;&amp;lt;a href=&amp;quot;http://spench.net/drupal/software/tokyocabinet&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://spench.net/drupal/software/tokyocabinet&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;I have not testet this port.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1951383" ParentId="1528827" CreationDate="2009-12-23T08:25:14.557" OwnerUserId="220599" Tags="[]" Body="&amp;lt;p&amp;gt;When you say NoSQL, I'm assuming you mean solutions such as CouchDB, MongoDB, Cassandra, etc.  I personally don't know if there are any CMS solutions that support these, but that doesn't mean there aren't.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;However, there are &amp;lt;a href=&amp;quot;http://wiki.apache.org/jackrabbit/JcrLinks&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;plenty of CMS systems&amp;lt;/a&amp;gt; using &amp;lt;a href=&amp;quot;http://jackrabbit.apache.org/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Apache Jackrabbit&amp;lt;/a&amp;gt; (an implementation of JCR - Java Content Repository), which is not a relational datastore.  As indicated on their site:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;blockquote&amp;gt;&#10;  &amp;lt;p&amp;gt;A content repository is a hierarchical content store with &#10;  support for structured and unstructured content, full text &#10;  search, versioning, transactions, observation, and more.&amp;lt;/p&amp;gt;&#10;&amp;lt;/blockquote&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;There are &amp;lt;a href=&amp;quot;http://wiki.apache.org/jackrabbit/JcrLinks&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;many CMS solutions&amp;lt;/a&amp;gt; that use JCR/Jackrabbit as the datastore.  I personally use &amp;lt;a href=&amp;quot;http://code.google.com/p/brix-cms/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Brix-CMS&amp;lt;/a&amp;gt; with my &amp;lt;a href=&amp;quot;http://wicket.apache.org/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Apache Wicket&amp;lt;/a&amp;gt; projects.  There is also the very capable &amp;lt;a href=&amp;quot;http://www.onehippo.org/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Hippo CMS&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Perhaps this isn't the type of solution you are looking for (especially if you aren't a Java developer), but in many ways JCR fits the needs of a CMS better than most NoSQL solutions.  Since you refer to GAE, I guess there's a 50% chance you would consider Java.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;I have not used GAE myself, but I've read that other have wicket applications running within it.  You would need to check and see if Hippo or Brix or some other JCR implementation would run within it.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Good luck!&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1954759" ParentId="1950863" CreationDate="2009-12-23T19:13:41.273" OwnerUserId="234031" Tags="[]" Body="&amp;lt;p&amp;gt;First off, please don't create your own _id, let CouchDB create a uuid for you. It's much better, I promise you :)&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;The short answer is, you can't get the idea document with anything other than an additional query. Although the query is quite fast since you have the _id in your vote document.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;If you wanted to return the the full documents for all of the votes, in order to grab comments or something, you could definitely do that. Just run the view query with ?include_docs=true&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1954804" ParentId="1951061" CreationDate="2009-12-23T19:20:49.340" OwnerUserId="234031" Tags="[]" Body="&amp;lt;p&amp;gt;Concurrent connections aren't a problem, erlang and CouchDB are built for concurrent performance.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Are you thinking that you'll have to be generating new map functions dynamically, cause it kind of sounds like it?&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Whenever you add a new view map function you're going to hit a big bottleneck in the initial view generation.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;If you use erlang views they generate much faster than javascript views because they don't hit the JSON serialization step, this can significantly speed up the view generation performance.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Once the view is generated it will be quite fast even with the size you're talking about.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1959820" ParentId="1959818" CreationDate="2009-12-24T21:33:58.533" OwnerUserId="13724" Tags="[]" Body="&amp;lt;p&amp;gt;I really don't see how this is a major goal of any scalable database. You could certainly use time to make some swanky visual tool, but&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;ul&amp;gt;&#10;&amp;lt;li&amp;gt;These data sets are usually so big that ad-hoc queries run against a production system will return too much data to be useful&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;Developers have enough real problems to think about - like working out a compromise between availability, consistency and partition-tolerance&amp;lt;/li&amp;gt;&#10;&amp;lt;/ul&amp;gt;&#10;"/>
  <row Id="1959835" ParentId="1959818" CreationDate="2009-12-24T21:41:52.693" OwnerUserId="171461" Tags="[]" Body="&amp;lt;p&amp;gt;couchDB does: visit the &amp;lt;code&amp;gt;http://localhost:5984/_utils/&amp;lt;/code&amp;gt; once installed.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1960570" ParentId="1958365" CreationDate="2009-12-25T05:42:10.423" OwnerUserId="217275" Tags="[]" Body="&amp;lt;p&amp;gt;Did you install mongo_ext? &#10;I think the performance is more related to the driver than the mapper itself. When looking at the mongo log, I can see without the extension, that the transer seems to have some lags.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Also do as they recommend on the monogdb site, select only the fields you need.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1960576" ParentId="1958365" CreationDate="2009-12-25T05:45:12.877" OwnerUserId="142240" Tags="[]" Body="&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;sudo gem install mongo_ext&amp;lt;/code&amp;gt; is key to getting performance. &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;MongoDB blows away CouchDB in terms of raw speed &#x2013;&#xA0;though CDB doe shave its own set of advantages. &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Benchmark: &amp;lt;a href=&amp;quot;http://www.snailinaturtleneck.com/blog/?p=74&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://www.snailinaturtleneck.com/blog/?p=74&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1961090" ParentId="1961013" CreationDate="2009-12-25T12:18:32.237" OwnerUserId="14343" Tags="[]" Body="&amp;lt;p&amp;gt;One of the supposed benefits of these databases is that they are schemaless, and therefore don't need schema migration tools.  Instead, you write your data handling code to deal with the variety of data stored in the db.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1962068" ParentId="1959818" CreationDate="2009-12-25T22:12:51.343" OwnerUserId="36710" Tags="[]" Body="&amp;lt;p&amp;gt;When using a &amp;lt;a href=&amp;quot;http://en.wikipedia.org/wiki/Graph%5Fdatabase&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;graph database&amp;lt;/a&amp;gt; visualization of the data comes in very handy during both development and debugging. For the &amp;lt;a href=&amp;quot;http://neo4j.org/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Neo4j&amp;lt;/a&amp;gt; open source graph database there is &amp;lt;a href=&amp;quot;http://neoclipse.org/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Neoclipse&amp;lt;/a&amp;gt;, which can be used both to model the domain during development and to peek into an existing database; and &amp;lt;a href=&amp;quot;http://github.com/obruening/neoviz&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;neoviz&amp;lt;/a&amp;gt;, a Rails based visualization tool for Neo4j.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1964138" ParentId="1950863" CreationDate="2009-12-26T19:27:00.243" OwnerUserId="49407" Tags="[]" Body="&amp;lt;p&amp;gt;I don't agree with server-side ID generation. Client-Side ID generation protects you from duplicate inserts. sha(&amp;quot;%f@%s-%f&amp;quot; % (time(), hostname(), random()) for example generates very reasonable IDs.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1966375" ParentId="1961013" CreationDate="2009-12-27T16:50:07.403" OwnerUserId="13724" Tags="[]" Body="&amp;lt;p&amp;gt;If your data are sufficiently big, you will probably find that you cannot &amp;lt;em&amp;gt;EVER&amp;lt;/em&amp;gt; migrate the data, or that it is not beneficial to do so. This means that when you do a schema change, the code needs to continue to be backwards compatible with the old formats forever.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Of course if your data &amp;quot;age&amp;quot; and eventually expire anyway, this can do schema migration for you - simply change the format for newly added data, then wait for all data in the old format to expire - you can then retire the backward-compatibility code.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1968598" ParentId="1968589" CreationDate="2009-12-28T08:57:00.867" OwnerUserId="13051" Tags="[]" Body="&amp;lt;p&amp;gt;You should first study the existing social networks out there (Facebook, Myspace, etc). There is a fair amount of information available about how they are implemented.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1968612" ParentId="1968589" CreationDate="2009-12-28T09:03:24.443" OwnerUserId="34088" Tags="[]" Body="&amp;lt;p&amp;gt;The key to success for social networks is not the technology on which it is based but the problems they solve for the users. If the users like it, you're doomed for success even if your technology is crap.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;[EDIT] How is it implemented? Check any SQL-based user role system. In this case, every user is also a role which can be added as &amp;quot;allowed to access&amp;quot; to any object. Depending on how many objects you have and how fine grained the control should be, that can mean that you have a table with three columns: &amp;lt;code&amp;gt;OBJECT, USER, ACCESS_TYPE&amp;lt;/code&amp;gt; where &amp;lt;code&amp;gt;ACCESS_TYPE&amp;lt;/code&amp;gt; can be one of &amp;lt;code&amp;gt;OWNER&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;READ&amp;lt;/code&amp;gt; (friend), &amp;lt;code&amp;gt;WRITE&amp;lt;/code&amp;gt; (close friend).&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;This table will become pretty large but a few 100 million rows is not uncommon for todays databases anymore.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1968696" ParentId="1968589" CreationDate="2009-12-28T09:38:18.990" OwnerUserId="164394" Tags="[]" Body="&amp;lt;p&amp;gt;First thing to get out the way is the database, an SQL one would just look like a normalised sql database. What else could it look like? A nosql database would look like a bunch of name value pair files.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Three approaches to building a social web site after and only after you do a shed load of research on existing popular and unpopular ones to ascertain their architecture and the markets that that they are aimed at, and the particular services that they offer to these markets.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;ol&amp;gt;&#10;&amp;lt;li&amp;gt;Roll your own from scratch (and or use a framework). Like Facebook, Beebo, Myspace et al. This is obviously the longest route to getting there but it does mean you have something to sell when you do. Both the platform and the membership and the USP are yours to sell to Rupert Murdoch or whomever.&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;Use a CMS that lends itself to social site and use the basic functionality, plus the plug-ins plus your own inspiration to hit your target market. In this area Drupal is often used (i have used it successfully as well) but Joomla, Xaraya and many other both free and paid for can be used. Yep more research. Less to sell here when Rupert gives you a bell as the base tool is probably GPL'd&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;Use one of the provided system where you sign up and then use the tools to build your own but all the goodies are provided, These are known as white label sites. &amp;lt;a href=&amp;quot;http://www.web-strategist.com/blog/2007/02/12/list-of-white-label-social-networking-platforms/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Start looking here&amp;lt;/a&amp;gt;. Here you have little to sell on if someone wants to take you over.&amp;lt;/li&amp;gt;&#10;&amp;lt;/ol&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;How is &amp;quot;content visibility&amp;quot; handled. Initially of course the site builder makes a decision on who can see content. Owners only, friends, registered users, the general public? etc. But this decision must fir in with the aims and policies of the site. The best way then to handle this is through Role Based Access RBAC &amp;lt;a href=&amp;quot;http://en.wikipedia.org/wiki/Role-based%5Faccess%5Fcontrol&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;see here for details&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;When you say you &amp;quot;need to design / architect / develop&amp;quot; is this because of an overwhelming inner urge or because someone is paying you? &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Either way remember the social web space is very very crowded. If you are just building another YouTube, or FaceBook then you are unlikely to be able to generate the critical mass of number required to make such a site commercially successful.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;If it is for a niche market not already catered for, e.g. &amp;quot;The Peckham and Brockley Exotic Bird Fanciers Club&amp;quot; then you know what you market is and what features will be required so any of the above options you deem the easiest and cheapest can be used but that is up to you to analyse and execute.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;You may of course have an idea for a social site that is mainstream and is not covered by the other, i.e. you have spotted the mythological &amp;quot;gap in the market&amp;quot;. In this case go for it but prepare to be disappointed. Or not.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1968863" ParentId="1968589" CreationDate="2009-12-28T10:34:57.813" OwnerUserId="89556" Tags="[]" Body="&amp;lt;p&amp;gt;Your design should be maintenable. This is what I have in my project.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;1.) &amp;lt;strong&amp;gt;Application.Infrastructure&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;ul&amp;gt;&#10;&amp;lt;li&amp;gt;Base classes for all businessobjects, busines object collection, data-access classes and my custom attributes and utilities as extension methods, Generic validation framework. This determines overall behavior organization of my final .net application.&amp;lt;/li&amp;gt;&#10;&amp;lt;/ul&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;2.) &amp;lt;strong&amp;gt;Application.DataModel&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;ul&amp;gt;&#10;&amp;lt;li&amp;gt;Typed Dataset for the Database.&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;TableAdapters extended to incorporate Transactions and other features I may need.&amp;lt;/li&amp;gt;&#10;&amp;lt;/ul&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;3.) &amp;lt;strong&amp;gt;Application.DataAccess&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;ul&amp;gt;&#10;&amp;lt;li&amp;gt;Data access classes.&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;Actual place where Database actions are queried using underlying Typed Dataset.&amp;lt;/li&amp;gt;&#10;&amp;lt;/ul&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;4.) &amp;lt;strong&amp;gt;Application.DomainObjects&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;ul&amp;gt;&#10;&amp;lt;li&amp;gt;Business objects and Business object collections.&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;Enums.&amp;lt;/li&amp;gt;&#10;&amp;lt;/ul&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;5.) &amp;lt;strong&amp;gt;Application.BusinessLayer&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;ul&amp;gt;&#10;&amp;lt;li&amp;gt;Provides manager classes accessible from Presentation layer.&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;HttpHandlers.&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;My own Page base class.&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;More things go here..&amp;lt;/li&amp;gt;&#10;&amp;lt;/ul&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;6.) &amp;lt;strong&amp;gt;Application.WebClient&amp;lt;/strong&amp;gt; or &amp;lt;strong&amp;gt;Application.WindowsClient&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;ul&amp;gt;&#10;&amp;lt;li&amp;gt;My presentation layer&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;Takes references from Application.BusinessLayer and Application.BusinessObjects.&amp;lt;/li&amp;gt;&#10;&amp;lt;/ul&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Application.BusinessObjects are used across the application and they travel across all layers whenever neeeded [except Application.DataModel and Application.Infrastructure]&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;All my queries are defined only Application.DataModel.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Application.DataAccess returns or takes Business objects as part of any data-access operation. Business objects are created with the help of reflection attributes. Each business object is marked with an attribute mapping to target table in database and properties within the business object are marked with attributes mapping to target coloumn in respective data-base table.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;My validation framework lets me validate each field with the help of designated ValidationAttribute.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;My framrwork heavily uses Attributes to automate most of the tedious tasks like mapping and validation. I can also new feature as new aspect in the framework.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;A sample business object would look like this in my application.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;User.cs&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;[TableMapping(&amp;quot;Users&amp;quot;)]&#10;public class User : EntityBase&#10;{&#10;    #region Constructor(s)&#10;    public AppUser()&#10;    {&#10;        BookCollection = new BookCollection();&#10;    }&#10;    #endregion&#10;&#10;    #region Properties&#10;&#10;    #region Default Properties - Direct Field Mapping using DataFieldMappingAttribute&#10;&#10;    private System.Int32 _UserId;&#10;&#10;    private System.String _FirstName;&#10;    private System.String _LastName;&#10;    private System.String _UserName;&#10;    private System.Boolean _IsActive;&#10;&#10;    [DataFieldMapping(&amp;quot;UserID&amp;quot;)]&#10;    [DataObjectFieldAttribute(true, true, false)]&#10;    [NotNullOrEmpty(Message = &amp;quot;UserID From Users Table Is Required.&amp;quot;)]&#10;    public override int Id&#10;    {&#10;        get&#10;        {&#10;            return _UserId;&#10;        }&#10;        set&#10;        {&#10;            _UserId = value;&#10;        }&#10;    }&#10;&#10;    [DataFieldMapping(&amp;quot;UserName&amp;quot;)]&#10;    [Searchable]&#10;    [NotNullOrEmpty(Message = &amp;quot;Username Is Required.&amp;quot;)]&#10;    public string UserName&#10;    {&#10;        get&#10;        {&#10;            return _UserName;&#10;        }&#10;        set&#10;        {&#10;            _UserName = value;&#10;        }&#10;    }&#10;&#10;    [DataFieldMapping(&amp;quot;FirstName&amp;quot;)]&#10;    [Searchable]&#10;    public string FirstName&#10;    {&#10;        get&#10;        {&#10;            return _FirstName;&#10;        }&#10;        set&#10;        {&#10;            _FirstName = value;&#10;        }&#10;    }&#10;&#10;    [DataFieldMapping(&amp;quot;LastName&amp;quot;)]&#10;    [Searchable]&#10;    public string LastName&#10;    {&#10;        get&#10;        {&#10;            return _LastName;&#10;        }&#10;        set&#10;        {&#10;            _LastName = value;&#10;        }&#10;    }&#10;&#10;    [DataFieldMapping(&amp;quot;IsActive&amp;quot;)]&#10;    public bool IsActive&#10;    {&#10;        get&#10;        {&#10;            return _IsActive;&#10;        }&#10;        set&#10;        {&#10;            _IsActive = value;&#10;        }&#10;    }&#10;&#10;    #region One-To-Many Mappings&#10;    public BookCollection Books { get; set; }&#10;&#10;    #endregion&#10;&#10;    #region Derived Properties&#10;    public string FullName { get { return this.FirstName + &amp;quot; &amp;quot; + this.LastName; } }&#10;&#10;    #endregion&#10;&#10;    #endregion&#10;&#10;    public override bool Validate()&#10;    {&#10;        bool baseValid = base.Validate();&#10;        bool localValid = Books.Validate();&#10;        return baseValid &amp;amp;#38;amp;&amp;amp;#38;amp; localValid;&#10;    }&#10;}&#10;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;BookCollection.cs&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;/// &amp;amp;#38;lt;summary&amp;amp;#38;gt;&#10;/// The BookCollection class is designed to work with lists of instances of Book.&#10;/// &amp;amp;#38;lt;/summary&amp;amp;#38;gt;&#10;public class BookCollection : EntityCollectionBase&amp;amp;#38;lt;Book&amp;amp;#38;gt;&#10;{&#10;    /// &amp;amp;#38;lt;summary&amp;amp;#38;gt;&#10;    /// Initializes a new instance of the BookCollection class.&#10;    /// &amp;amp;#38;lt;/summary&amp;amp;#38;gt;&#10;    public BookCollection()&#10;    {&#10;    }&#10;&#10;    /// &amp;amp;#38;lt;summary&amp;amp;#38;gt;&#10;    /// Initializes a new instance of the BookCollection class.&#10;    /// &amp;amp;#38;lt;/summary&amp;amp;#38;gt;&#10;    public BookCollection (IList&amp;amp;#38;lt;Book&amp;amp;#38;gt; initialList)&#10;        : base(initialList)&#10;    {&#10;    }&#10;}&#10;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&#10;"/>
  <row Id="1971012" ParentId="1968589" CreationDate="2009-12-28T19:07:35.920" OwnerUserId="53404" Tags="[]" Body="&amp;lt;p&amp;gt;Hi there,&#10;a Graph Database like &amp;lt;a href=&amp;quot;http://www.neo4j.org&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://www.neo4j.org&amp;lt;/a&amp;gt; is a choice to look at. It lends itself very well to both the social network (e.g. &amp;lt;a href=&amp;quot;http://blog.neo4j.org/2009/09/social-networks-in-database-using-graph.html&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://blog.neo4j.org/2009/09/social-networks-in-database-using-graph.html&amp;lt;/a&amp;gt;) and the ACL-based security (e.g. &amp;lt;a href=&amp;quot;http://wiki.neo4j.org/content/ACL&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://wiki.neo4j.org/content/ACL&amp;lt;/a&amp;gt; ).&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1971103" ParentId="1968589" CreationDate="2009-12-28T19:27:02.420" OwnerUserId="44886" Tags="[]" Body="&amp;lt;p&amp;gt;As Aaroon pointed out, you should first ask youself what problem you want to solve. &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;What content do you want people to share? Should it really be visible only to friends? It is much easier and scalable if you make content publicly visible, because what content is displayed is not dependent on who is watching the page and you can cache it easily. Publicly available user-generated content attracts new users. &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;If you want to restrict access and give to the user the opportunity to attach groups of friends to a resource I would go with a simple group-based access control. Let each resource have a group of users which can edit the resource and a group of users who can see it. &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;That way each resource has two single value attributes, and each user belons to a finite number of group. You can attach the view-group and edit-group attributes to a document stored in a NOSQL database, a search engine like Lucene/Sphinx or a row in a SQL database. When querying for content available for the user, pass all groups the user belongs to (in SQL you would use &amp;lt;code&amp;gt;IN&amp;lt;/code&amp;gt; clause, in Sphinx &amp;lt;code&amp;gt;setFilter('view-group', array(2,3,4))&amp;lt;/code&amp;gt;. The database would return only content available for the user. Because you are attaching only 2 integer values (view-group and edit-group) to a document, you can store them in memory which makes the search fast and scalable.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1976277" ParentId="1528827" CreationDate="2009-12-29T18:59:46.827" OwnerUserId="105938" Tags="[]" Body="&amp;lt;p&amp;gt;There's a MongoDB-based CMS called &amp;lt;a href=&amp;quot;http://get.harmonyapp.com/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Harmony&amp;lt;/a&amp;gt; currently in private beta. It's being developed in part by John Nunemaker, the guy behind &amp;lt;a href=&amp;quot;http://github.com/jnunemaker/mongomapper&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;MongoMapper&amp;lt;/a&amp;gt;. There's &amp;lt;a href=&amp;quot;http://railstips.org/2009/12/18/why-i-think-mongo-is-to-databases-what-rails-was-to-frameworks&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;a blog post up on RailsTips&amp;lt;/a&amp;gt; where he talks about the advantages of using MongoDB for a problem like this. I don't know anything about how it'll be hosted, etc. since I'm not in the private beta, but it's certainly a step in the NOSQL direction, and looks quite interesting.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1978889" ParentId="1595562" CreationDate="2009-12-30T07:23:31.577" OwnerUserId="45224" Tags="[]" Body="&amp;lt;p&amp;gt;One approach to improving the speed of your database is to denormalize. Take this MySQL example:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;CREATE TABLE `users` (&#10;    `user_id` INT NOT NULL AUTO_INCREMENT,&#10;    &#x2026; -- Additional user data&#10;    PRIMARY KEY (`user_id`)&#10;);&#10;&#10;&#10;CREATE TABLE `roles` (&#10;    `role_id` INT NOT NULL AUTO_INCREMENT,&#10;    `name` VARCHAR(64),&#10;    PRIMARY KEY (`role_id`)&#10;);&#10;&#10;&#10;CREATE TABLE `users_roles` (&#10;    `user_id` INT NOT NULL,&#10;    `role_id` INT NOT NULL,&#10;    PRIMARY KEY (`user_id`, `role_id`)&#10;);&#10;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Neat, tidy, normalized. But if you want to get users and their roles, the query is complex:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;SELECT u.*, r.*&#10;  FROM `users` u&#10;  LEFT JOIN `user_roles` ur ON u.`user_id` = ur.`user_id`&#10;  JOIN `roles` r ON ur.`role_id` = r.`role_id`;&#10;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;If you denormalized this, it might look something like:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;CREATE TABLE `users` (&#10;    `user_id` INT NOT NULL AUTO_INCREMENT,&#10;    `role` VARCHAR(64),&#10;    &#x2026; -- Additional user data&#10;    PRIMARY KEY (`user_id`)&#10;);&#10;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;And the equivalent query would be:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;SELECT * FROM `users`;&#10;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;This improves some of the performance characteristics of your queries:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;ol&amp;gt;&#10;&amp;lt;li&amp;gt;Because the result you want is already in a table, you don't have to perform read-side calculations. e.g. if you wanted to see the number of users with a given role, you'd need a &amp;lt;code&amp;gt;GROUP BY&amp;lt;/code&amp;gt; and &amp;lt;code&amp;gt;COUNT&amp;lt;/code&amp;gt;. If it were denormalized, you would store it in a different table devoted to holding roles and counts of users who have that role.&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;The data you want is in the same place, and hopefully in the same place on disk. Rather than requiring many random seeks, you can do one to a few sequential reads.&amp;lt;/li&amp;gt;&#10;&amp;lt;/ol&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;NoSQL DBs are highly optimized for these cases, where you want to access a mostly-static sequential dataset. At that point, it's just moving bytes from disk to the network. Less work, less overhead, more speed. Despite how simple this sounds, it's possible to model your data and application so it feels natural.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;The trade-off for this performance is write load, disk space, and some app complexity.  Denormalizing your data means more copies, which means more disk space and write load. Essentially, you have one dataset per query.  Because you shift the burden of those computations to write-time instead of read-time, you really need some sort of asynchronous mechanism to do that, hence some app complexity.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;And because you have to store more copies, you have to perform more writes. This is why you can't practically replicate this kind of architecture with a SQL database &#x2013; it's extremely difficult to scale writes.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;In my experience, the trade-off is well worth it for a large-scale application. If you'd like to read a bit more about a practical application of Cassandra, &amp;lt;a href=&amp;quot;http://about.digg.com/blog/looking-future-cassandra&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;I wrote this piece&amp;lt;/a&amp;gt; a few months ago, and you might find it helpful.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1985381" ParentId="1985352" CreationDate="2009-12-31T13:23:34.130" OwnerUserId="27637" Tags="[]" Body="&amp;lt;p&amp;gt;You might find some helpful information here:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://stackoverflow.com/questions/1189911/non-relational-database-design&amp;quot;&amp;gt;Non-Relational Database Design&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://stackoverflow.com/questions/1886650/are-there-any-stable-and-production-quality-nosql-datastores&amp;quot;&amp;gt;Are there any stable and production quality nosql datastores ?&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://stackoverflow.com/questions/1777103/what-nosql-solutions-are-out-there-for-net&amp;quot;&amp;gt;What NoSQL solutions are out there for .NET&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1985382" ParentId="1985352" CreationDate="2009-12-31T13:23:46.437" OwnerUserId="235058" Tags="[]" Body="&amp;lt;p&amp;gt;I think this is not the right question. The question &amp;quot;which NoSQL DBMS is most X ...&amp;quot; is not of th same form  as &amp;quot;which RDBMS is most X on ...&amp;quot; &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Why? Well, NoSQL is not really clearly defined. There are a few recurring characteristics (distributed, large volume, map/reduce processing, scaleable, redundant, not-relational, schemaless) but none of these are &amp;lt;em&amp;gt;defining characteristics&amp;lt;/em&amp;gt;. To put it bluntly, NoSQL is a bucket of techniques and products, each with their own special underlying design goals and applicability. &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;With traditional RDBMS-es the similarities are much clearer.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;So I guess you should ask yourself, what do you want to achieve? Then look for a product/technique to match it.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1985854" ParentId="1950863" CreationDate="2009-12-31T15:36:25.470" OwnerUserId="149230" Tags="[]" Body="&amp;lt;p&amp;gt;Map:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;function(doc) {&#10;    switch (doc.type) {&#10;        case &amp;quot;idea&amp;quot;:   emit(doc._id,     [&amp;quot;idea&amp;quot;,  doc]);         break;&#10;        case &amp;quot;rating&amp;quot;: emit(doc.idea_id, [&amp;quot;rating&amp;quot;, doc.rating]); break;&#10;    }&#10;}&#10;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Reduce:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;function(keys, values, rereduce) {&#10;    var i, l, ret = {idea:null, rating:0};&#10;&#10;    for (i = 0, l = values.length; i &amp;amp;#38;lt; l; ++i) {&#10;        switch (values[i][0]) {&#10;            case &amp;quot;idea&amp;quot;:   ret.idea = values[i][1];    break;&#10;            case &amp;quot;rating&amp;quot;: ret.rating += values[i][1]; break;&#10;        }&#10;    }&#10;&#10;    return ret;&#10;}&#10;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Another option would be to &amp;lt;a href=&amp;quot;http://chrischandler.name/couchdb/view-collation-for-join-like-behavior-in-couchdb/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;use view collation&amp;lt;/a&amp;gt; to do the trick.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1991613" ParentId="1950863" CreationDate="2010-01-02T13:38:18.963" OwnerUserId="242298" Tags="[]" Body="&amp;lt;p&amp;gt;Seconding @mdornseif. UUIDs can be generated client side to avoid network errors. In case no UUID generation facility is at hand, CouchDB has a /_uuids endpoint to request one or more for later use.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1993349" ParentId="1985352" CreationDate="2010-01-02T23:53:38.130" OwnerUserId="13724" Tags="[]" Body="&amp;lt;p&amp;gt;You absolutely must gather your requirements and evaluate as many options as you can.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;As you're likely to be deploying a massive system that will need to be maintained for years, the cost of a poor choice is very high; try to get your entire development team's input on it, as it will matter (it's them who will need to maintain it, after all).&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Operations is as important as development; get your operations team's input too if at all possible. As a &amp;quot;nosql&amp;quot; based system is likely to involve many physical machines, it may require a lot of effort to maintain by ops engineers if problems are frequent. It is important that your ops team understand how such a system works.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Maturity of drivers (aka client library or whatever) clearly might be a factor, but I rather suspect that its actual features are more of an issue. None of these systems behave the same, and all offer different feature sets with incompatible interfaces which are not similar to those offered by a traditional RDBMS.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1995238" ParentId="1995216" CreationDate="2010-01-03T15:13:19.310" OwnerUserId="179233" Tags="[]" Body="&amp;lt;p&amp;gt;You would have to do multiple selects, and join the data manually in your application.  See &amp;lt;a href=&amp;quot;http://stackoverflow.com/questions/782913/googles-bigtable-vs-a-relational-database&amp;quot;&amp;gt;this SO post&amp;lt;/a&amp;gt; for more information.  From that post:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;blockquote&amp;gt;&#10;  &amp;lt;p&amp;gt;Bigtable datasets can be queried from services like AppEngine using a language called GQL (&amp;quot;gee-kwal&amp;quot;) which is a based on a subset of SQL. Conspicuously missing from GQL is any sort of JOIN command. Because of the distributed nature of a Bigtable database, performing a join between two tables would be terribly inefficient. Instead, the programmer has to implement such logic in his application, or design his application so as to not need it.&amp;lt;/p&amp;gt;&#10;&amp;lt;/blockquote&amp;gt;&#10;"/>
  <row Id="1995372" ParentId="1995216" CreationDate="2010-01-03T15:57:44.453" OwnerUserId="71134" Tags="[]" Body="&amp;lt;p&amp;gt;Kaleb's right. You write custom code with a NoSQL solution if your data doesn't fit well into a key-value store. Map-reduce/async processing and custom view caches are common. Brian Aker gave a very funny (and satirical and biased) presentation at the Nov 2009 OpenSQLCamp &amp;lt;a href=&amp;quot;http://www.youtube.com/watch?v=LhnGarRsKnA&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://www.youtube.com/watch?v=LhnGarRsKnA&amp;lt;/a&amp;gt;. Skip in 40 seconds to hear about joins.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1996579" ParentId="1995216" CreationDate="2010-01-03T22:26:07.100" OwnerUserId="13724" Tags="[]" Body="&amp;lt;p&amp;gt;When you have extremely large data, you probably want to avoid joins. This is because the overhead of an individual key lookup is relatively large (the service needs to figure out which node(s) to query, and query them in parallel and wait for responses). By overhead, I mean latency, not throughput limitation.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;This makes joins suck really badly as you'd need to do a lot of foreign key lookups, which would end up going to many,many different nodes (in many cases). So you'd want to avoid this as a pattern.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;If it doesn't happen very often, you could probably take the hit, but if you're going to want to do a lot of them, it may be worth &amp;quot;denormalising&amp;quot; the data.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;The kind of stuff which gets stored in NoSQL stores is typically pretty &amp;quot;abnormal&amp;quot; in the first place. It is not uncommon to duplicate the same data in all sorts of different places to make lookups easier.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Additionally most nosql don't (really) support secondary indexes either, which means you have to duplicate stuff if you want to query by any other criterion.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;If you're storing data such as employees and departments, you're really better off with a conventional database.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1997078" ParentId="1997069" CreationDate="2010-01-04T01:25:45.537" OwnerUserId="239696" Tags="[]" Body="&amp;lt;p&amp;gt;It only uses its &amp;lt;a href=&amp;quot;http://s3.amazonaws.com/AllThingsDistributed/sosp/amazon-dynamo-sosp2007.pdf&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Dynamo&amp;lt;/a&amp;gt; key-value store for its shopping cart and select other applications.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="1997085" ParentId="1997069" CreationDate="2010-01-04T01:29:17.883" OwnerUserId="222908" Tags="[]" Body="&amp;lt;p&amp;gt;You may want to start your research by checking out these Stack Overflow articles:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;ul&amp;gt;&#10;&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;http://stackoverflow.com/questions/1189911/non-relational-database-design&amp;quot;&amp;gt;Non-Relational Database Design&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;http://stackoverflow.com/questions/103727/how-to-think-in-data-stores-instead-of-databases&amp;quot;&amp;gt;How to think in data stores instead of databases?&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;http://stackoverflow.com/questions/176131/pros-of-databases-like-bigtable-simpledb&amp;quot;&amp;gt;Pro&#x2019;s of databases like BigTable, SimpleDB&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;http://stackoverflow.com/questions/445827/gae-how-to-live-with-no-joins/446471#446471&amp;quot;&amp;gt;GAE - How to live with no joins?&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;http://stackoverflow.com/questions/648270/whats-the-point-of-using-amazon-simpledb&amp;quot;&amp;gt;What&#x2019;s the point of using Amazon SimpleDB?&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;http://stackoverflow.com/questions/348939/eventual-consistency&amp;quot;&amp;gt;Eventual Consistency&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;http://stackoverflow.com/questions/930966/app-engine-datastore-does-not-support-operator-or&amp;quot;&amp;gt;App Engine datastore does not support operator OR&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&#10;&amp;lt;/ul&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;The Amazon datastore is offered to the public as &amp;lt;a href=&amp;quot;http://aws.amazon.com/simpledb/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;SimpleDB&amp;lt;/a&amp;gt;, which is part of the &amp;lt;a href=&amp;quot;http://aws.amazon.com/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Amazon Web Services&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Also note that Google offers a similar &amp;quot;&amp;lt;a href=&amp;quot;http://en.wikipedia.org/wiki/Bigtable&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;sparse, distributed multi-dimensional sorted map&amp;lt;/a&amp;gt;&amp;quot; datastore for the &amp;lt;a href=&amp;quot;http://code.google.com/appengine/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Google App Engine&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2012941" ParentId="2012900" CreationDate="2010-01-06T12:44:51.340" OwnerUserId="50394" Tags="[]" Body="&amp;lt;p&amp;gt;Most programming languages come with tools to serialize and unserialize their native data structures. Use those to store the data in text files.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;This way you'll have data that is compliant and supported with your programming language without the need of slow &amp;lt;em&amp;gt;parsers&amp;lt;/em&amp;gt;.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;For example in PHP you could use the &amp;lt;code&amp;gt;serialize()&amp;lt;/code&amp;gt; function to turn any data structure into a &amp;lt;strong&amp;gt;string&amp;lt;/strong&amp;gt; (&amp;lt;code&amp;gt;unserialize()&amp;lt;/code&amp;gt; does the opposite).&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;The querying becomes as simple as accessing native data structures, no need for the complication/slowness of SQL.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2012949" ParentId="2012900" CreationDate="2010-01-06T12:46:50.677" OwnerUserId="52201" Tags="[]" Body="&amp;lt;p&amp;gt;Xml, With Linq-To-Xml?&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Human Readable and can be partially updated or read in all at once.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2013012" ParentId="2012900" CreationDate="2010-01-06T12:59:11.623" OwnerUserId="122012" Tags="[]" Body="&amp;lt;p&amp;gt;In my youth, there existed some kind of of awk-based database engine. It was just a set of shell-scripts. But I don't remember its name and I don't know if it was SQL-compliant or free.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;But the stored data was totally text based.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;I did not find it there, but also this link might be of use:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://www.faqs.org/faqs/databases/free-databases/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Catalog of free databases&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2013057" ParentId="2012900" CreationDate="2010-01-06T13:06:28.477" OwnerUserId="244358" Tags="[]" Body="&amp;lt;p&amp;gt;This might not be exactly what you work looking for, but I think something like CouchDB would be an excellent choice for this kind of application. It is queried via json but I don't think the stored data is directly editable.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2013806" ParentId="2012900" CreationDate="2010-01-06T15:05:14.723" OwnerUserId="15459" Tags="[]" Body="&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://en.wikipedia.org/wiki/Flat_file_database&amp;quot; rel=&amp;quot;nofollow&amp;quot; title=&amp;quot;Flat file database - Wikipedia, the free encyclopedia&amp;quot;&amp;gt;Flat file database&amp;lt;/a&amp;gt; shows that the idea isn't too stretched...&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;I wonder why your requirements excludes &amp;quot;loading all data into memory&amp;quot;. Do you think you will have several GB of &amp;quot;some data&amp;quot;? Even some MB of data shouldn't be too much to load and maintain in memory, after all a browser consumes much more memory with the Dom of a large Web page...&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;I suppose you can use &amp;lt;a href=&amp;quot;http://en.wikipedia.org/wiki/Memory-mapped_file&amp;quot; rel=&amp;quot;nofollow&amp;quot; title=&amp;quot;Memory-mapped file - Wikipedia, the free encyclopedia&amp;quot;&amp;gt;memory-mapped file&amp;lt;/a&amp;gt; to reduce memory usage, but maintaining an accurate index might be more challenging.&amp;lt;br&amp;gt;&#10;I wonder if Thunderbird, which stores the mailboxes in plain text files (mbox format), uses such technique.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2013831" ParentId="2012900" CreationDate="2010-01-06T15:08:37.197" OwnerUserId="145357" Tags="[]" Body="&amp;lt;p&amp;gt;MongoDB has a lot in common with CouchDB, but simpler.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;You can try my library (be careful) &amp;lt;a href=&amp;quot;http://code.google.com/p/mongodloid/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://code.google.com/p/mongodloid/&amp;lt;/a&amp;gt; to make your life even easier&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2016810" ParentId="1968589" CreationDate="2010-01-06T22:29:33.553" OwnerUserId="239472" Tags="[]" Body="&amp;lt;p&amp;gt;In the end it looks like Elgg or Dolphin might meet our requirements.  These appear to be PHP frameworks for rolling your own social network.  I looked at the Facebook platform but nowhere did it clearly explain just what it is - it appears to be the facebook code but perhaps it is only the code for an addon API or something.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2023504" ParentId="1905688" CreationDate="2010-01-07T20:43:30.440" OwnerUserId="234655" Tags="[]" Body="&amp;lt;p&amp;gt;The main reason is scale (Facebook, MySpace)&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Check out these articles:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://highscalability.com/product-facebooks-cassandra-massive-distributed-store&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Facebook's Cassandra - A Massive Distributed Store&amp;lt;/a&amp;gt; &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://qizmt.myspace.com/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;MySpace Qizmt - MySpace's Mapreduce Framework&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;As you are already using Lucene, this may be of interest:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://katta.sourceforge.net/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Katta - Lucene in the cloud&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2028554" ParentId="2012900" CreationDate="2010-01-08T15:28:48.377" OwnerUserId="124894" Tags="[]" Body="&amp;lt;p&amp;gt;Berkeley XML DB? &amp;lt;a href=&amp;quot;http://www.oracle.com/database/berkeley-db/xml/index.html&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://www.oracle.com/database/berkeley-db/xml/index.html&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2032155" ParentId="1815731" CreationDate="2010-01-09T02:44:27.660" OwnerUserId="20003" Tags="[]" Body="&amp;lt;ul&amp;gt;&#10;&amp;lt;li&amp;gt;don't worry if your queries are efficient until it starts to matter&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;according to below quote, you're doing it wrong&amp;lt;/li&amp;gt;&#10;&amp;lt;/ul&amp;gt;&#10;&#10;&amp;lt;blockquote&amp;gt;&#10;  &amp;lt;p&amp;gt;The way I have been going about the&#10;  mind switch is to forget about the&#10;  database alltogether. In the&#10;  relational db world you always have to&#10;  worry about data normalization and&#10;  your table structure. Ditch it all.&#10;  Just layout your web page. Lay them&#10;  all out. Now look at them. Your&#10;  already 2/3 there. If you forget the&#10;  notion that database size matters and&#10;  data shouldn't be duplicated than your&#10;  3/4 there and you didnt even have to&#10;  write any code! Let your views dictate&#10;  your Models. You don't have to take&#10;  your objects and make them 2&#10;  dimensional anymore as in the&#10;  relational world. You can store&#10;  objects with shape now.&amp;lt;/p&amp;gt;&#10;&amp;lt;/blockquote&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://stackoverflow.com/questions/103727/how-to-think-in-data-stores-instead-of-databases&amp;quot;&amp;gt;how-to-think-in-data-stores-instead-of-databases&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2040509" ParentId="1528827" CreationDate="2010-01-11T07:49:44.310" OwnerUserId="247865" Tags="[]" Body="&amp;lt;p&amp;gt;Avinu Beyond the Cloud uses MongoDB and the Vork framework&#10;&amp;lt;a href=&amp;quot;http://www.Avinu.org&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://www.Avinu.org&amp;lt;/a&amp;gt; &amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2042965" ParentId="1997069" CreationDate="2010-01-11T15:59:36.090" OwnerUserId="3211" Tags="[]" Body="&amp;lt;p&amp;gt;The Amazon.com architecture is very interesting. They moved to a service oriented architecture, if you look at all the different content areas on their site, each one is served by a different service. So there is a 'wish list' service and a 'Related to Items You've Viewed' service, and Bestsellers service, Shopping cart service, etc. &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Each of the services has its own set of requirements and features. The requirements include things like response time and availability. Internally each service is implemented using whatever database best suits the needs. The key value store is good for a shopping cart, because you never need to do:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;select * from book where book_id = n&#10;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;on a shopping cart.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;One of the important things to realize is the enormous role that availability plays at Amazon scale. Consider that Amazon 2008 revenue was $19.166 billion. The total retail revenue from from the Amazon.com site may be more than $1000 per second during the day (it may be double that, for all I know, during peak hours. It could be 5 times that during peak holiday shopping). Think of the cost if the shopping cart service goes down for 3 minutes during peak usage. It is clear that the loss would be a large dollar value in abandon carts.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Using a key-value store doesn't mean embracing rampant data duplication, it means redesigning applications so the necessary data doesn't need sit all in one monolithic database.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Amazon is really more of a platform for applications than anything else. Here is a &amp;lt;a href=&amp;quot;http://www.infoq.com/presentations/vogels-amazon-platform&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;video of Amazon's CTO&amp;lt;/a&amp;gt; talking about just that.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2045418" ParentId="2041622" CreationDate="2010-01-11T22:31:06.347" OwnerUserId="53404" Tags="[]" Body="&amp;lt;p&amp;gt;Hi there,&#10;graphs databases like &amp;lt;a href=&amp;quot;http://www.neo4j.org&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Neo4j&amp;lt;/a&amp;gt; are a very good fit, especially as you can add different indexing schemes dynamically as you go. Typical stuff you can do on your base data is of course 1D indexing (e.g. Timline or B-Trees) or funkier stuff like Hilbert Curves etc, see &amp;lt;a href=&amp;quot;http://blog.notdot.net/2009/11/Damn-Cool-Algorithms-Spatial-indexing-with-Quadtrees-and-Hilbert-Curves&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Nick's blog&amp;lt;/a&amp;gt;. Also, for some live demonstration, look at the AWE open source GIS desktop tool &amp;lt;a href=&amp;quot;http://www.youtube.com/craigtaverner&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;here&amp;lt;/a&amp;gt;, the underlying indexed graph being visible around time 07:00 .&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2056754" ParentId="2041622" CreationDate="2010-01-13T13:04:41.253" OwnerUserId="159235" Tags="[]" Body="&amp;lt;p&amp;gt;I've been storing spatial data with ZODB. There's some inherent performance advantage in accessing local file data (spatialite) or unix socket (PostGIS) compared to TCP or HTTP requests (CouchDB etc), surely, but having an spatial index makes the biggest difference. I'm using the same R-trees mentioned in the MongoDB article, but there are plenty of good options. The JTS topology suite has various spatial indexes for Java.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2059509" ParentId="1813612" CreationDate="2010-01-13T19:17:04.107" OwnerUserId="250136" Tags="[]" Body="&amp;lt;p&amp;gt;Also if you like the idea of JSON/REST and sticking to JavaScript client to server, the newer generation of Persevere's core, Pintura is pure JS JSON/REST framework that is designed specifically to work well with NoSQL DBs.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2081090" ParentId="2081080" CreationDate="2010-01-17T13:27:56.490" OwnerUserId="47550" Tags="[]" Body="&amp;lt;p&amp;gt;Have you considered simply serializing an ADO DataSet for your data store?&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2081415" ParentId="2081080" CreationDate="2010-01-17T15:20:07.670" OwnerUserId="128709" Tags="[]" Body="&amp;lt;p&amp;gt;Personally I would go for SQLite with NHibernate (and Fluent NHibernate). NHibernate can generate the database schema automatically for your classes, so you just need to specify what classes you want to persist, and that's quite easy with Fluent NHibernate. Furthermore, you can search for specific objects and you don't need to load all data to memory.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Best Regards&amp;lt;br&amp;gt;&#10;Oliver Hanappi&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2081578" ParentId="2081148" CreationDate="2010-01-17T16:05:18.750" OwnerUserId="21239" Tags="[]" Body="&amp;lt;p&amp;gt;I don't claim to have a definitive answer to all of this (it's a rather open-ended question which you should try to break into smaller parts and it depends on your actual requirements, in fact I'm tempted to vote to close it) but I will comment on a few things:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;ol&amp;gt;&#10;&amp;lt;li&amp;gt;I would forget about modelling this on a RDBMS. &amp;lt;a href=&amp;quot;http://www.kimbly.com/blog/000239.html&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Faceted search just doesn't work in a relational schema&amp;lt;/a&amp;gt;.&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;IMO this is not the right place for code generation. You should design your code so it doesn't change with data changes (I'm not talking about &amp;lt;em&amp;gt;schema&amp;lt;/em&amp;gt; changes).&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;Storing metadata / attributes on an Excel spreadsheet seems like a very bad idea. I'd build a UI to edit this, which would be stored on Solr / MongoDB / CouchDB / whatever you choose to manage this.&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;Solr &amp;lt;strong&amp;gt;does not&amp;lt;/strong&amp;gt; &amp;quot;just mirror relational DB&amp;quot;. In fact, Solr is completely independent of relational databases. One of the most common cases &amp;lt;em&amp;gt;is&amp;lt;/em&amp;gt; dumping data from a RDBMS to Solr (denormalizing data in the process), but Solr is flexible enough to work without any relational data source.&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;http://wiki.apache.org/solr/HierarchicalFaceting&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Hierarchical faceting in Solr&amp;lt;/a&amp;gt; is still an open issue in research. Currently there are two separate approaches being researched (&amp;lt;a href=&amp;quot;http://issues.apache.org/jira/browse/SOLR-64&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;SOLR-64&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;quot;http://issues.apache.org/jira/browse/SOLR-792&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;SOLR-792&amp;lt;/a&amp;gt;)&amp;lt;/li&amp;gt;&#10;&amp;lt;/ol&amp;gt;&#10;"/>
  <row Id="2082588" ParentId="2081080" CreationDate="2010-01-17T20:53:37.507" OwnerUserId="43901" Tags="[]" Body="&amp;lt;p&amp;gt;You can use document store MongoDB, it has a .Net driver and it doesn't have a schema. However it is &amp;lt;strong&amp;gt;not&amp;lt;/strong&amp;gt; embedded, MongoDB runs as a separate process. See &amp;lt;a href=&amp;quot;http://github.com/samus/mongodb-csharp&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://github.com/samus/mongodb-csharp&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2120804" ParentId="2113866" CreationDate="2010-01-22T21:52:15.253" OwnerUserId="105938" Tags="[]" Body="&amp;lt;p&amp;gt;From the article, it sounds like Fossil isn't a database any more than git is a database. Yes, it's a thing that contains data, and yes, it's backed by a database, but it seems pretty far from a database itself. So the first part of of your question basically relies on a faulty assumption. There is a database called &amp;lt;a href=&amp;quot;http://friendlyorm.com/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Friendly&amp;lt;/a&amp;gt; which uses MySQL to store schema-less models, but it seems like an awkward bandaid sort of solution at best.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;I'm certainly not familiar with all of the NoSQL options out there, but, to my knowledge, none of the well-though-of ones use SQL for anything. MongoDB and CouchDB, the two I'm most familiar with, both use Javascript as part of their query interface, though in very different ways. MongoDB has queries more like what you'd expect from a relational database: you can write an arbitrary query for all documents that match a certain set of attributes. However, unlike a relational database, there's no such thing as a join (you'll only ever get a list of distinct documents back, not compound documents) and you can write arbitrary Javascript code to select documents. CouchDB, on the other hand, does not allow arbitrary queries. Instead, you create views (which are essentially simpler key-value stores) using map/reduce functions written in Javascript and then query those views from a start key to and end key.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;In both cases, the type of information being transmitted to the server to perform the query isn't well-suited for the type of problem that SQL is good at solving. The trade-off to SQL being so high-level (to use the logic of the author of the paper) is that it's only suitable for a very narrow set of problems.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2123450" ParentId="1799958" CreationDate="2010-01-23T14:25:01.733" OwnerUserId="190822" Tags="[]" Body="&amp;lt;p&amp;gt;Riak can not be run on Windows, only on Linux and Mac.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2140125" ParentId="2138454" CreationDate="2010-01-26T14:50:46.987" OwnerUserId="215860" Tags="[]" Body="&amp;lt;p&amp;gt;There's currently no way to filter on embedded docs in the way you're describing. Using the dot notation allows you to match on an embedded doc, but the entire document, parent and all, will still be returned. It's also possible to select which fields will be returned, but that doesn't really help your case, either.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;We have a &amp;quot;virtual collections&amp;quot; case, which would implement the desired functionality; feel free to vote on it:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://jira.mongodb.org/browse/SERVER-142&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://jira.mongodb.org/browse/SERVER-142&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;In the meantime, you should probably treat comments as their own collection. In general, if you need to work with a given data set on its own, make it a collection. If it's better conceived of as part of some other set, it's better to embed.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2140200" ParentId="2140011" CreationDate="2010-01-26T15:02:13.440" OwnerUserId="220825" Tags="[]" Body="&amp;lt;p&amp;gt;For crazy performance contraints you can't beat Tokyo Cabinet: &amp;lt;a href=&amp;quot;http://1978th.net/tokyocabinet/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://1978th.net/tokyocabinet/&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;There is also a server component called Tokyo Tyrant which looks really cool.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2140228" ParentId="2140011" CreationDate="2010-01-26T15:06:53.720" OwnerUserId="206367" Tags="[]" Body="&amp;lt;p&amp;gt;What about Sqlite? The site is &amp;lt;a href=&amp;quot;http://sqlite.org/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;here&amp;lt;/a&amp;gt;. The front end to edit/manage the sqlite database is &amp;lt;a href=&amp;quot;http://sqliteman.com/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;sqliteman&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Hope this helps,&#10;Best regards,&#10;Tom.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2144279" ParentId="337344" CreationDate="2010-01-27T02:53:11.387" OwnerUserId="259740" Tags="[]" Body="&amp;lt;p&amp;gt;Another advantage of document-oriented databases is the ease of usage and programming so that untrained business users, for example, can create applications and design their own databases. Information can be added without worrying about the &amp;quot;record size&amp;quot; and so programmers simply need to build an interface to allow the information to be entered easily.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2144344" ParentId="337344" CreationDate="2010-01-27T03:13:25.130" OwnerUserId="46571" Tags="[]" Body="&amp;lt;p&amp;gt;A possibility is to have a main relational database that stores definitions of items that can be retrieved by their IDs, and a document database for the descriptions and/or specifications of those items. For example, you could have a relational database with a Products table with the following fields:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;ul&amp;gt;&#10;&amp;lt;li&amp;gt;ProductID&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;Description&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;UnitPrice&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;LotSize&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;Specifications&amp;lt;/li&amp;gt;&#10;&amp;lt;/ul&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;And that Specifications field would actually contain a reference to a document with the technical specifications of the product. This way, you have the best of both worlds.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2144765" ParentId="2140011" CreationDate="2010-01-27T05:26:40.147" OwnerUserId="234031" Tags="[]" Body="&amp;lt;p&amp;gt;Does your project want to support some form of offline data? If so you should probably go with CouchDB since the replication model is designed to support offline data changes and sync.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2151268" ParentId="2140011" CreationDate="2010-01-27T23:49:45.580" OwnerUserId="164255" Tags="[]" Body="&amp;lt;p&amp;gt;MongoDB works great with C - there is both a C driver and a C++ driver.  The database uses the C++ driver itself for functions like replication (MongoDB is written in C++).&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://www.mongodb.org/display/DOCS/Drivers&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://www.mongodb.org/display/DOCS/Drivers&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2162858" ParentId="1799958" CreationDate="2010-01-29T15:19:57.323" OwnerUserId="261916" Tags="[]" Body="&amp;lt;p&amp;gt;It does run, altough I havent managed to run it as a service yet.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Install CYGwin, install latest erlang, get source code, compile in cygwin&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;then the fun part, adjust according to your paths and place into a batch&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;c:\riak\rel\riak\erts-5.7.4\bin\erl -boot c:\riak\rel\riak\releases\0.8\riak -embedded -config c:\riak\rel\riak\etc\app.config -args_file c:\riak\rel\riak\etc\vm.args -- console&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Regards&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2171599" ParentId="2167481" CreationDate="2010-01-31T12:11:31.197" OwnerUserId="247469" Tags="[]" Body="&amp;lt;p&amp;gt;I found this : &amp;lt;a href=&amp;quot;http://www.emmet-gray.com/Articles/ESE.htm&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://www.emmet-gray.com/Articles/ESE.htm&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;There is a sample vb.net app that displays the tables + columns for an edb file.   I'm using Win7 x64, and I couldnt open the database given in the sample path 'C:\WINDOWS\SoftwareDistribution\DataStore\DataStore.edb' - I received a &amp;quot;The database page size does not match the engine&amp;quot; error.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;However, I created a new edb file using the c# managed api, and was able to use the browser with this file.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Hope it helps someone...&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2172261" ParentId="2170152" CreationDate="2010-01-31T15:45:46.347" OwnerUserId="145366" Tags="[]" Body="&amp;lt;p&amp;gt;&amp;quot;NoSQL&amp;quot; should be more about building the datastore to follow your application requirements, not about building the app to follow a certain structure -- that's more like a traditional &amp;lt;em&amp;gt;SQL approach&amp;lt;/em&amp;gt;.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Don't abandon a relational database &amp;quot;just because&amp;quot;; only do it if your app really needs to.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2173089" ParentId="2173082" CreationDate="2010-01-31T19:59:04.813" OwnerUserId="101258" Tags="[]" Body="&amp;lt;p&amp;gt;From wikipedia:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;blockquote&amp;gt;&#10;  &amp;lt;p&amp;gt;NoSQL is an umbrella term for a loosely defined class of non-relational data stores that break with a long history of relational databases and ACID guarantees. Data stores that fall under this term may not require fixed table schemas, and usually avoid join operations. The term was first popularised in early 2009.&amp;lt;/p&amp;gt;&#10;&amp;lt;/blockquote&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;The motivation for such an architecture was high scalability, to support sites such as Facebook, advertising.com, etc...&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2173090" ParentId="2173082" CreationDate="2010-01-31T19:59:13.660" OwnerUserId="110933" Tags="[]" Body="&amp;lt;p&amp;gt;Take a look at these:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://en.wikipedia.org/wiki/Nosql#List_of_NoSQL_open_source_projects&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://en.wikipedia.org/wiki/Nosql#List_of_NoSQL_open_source_projects&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;and this:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://www.mongodb.org/display/DOCS/Comparing+Mongo+DB+and+Couch+DB&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://www.mongodb.org/display/DOCS/Comparing+Mongo+DB+and+Couch+DB&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2173158" ParentId="2173082" CreationDate="2010-01-31T20:23:02.700" OwnerUserId="234815" Tags="[]" Body="&amp;lt;p&amp;gt;I used something called the &amp;lt;a href=&amp;quot;http://www.raima.com/products/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Raima Data Manager&amp;lt;/a&amp;gt; more than a dozen years ago, that qualifies as NoSQL.  It calls itself a &amp;quot;Set Oriented Database&amp;quot;  Its not based on tables, and there is no query &amp;quot;language&amp;quot;, just an C API for asking for subsets.  &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;It's &amp;lt;em&amp;gt;fast&amp;lt;/em&amp;gt; and easier to work with in C/C++ and SQL, there's no building up strings to pass to a query interpreter and the data comes back as an enumerable object rather than as an array.  variable sized records are normal and don't waste space.  I never saw the source code, but there were some hints at the interface that internally, the code used pointers a lot. &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;I'm not sure that the product I used is even sold anymore, but the company is still around.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2177226" ParentId="2170152" CreationDate="2010-02-01T14:13:38.047" OwnerUserId="6844" Tags="[]" Body="&amp;lt;p&amp;gt;I think that currently, the whole idea of NoSQL data stores and the concept of document databases is so new and different from the established ideas which drive relational storage that there are currently very few (if any) best practices.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;We know at this point that the rules for storing your data within say CouchDB (or any other document database) are rather different to those for a relational one. For example, it is pretty much a fact that normalisation and aiming for 3NF is not something one should strive for. One of the common examples would be that of a simple blog.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;In a relational store, you'd have a table each for &amp;quot;Posts&amp;quot;, &amp;quot;Comments&amp;quot; and &amp;quot;Authors&amp;quot;. Each Author would have many Posts, and each Post would have many Comments. This is a model which works well enough, and maps fine over any relational DB. However, storing the same data within a docDB would most likely be rather different. You'd probably have something like a collection of Post documents, each of which would have its own Author and collection of Comments embedded right in. Of course that's probably not the only way you could do it, and it is somewhat a compromise (now querying for a single post is fast - you only do one operation and get everything back), but you have no way of maintaining the relationship between authors and posts (since it all becomes part of the post document).&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;I too have seen examples making use of a &amp;quot;type&amp;quot; attribute (in a CouchDB example). Sure, that sounds like a viable approach. Is it the best one? I haven't got a clue. Certainly in MongoDB you'd use seperate collections within a database, making the type attribute total nonsense. In CouchDB though... perhaps that &amp;lt;em&amp;gt;is&amp;lt;/em&amp;gt; best. The other alternatives? Separate databases for each type of document? This seems a bit loopy, so I'd lean towards the &amp;quot;type&amp;quot; solution myself. But that's just me. Perhaps there's something better.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;I realise I've rambled on quite a bit here and said very little, most likely nothing you didn't already know. My point is this though - I think its up to us to experiment with the tools we've got and the data we're working with and over time the good ideas will be spread and &amp;lt;em&amp;gt;become&amp;lt;/em&amp;gt; the best-practices. I just think you're asking a little too early in the game.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2183517" ParentId="1974069" CreationDate="2010-02-02T11:14:00.067" OwnerUserId="18548" Tags="[]" Body="&amp;lt;p&amp;gt;I joined the infogrid mailing list and wrote to the dev team to include a simple getting started article. The dev's have been kind enough to provide the same on their wiki here: &amp;lt;a href=&amp;quot;http://infogrid.org/wiki/Examples/FirstStep&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://infogrid.org/wiki/Examples/FirstStep&amp;lt;/a&amp;gt; &amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2206058" ParentId="1777103" CreationDate="2010-02-05T09:06:48.993" OwnerUserId="231183" Tags="[]" Body="&amp;lt;p&amp;gt;db4o is great, but be aware that it has an open source version, but it is not free for commercial use.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2211979" ParentId="1974069" CreationDate="2010-02-06T04:01:29.287" OwnerUserId="267575" Tags="[]" Body="&amp;lt;p&amp;gt;I am an early user and have some experience I can share. Basically this stuff rocks. It's quite hard to get your head into at first but once once you get past the &amp;quot;aha&amp;quot; it makes complete sense.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2214161" ParentId="2212230" CreationDate="2010-02-06T18:26:26.637" OwnerUserId="248393" Tags="[]" Body="&amp;lt;p&amp;gt;Depends on your DB, but ... I would say in general, you can use &amp;lt;a href=&amp;quot;http://en.wikipedia.org/wiki/Optimistic_concurrency_control&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;'Optimistic transactions'&amp;lt;/a&amp;gt; to achieve this but I imagine one should make sure to understand the database implementation's &amp;lt;a href=&amp;quot;http://en.wikipedia.org/wiki/Atomic_operation&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;atomicity&amp;lt;/a&amp;gt; guarantees (e.g. what kind of write and read operations are atomic).&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;There seems to be &amp;lt;a href=&amp;quot;http://www.google.co.uk/search?q=hbase+transactions&amp;amp;#38;amp;esrch=FT1&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;some discussions on the net&amp;lt;/a&amp;gt; about &amp;lt;a href=&amp;quot;http://hadoop.apache.org/hbase/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;HBase&amp;lt;/a&amp;gt; transactions, if thats any help.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2214420" ParentId="2212230" CreationDate="2010-02-06T19:35:30.363" OwnerUserId="164255" Tags="[]" Body="&amp;lt;p&amp;gt;Generally speaking, NoSQL solutions have lighter weight transactional semantics than relational databases, but still have facilities for atomic operations at some level.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Generally, the ones which do master-master replication provide less in the way of consistency, and more availability.  So one should choose the right tool for the right problem.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Many offer transactions at the single document (or row etc.) level.  For example with MongoDB there is atomicity at the single document - but documents can be fairly rich so this usually works pretty well -- more info &amp;lt;a href=&amp;quot;http://www.mongodb.org/display/DOCS/Atomic+Operations&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;here&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2214948" ParentId="2124216" CreationDate="2010-02-06T22:14:12.093" OwnerUserId="186593" Tags="[]" Body="&amp;lt;p&amp;gt;I don't have any personal experience with it, but you might check out MongoDB which has drivers in C# etc.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;See this blog post for some info: &amp;lt;a href=&amp;quot;http://odetocode.com/Blogs/scott/archive/2009/10/13/experimenting-with-mongodb-from-c.aspx&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://odetocode.com/Blogs/scott/archive/2009/10/13/experimenting-with-mongodb-from-c.aspx&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2219403" ParentId="2041622" CreationDate="2010-02-08T03:31:41.780" OwnerUserId="266609" Tags="[]" Body="&amp;lt;p&amp;gt;Couchdb also has a simple spatial extension &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://vmx.cx/cgi-bin/blog/index.cgi/category/CouchDB&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://vmx.cx/cgi-bin/blog/index.cgi/category/CouchDB&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2224193" ParentId="2212279" CreationDate="2010-02-08T19:16:26.887" OwnerUserId="130168" Tags="[]" Body="&amp;lt;p&amp;gt;Cassandra rows can be very large, so consider modeling it as columns in a row rather than rows in a CF; then you can use the column slice operations, which are faster than row slices.  If there are no &amp;quot;natural&amp;quot; keys associated with this then you can use daily or hourly keys like &amp;quot;2010/02/08 13:00&amp;quot;.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Otherwise, yes, using range queries (get_key_range is deprecated in 0.5; use get_range_slice) is your best option.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2224669" ParentId="1899843" CreationDate="2010-02-08T20:34:30.133" OwnerUserId="12089" Tags="[]" Body="&amp;lt;p&amp;gt;MongoDB is a document database, not a key/value store. It does provide, however, a simple form of &amp;lt;a href=&amp;quot;http://www.mongodb.org/display/DOCS/DB+Ref&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;inter-document references&amp;lt;/a&amp;gt;. These work more-or-less like SQL foreign keys that are automatically nulled when the referenced object is deleted.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;This is adequate for the same sorts of things for which you'd use foreign keys, but it isn't optimized for serious graph traversal.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2229458" ParentId="2229420" CreationDate="2010-02-09T13:46:52.610" OwnerUserId="111124" Tags="[]" Body="&amp;lt;p&amp;gt;I'm not sure I would agree that the traditional SQL databases can not handle these volumes, I can query through much larger datasets within those timeframes, but it has been designed specifically to handle that kind of work and placed on suitable hardware, specifically an IO subsystem that is designed to handle large data requests. &amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2229461" ParentId="2229420" CreationDate="2010-02-09T13:47:21.533" OwnerUserId="4918" Tags="[]" Body="&amp;lt;p&amp;gt;That really depends on what clauses you have in your WHERE and what kind of projection you need on your data.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;It might be good enough to create the appropriate index on your table.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Also, even having an optimal data structure is of no use, if you have to read 100GB per query as that will take its time too.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2229473" ParentId="2229420" CreationDate="2010-02-09T13:48:23.813" OwnerUserId="55159" Tags="[]" Body="&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;NoSQL&amp;lt;/code&amp;gt;, as you may have read, is not a relational database.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;It is a database which stores key-value pairs which you can traverse using a proprietary &amp;lt;code&amp;gt;API&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;This implies you will need to define the physical layout of the data yourself, as well as do any code optimizations.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;I'm quite outdated on this, but several years ago I've participated in a &amp;lt;a href=&amp;quot;http://en.wikipedia.org/wiki/Berkeley_DB&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;&amp;lt;code&amp;gt;BerkeleyDB&amp;lt;/code&amp;gt;&amp;lt;/a&amp;gt; project dealing with slightly less but still high volumes of data (about &amp;lt;code&amp;gt;100Gb&amp;lt;/code&amp;gt;).&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;It was perfectly OK for our needs.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Please also note, though it may seem obvious to you, that the queries can be optimized. Could you please post the query you use here?&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2229523" ParentId="2229420" CreationDate="2010-02-09T13:55:14.363" OwnerUserId="15401" Tags="[]" Body="&amp;lt;p&amp;gt;If you want to do ad-hoc queries for reporting or analysis you're probably better off with something that will play nicely with off-the-shelf reporting tools.  Otherwise you are likely to find yourself getting dragged off all the time to write little report programs to query the data.  This is a strike against NoSQL type databases, but it may or may not be an issue depending on your circumstances.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;300GB should not be beyond the capabilities of modern RDBMS platforms, even MS SQL Server.  Some other options for large database queries of this type are:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;ul&amp;gt;&#10;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;See if you can use a SSAS cube and aggregations to mitigate your query performance issues.  Usage-based optimiisation might get you adequate performance without having to get another database system.  SSAS can also be used in shared-nothing configurations, allowing you to stripe your queries across a cluster of relatively cheap servers with direct-attach disks.  Look at ProClarity for a front-end if you do go this way.&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;Sybase IQ is a RDBMS platform that uses an underlying data structure optimised for reporting queries.  It has the advantage that it plays nicely with a reasonable variety of conventional reporting tools.  Several other systems of this type exist, such as Red Brick, Teradata or Greenplum (which uses a modified version of PostgreSQL).  The principal strike against these systems is that they are not exactly mass market items and can be quite expensive.&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;Microsoft has a shared-nothing version of SQL Server in the pipeline, which you might be able to use.  However they've tied it to third party hardware manufacturers so you can only get it with dedicated (and therefore expensive) hardware.&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;Look for opportunities to build data marts with aggregated data to reduce the volumes for some of the queries.&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;Look at tuning your hardware.  Direct attach SAS arrays and RAID controllers can put through streaming I/O of the sort used in table scans pretty quickly.  If you partition your tables over a large number of mirrored pairs you can get very fast streaming performance - easily capable of saturating the SAS channels.&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;Practically, you're looking at getting 10-20GB/sec from your I/O subsystem if you want the performance targets you describe, and it is certianly possible to do this without resorting to really exotic hardware.&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&#10;&amp;lt;/ul&amp;gt;&#10;"/>
  <row Id="2229554" ParentId="2229420" CreationDate="2010-02-09T14:00:08.340" OwnerUserId="31326" Tags="[]" Body="&amp;lt;p&amp;gt;From what little I understand, traditional RDBMS are row based which optimizes for insertion speed.  But retrieval speed optimization is best achieved with a column based storage system.  &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;See &amp;lt;a href=&amp;quot;http://en.wikipedia.org/wiki/Column-oriented_DBMS&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Column oriented DBMS&amp;lt;/a&amp;gt; for a more thorough explanation than I could give&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2229880" ParentId="2229420" CreationDate="2010-02-09T14:46:08.847" OwnerUserId="9034" Tags="[]" Body="&amp;lt;p&amp;gt;A properly set up SQL server should be able to handle data in the terrabytes without having performance problems. I have several friends who manage SQl Server databases that size with no perfomance issues. &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Your problem may be one or more of these:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;ul&amp;gt;&#10;&amp;lt;li&amp;gt;Inadequate server specs&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;Lack of good partitioning&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;Poor indexing&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;Poor database design&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;Poor query design including using&#10;tools like LINQ which may write&#10;poorly performing code for a database&#10;that size.&amp;lt;/li&amp;gt;&#10;&amp;lt;/ul&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;It assuredly is NOT the ability of SQL Server to handle these loads. If you have a databse that size you need to hire a professional dba with experience in optimizing large systems.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2232849" ParentId="2231019" CreationDate="2010-02-09T22:01:24.683" OwnerUserId="234655" Tags="[]" Body="&amp;lt;p&amp;gt;Coming from a HBase/BigTable point of view, typically you would completely denormalize your data, and use a &amp;quot;list&amp;quot; field, or multidimensional map column (see this &amp;lt;a href=&amp;quot;http://jimbojw.com/wiki/index.php?title=Understanding_Hbase_and_BigTable&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;link&amp;lt;/a&amp;gt; for a better description).&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;blockquote&amp;gt;&#10;  &amp;lt;p&amp;gt;The word &amp;quot;column&amp;quot; is another loaded&#10;  word like &amp;quot;table&amp;quot; and &amp;quot;base&amp;quot; which&#10;  carries the emotional baggage of years&#10;  of RDBMS experience. &amp;lt;/p&amp;gt;&#10;  &#10;  &amp;lt;p&amp;gt;Instead, I find it easier to think&#10;  about this like a multidimensional map&#10;  - a map of maps if you will.&amp;lt;/p&amp;gt;&#10;&amp;lt;/blockquote&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;For your example for a many-to-many relationship, you can still create two tables, and use your multidimenstional map column to hold the relationship between the tables.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;See the FAQ question 20 in the Hadoop/HBase &amp;lt;a href=&amp;quot;http://wiki.apache.org/hadoop/Hbase/FAQ#A20&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;FAQ&amp;lt;/a&amp;gt;:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;blockquote&amp;gt;&#10;  &amp;lt;p&amp;gt;Q:[Michael Dagaev] How would you&#10;  design an Hbase table for many-to-many&#10;  association between two entities, for&#10;  example Student and Course?  &amp;lt;/p&amp;gt;&#10;  &#10;  &amp;lt;p&amp;gt;I would&#10;  define two tables:  Student: student&#10;  id student data (name, address, ...)&#10;  courses (use course ids as column&#10;  qualifiers here) Course: course id&#10;  course data (name, syllabus, ...)&#10;  students (use student ids as column&#10;  qualifiers here)  Does it make sense? &amp;lt;/p&amp;gt;&#10;  &#10;  &amp;lt;p&amp;gt;A[Jonathan Gray] : Your design does&#10;  make sense.  As you said, you'd&#10;  probably have two column-families in&#10;  each of the Student and Course tables.&#10;  One for the data, another with a&#10;  column per student or course. For&#10;  example, a student row might look&#10;  like: Student : id/row/key = 1001&#10;  data:name = Student Name data:address&#10;  = 123 ABC St courses:2001 = (If you need more information about this&#10;  association, for example, if they are&#10;  on the waiting list) courses:2002 =&#10;  ...  This schema gives you fast access&#10;  to the queries, show all classes for a&#10;  student (student table, courses&#10;  family), or all students for a class&#10;  (courses table, students family).&amp;lt;/p&amp;gt;&#10;&amp;lt;/blockquote&amp;gt;&#10;"/>
  <row Id="2232908" ParentId="2231019" CreationDate="2010-02-09T22:11:21.467" OwnerUserId="111332" Tags="[]" Body="&amp;lt;p&amp;gt;In MongoDB an often used approach would be store a list of _ids of car types in each car shop. So no separate join table but still basically doing a client-side join.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Embedded documents become more relevant for cases that aren't many-to-many like this.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2234395" ParentId="2231019" CreationDate="2010-02-10T04:22:23.313" OwnerUserId="234031" Tags="[]" Body="&amp;lt;p&amp;gt;I can only speak to CouchDB.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;The best way to stick your data in the db is to not normalize it at all beyond converting it to JSON. If that data is &amp;quot;cars&amp;quot; then stick all the data about every car in the database.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;You then use map/reduce to create a normalized index of the data. So, if you want an index of every car, sorted first by shop, then by car-type you would emit each car with an index of [shop, car-type].&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Map reduce seems a little scary at first, but you don't need to understand all the complicated stuff or even btrees, all you need to understand is how the key sorting works.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://wiki.apache.org/couchdb/View_collation&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://wiki.apache.org/couchdb/View_collation&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;With that alone you can create amazing normalized indexes over differing documents with the map reduce system in CouchDB.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2235198" ParentId="2229420" CreationDate="2010-02-10T07:50:36.117" OwnerUserId="13724" Tags="[]" Body="&amp;lt;p&amp;gt;I expect a &amp;quot;conventional&amp;quot; database can do what you want, provided you structure your data appropriately for the queries you're doing.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;You may find that in order to generate reports respectably, you need to summarise your data as it is generated (or loaded, transformed etc) and report off the summary data.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;The speed of a SELECT is not related (directly, in most cases) to the number of conditions in the WHERE clause (usually), but it is to do with the explain plan and the number of rows examined. There are tools which will analyse this for you.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Ultimately, at 300G (which is not THAT big) you will probably need to keep some of your data on disc (=slow) at least some of the time so you want to start reducing the number of IO operations required. Reducing IO operations may mean making covering indexes, summary tables and copies of data with differing clustered indexes. This makes your 300G bigger, but who cares.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;IO ops are king :)&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Clearly doing these things is very expensive in terms of developer time, so you should start by throwing lots of hardware at the problem, and only try to fix it with software once that becomes insufficient. Lots of RAM is a start (but it won't be able to store &amp;gt; 10-20% of your data set at a time at current cost-effective levels) Even SSDs are not that expensive these days.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2247223" ParentId="2247036" CreationDate="2010-02-11T19:44:54.013" OwnerUserId="63051" Tags="[]" Body="&amp;lt;p&amp;gt;No. Right now, NoSql databases are very disparate, therefore they cannot be wrapped under a standard interface while remaining non trivial.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2247790" ParentId="2247036" CreationDate="2010-02-11T21:21:49.567" OwnerUserId="200304" Tags="[]" Body="&amp;lt;p&amp;gt;We have such an abstraction in &amp;lt;a href=&amp;quot;http://infogrid.org/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;InfoGrid&amp;lt;/a&amp;gt; called the Store interface. It is very simplistic, but was created exactly for that purpose: a common API that allows InfoGrid to talk to different key-value store implementations without requiring changes on the higher levels.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Some links:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;ul&amp;gt;&#10;&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;http://infogrid.org/wiki/Store&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Store summary&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;http://infogrid.org/browser/trunk/ig-stores/modules/org.infogrid.store/src/org/infogrid/store/Store.java&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Store interface&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;http://infogrid.org/browser/trunk/ig-stores/modules/org.infogrid.store/src/org/infogrid/store/Store.java&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;IterableStore interface&amp;lt;/a&amp;gt; -- same, but iterable: some key-value stores can be iterated over easily, some can't&amp;lt;/li&amp;gt;&#10;&amp;lt;/ul&amp;gt;&#10;"/>
  <row Id="2248697" ParentId="2247036" CreationDate="2010-02-11T23:58:18.863" OwnerUserId="36710" Tags="[]" Body="&amp;lt;p&amp;gt;Even if the NOSQL databases are very different from each other, they can be divided into meaningful groups, see &amp;lt;a href=&amp;quot;http://blogs.neotechnology.com/emil/2009/11/nosql-scaling-to-size-and-scaling-to-complexity.html&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;this blog post&amp;lt;/a&amp;gt;. A new project aiming at defining abstractions on top of different NOSQL databases is Gremlin, see &amp;lt;a href=&amp;quot;http://www.infoq.com/news/2010/01/Gremlin&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;InfoQ: Gremlin, a Language for Working with Graphs&amp;lt;/a&amp;gt;. Starting out from the graph database end of the NOSQL spectrum, the project has since moved on to document stores, creating an Object Document Model with implementations planned for MongoDB and CouchDB, see &amp;lt;a href=&amp;quot;http://github.com/tinkerpop/blueprints/blob/master/src/main/java/com/tinkerpop/blueprints/odm/Store.java&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;here&amp;lt;/a&amp;gt; and &amp;lt;a href=&amp;quot;http://groups.google.com/group/gremlin-users/browse_thread/thread/d4ce1e9236d0f52f&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;here&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2249966" ParentId="2229420" CreationDate="2010-02-12T06:02:21.247" OwnerUserId="190822" Tags="[]" Body="&amp;lt;p&amp;gt;You should try Kickfire, which is a hardware optimised version of MySql and will breeze through your query.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://www.kickfire.com/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://www.kickfire.com/&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;ps: I do NOT work for kickfire&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2251556" ParentId="2248789" CreationDate="2010-02-12T11:55:33.970" OwnerUserId="124378" Tags="[]" Body="&amp;lt;p&amp;gt;Working with MongoDB in CodeIgniter wouldn't be much different than working with it anywhere else.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;You could knock together a MongoDB library that would connect in the constructor and store $this-&amp;gt;conn to be used in methods later on.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;then either work directly with the conn property in your controllers or create a few methods in your MongoDB library to do this for you.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Take a look &amp;lt;a href=&amp;quot;http://php.net/manual/en/mongo.tutorial.php&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;here&amp;lt;/a&amp;gt; to see the plain PHP tutorial for working with MongoDB.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;I'd happily create you a library for this but it would come with a price. :-p&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2259852" ParentId="2259703" CreationDate="2010-02-14T01:48:28.097" OwnerUserId="140740" Tags="[]" Body="&amp;lt;p&amp;gt;It probably doesn't matter much which Linux you install on a desktop. The user experience will be determined by Gnome or KDE, not the distro.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;The two aspects of linux that have the biggest user-experience impact are the desktop and the package system. Linux has, sadly, two of each.&amp;lt;sup&amp;gt;1.&amp;lt;/sup&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;There are two desktops: Gnome and KDE. In general, you can choose Gnome or KDE with any distro and you can even install both. (You only run one at a time, though.)  Please realize that except for some configuration details, for the most part the distros redistribute the same set of Unix-model software, so you aren't getting anything wildly different or even as different as XP vs Vista. &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Either of the two main package systems can in some ways be used with any distro, but life will be much easier if you stay with the vanilla one for your distro. But since you aren't expecting either one I think it won't matter.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Now, if you went and installed, say, &amp;lt;a href=&amp;quot;http://www.NetBSD.org/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;&amp;lt;strong&amp;gt;NetBSD&amp;lt;/strong&amp;gt;&amp;lt;/a&amp;gt;, then you might notice some real differences, although you would &amp;lt;em&amp;gt;still&amp;lt;/em&amp;gt; have your choice of Gnome or KDE.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;hr&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;sup&amp;gt;1. Technically, there are 10 or 20 window managers that provide interesting lightweight GUI's that are something a bit less than a full-blown desktop GUI, but that's in the advanced class. Also in that class: Unix servers generally run no GUI at all.&amp;lt;/sup&amp;gt;&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2261061" ParentId="2259703" CreationDate="2010-02-14T12:37:30.610" OwnerUserId="217288" Tags="[]" Body="&amp;lt;p&amp;gt;I would go with Ubuntu or OpenSuse since most of the tutorials, community support and other stuff around Mono is targeted to these distributions.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2261118" ParentId="2259703" CreationDate="2010-02-14T12:57:48.320" OwnerUserId="85785" Tags="[]" Body="&amp;lt;p&amp;gt;Note: you can still learn Ruby on windows, you can also use Ruby and .NET with &amp;lt;a href=&amp;quot;http://ironruby.net/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;IronRuby&amp;lt;/a&amp;gt; which is nearly 100% compatible with C Ruby. That's not to stop you from learning linux though as it gives you a different perspective on OS's and will expose you to the power of the command line.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Mono on linux is very complete. The best distribution to use with it would be Open Suse (as it's supported and recommended by Novell who develop Mono).&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;If you want to go the NoSql route than I would recommend looking at &amp;lt;a href=&amp;quot;http://code.google.com/p/redis/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;redis&amp;lt;/a&amp;gt; a very fast and advanced key-value data store with support for rich data structures, i.e. lists, sets and ordered sets. If you use C#/Mono you can this &amp;lt;a href=&amp;quot;http://code.google.com/p/servicestack/wiki/ServiceStackRedis&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;redis client&amp;lt;/a&amp;gt; which has native support for storing complex types and exposes Redis server-side lists and sets as &amp;lt;code&amp;gt;IList&amp;amp;#38;lt;T&amp;amp;#38;gt;&amp;lt;/code&amp;gt; and &amp;lt;code&amp;gt;ICollection&amp;amp;#38;lt;T&amp;amp;#38;gt;&amp;lt;/code&amp;gt;'s.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2264729" ParentId="1886650" CreationDate="2010-02-15T08:33:12.330" OwnerUserId="6488" Tags="[]" Body="&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://code.google.com/p/redis/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Redis&amp;lt;/a&amp;gt; is worth giving a try as &amp;lt;a href=&amp;quot;https://github.com/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Github&amp;lt;/a&amp;gt; uses redis to manage a heavy queue of &amp;lt;a href=&amp;quot;http://github.com/blog/542-introducing-resque&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;background jobs&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2268101" ParentId="2248789" CreationDate="2010-02-15T18:32:17.377" OwnerUserId="155862" Tags="[]" Body="&amp;lt;p&amp;gt;I'm not sure if its the &amp;quot;CodeIgniter way&amp;quot; but I created a CodeIgniter library that extends the Mongo class with an extra property to store the current database connection.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Here are the relevant code files from my project.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;config/mongo.php&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;$config['mongo_server'] = null;&#10;$config['mongo_dbname'] = 'mydb';&#10;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;libraries/Mongo.php&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;class CI_Mongo extends Mongo&#10;{&#10;    var $db;&#10;&#10;    function CI_Mongo()&#10;    {   &#10;        // Fetch CodeIgniter instance&#10;        $ci = get_instance();&#10;        // Load Mongo configuration file&#10;        $ci-&amp;amp;#38;gt;load-&amp;amp;#38;gt;config('mongo');&#10;&#10;        // Fetch Mongo server and database configuration&#10;        $server = $ci-&amp;amp;#38;gt;config-&amp;amp;#38;gt;item('mongo_server');&#10;        $dbname = $ci-&amp;amp;#38;gt;config-&amp;amp;#38;gt;item('mongo_dbname');&#10;&#10;        // Initialise Mongo&#10;        if ($server)&#10;        {&#10;            parent::__construct($server);&#10;        }&#10;        else&#10;        {&#10;            parent::__construct();&#10;        }&#10;        $this-&amp;amp;#38;gt;db = $this-&amp;amp;#38;gt;$dbname;&#10;    }&#10;}&#10;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;And a sample controller&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;controllers/posts.php&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;class Posts extends Controller&#10;{&#10;    function Posts()&#10;    {&#10;        parent::Controller();&#10;    }&#10;&#10;    function index()&#10;    {&#10;        $posts = $this-&amp;amp;#38;gt;mongo-&amp;amp;#38;gt;db-&amp;amp;#38;gt;posts-&amp;amp;#38;gt;find();&#10;&#10;        foreach ($posts as $id =&amp;amp;#38;gt; $post)&#10;        {&#10;            var_dump($id);&#10;            var_dump($post);&#10;        }&#10;    }&#10;&#10;    function create()&#10;    {&#10;        $post = array('title' =&amp;amp;#38;gt; 'Test post');&#10;        $this-&amp;amp;#38;gt;mongo-&amp;amp;#38;gt;db-&amp;amp;#38;gt;posts-&amp;amp;#38;gt;insert($post);&#10;        var_dump($post);&#10;    }&#10;}&#10;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&#10;"/>
  <row Id="2278219" ParentId="2278186" CreationDate="2010-02-17T04:02:37.373" OwnerUserId="241204" Tags="[]" Body="&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://www.mongodb.org/display/DOCS/Home&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Mongo DB&amp;lt;/a&amp;gt; should work well for you.  I haven't used it for blobs yet, but here is a nice FLOSS Weekly &amp;lt;a href=&amp;quot;http://twit.tv/floss105&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;podcast interview with Michael Dirolf&amp;lt;/a&amp;gt; from the Mongo DB team where he addresses this use case.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2278229" ParentId="2278186" CreationDate="2010-02-17T04:04:41.447" OwnerUserId="201225" Tags="[]" Body="&amp;lt;p&amp;gt;Whether or not to store images in a DB or the filesystem is sometime one of those &amp;quot;holy war&amp;quot; type of debates; each side feels their way of doing things is the one right way. In general:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;To store in the DB:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;ul&amp;gt;&#10;&amp;lt;li&amp;gt;Easier to manage back-up/replicate everything at once in once place.&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;Helps with your data consistency and integrity.  You can set the BLOB field to disallow NULLs, but you're not going to be able to prevent an external file from being deleted. (Though this isn't applicable to NoSQL since there aren't the traditional constraints).&amp;lt;/li&amp;gt;&#10;&amp;lt;/ul&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;To store on the filesystem:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;ul&amp;gt;&#10;&amp;lt;li&amp;gt;A filesystem is designed to serve files.  Let it do it's job.&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;The DB is often your bottleneck in an application.  Whatever load you can take off it, the better.&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;Easier to serve on a CDN (which you mentioned isn't applicable in your situation).&amp;lt;/li&amp;gt;&#10;&amp;lt;/ul&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;I tend to come down on the side of the filesystem because it scales much better.  But depending on the size of your project, either choice will likely work fine.  With NoSQL, the differences are even less apparent.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2278263" ParentId="2278186" CreationDate="2010-02-17T04:16:34.607" OwnerUserId="210754" Tags="[]" Body="&amp;lt;p&amp;gt;Well CDN would be the obvious choice.  Since that's out, I'd say your best bet for fault tolerance and load balancing would be your own private data center (whatever that means to you) behind 2 or more load balancers like an F5.  This will be your easiest management system and you can get as much fault tolerance as your hardware budget allows.  You won't need any new software expertise, just XCOPY.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;For true fault tolerance you're going to need geographic dispersion or you're subject to anyone with a backhoe.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;(Gravatars?)&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2287361" ParentId="2285045" CreationDate="2010-02-18T09:02:38.290" OwnerUserId="124894" Tags="[]" Body="&amp;lt;p&amp;gt;I don't. I would like to use a simple and free key-value store that I can call in process but such thing doesn't exist afaik on the Windows platform. Now I use Sqlite but I would like to use something like Tokyo Cabinet. BerkeleyDB has license &amp;quot;issues&amp;quot;. &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;However if you want to use the Windows OS your choice of NoSQL databases is limited. And there isn't always a C# provider &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;I did try MongoDB and it was 40 times faster than Sqlite, so maybe I should use it. But I still hope for a simple in process solution. &amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2289084" ParentId="2285045" CreationDate="2010-02-18T14:01:31.133" OwnerUserId="173227" Tags="[]" Body="&amp;lt;p&amp;gt;I have no first-hand experiences., but I found &amp;lt;a href=&amp;quot;http://blog.boxedice.com/2009/07/25/choosing-a-non-relational-database-why-we-migrated-from-mysql-to-mongodb/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;this&amp;lt;/a&amp;gt; blog entry quite interesting.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2291548" ParentId="2291433" CreationDate="2010-02-18T19:25:21.920" OwnerUserId="27535" Tags="[]" Body="&amp;lt;p&amp;gt;An RDBMS is simply a good all rounder that has lasted for 30 years and shows no sign of flagging.&#10;Things like NoSQL etc are &amp;quot;special case&amp;quot; for certain uses.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;I'd use a document database when I have a document library or similar. Everything else is an RDBMS.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Data aside, if you want to sell this system then you may have to target an RDBMS like SQL Server or Oracle to ensure it's supportable on your customer's infrastructure&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2292619" ParentId="2285045" CreationDate="2010-02-18T22:12:22.783" OwnerUserId="192001" Tags="[]" Body="&amp;lt;p&amp;gt;I used redis to store logging messages across machines. It was very easy to implement, and very useful. Redis really rocks&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2293862" ParentId="2291433" CreationDate="2010-02-19T03:22:47.900" OwnerUserId="39094" Tags="[]" Body="&amp;lt;p&amp;gt;If your data is structured the an RMDBS seems the obvious choice, if it's an unstructured data - such as a document, then a DocDBMS sounds best.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;RMDBS's are more of a 'backend' tool, you'd use it to provide the backend of a system you were developing.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;When you say DocDBMS I'm thinking you mean more of a document management system (?) - which is more of an entire solution which would include (document) data management functionality aimed at end users.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;To me, NoSQL is simply a variant on an RMDBS - but for more sprecific / niche needs.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;As to how to choose: draw up a list of NFR's which are relevant and do some simple analysis of the options and how they relate; scalability and performance come to mind, what about data volumes and transaction rates?  DR?  And of course important functional needs.  Are you more worried about execution qualities of whats built or longer-term evolution qualities?&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2294676" ParentId="2293674" CreationDate="2010-02-19T07:22:35.873" OwnerUserId="55562" Tags="[]" Body="&amp;lt;p&amp;gt;Pre 1.0, django ORM underwent a major queryset re-factor. One of the reasons for this was &amp;quot;This re-factor enables us to support non relational backends&amp;quot;.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;The official support I think is definitely on the cards; but I think there were more pressing matters for 1.1 and 1.2(now in beta).&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;However, there are of course several independent efforts to use non relational databases with django, including, but not limited to the following:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;ul&amp;gt;&#10;&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;http://www.allbuttonspressed.com/projects/django-nonrel&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Django-nonrel&amp;lt;/a&amp;gt; by Waldemar, who made django work on the appengine using the appengine patch.&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;Using django with mongo db, by Kevin Fricovsky: &amp;lt;a href=&amp;quot;http://bitbucket.org/gumptioncom/django-non-relational/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://bitbucket.org/gumptioncom/django-non-relational/&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;Using django with couch db, an old post, by Eric: &amp;lt;a href=&amp;quot;http://www.eflorenzano.com/blog/post/using-couchdb-django/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://www.eflorenzano.com/blog/post/using-couchdb-django/&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&#10;&amp;lt;/ul&amp;gt;&#10;"/>
  <row Id="2297244" ParentId="2291442" CreationDate="2010-02-19T15:05:21.160" OwnerUserId="130168" Tags="[]" Body="&amp;lt;p&amp;gt;How much ram you needs really depends on your workload: if you are write-mostly you can get away with less, otherwise you will want ram for the read cache.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;You do get more ram for you money at my employer, rackspace cloud:  &amp;lt;a href=&amp;quot;http://www.rackspacecloud.com/cloud_hosting_products/servers/pricing&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://www.rackspacecloud.com/cloud_hosting_products/servers/pricing&amp;lt;/a&amp;gt;.  (our machines also have raided disks so people typically see better i/o performance vs EC2.  Dunno about linode.)&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Since with most VPSes you pay roughly 2x for the next-size instance, i.e., about the same as adding a second small instance, I would recommend going with fewer, larger instances than more, smaller ones, since in small numbers network overhead is not negligible.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;I do know someone using Cassandra on 256MB VMs but you're definitely in the minority if you go that small.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2313672" ParentId="2285045" CreationDate="2010-02-22T19:51:43.043" OwnerUserId="92937" Tags="[]" Body="&amp;lt;p&amp;gt;I apologize for going against your bold text, since I don't have any first-hand experience, but this set of blog posts is a good example of solving a problem with CouchDB.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://johnpwood.net/2009/06/15/couchdb-a-case-study/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;CouchDB: A Case Study&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Essentially, the &amp;lt;a href=&amp;quot;http://textme.net/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;textme&amp;lt;/a&amp;gt; application used CouchDB to deal with their exploding data problem. They found that SQL was too slow to deal with large amounts of archival data, and moved it over to CouchDB. It's an excellent read, and he discusses the entire process of figuring out what problems CouchDB could solve and how they ended up solving them.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2315450" ParentId="2081080" CreationDate="2010-02-23T00:59:02.373" OwnerUserId="260555" Tags="[]" Body="&amp;lt;p&amp;gt;Windows has a built-in embedded non-relational store. It is called ESENT and is used by several Windows applications, including the Active Directory and Windows Desktop Search.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://blogs.msdn.com/windowssdk/archive/2008/10/23/esent-extensible-storage-engine-api-in-the-windows-sdk.aspx&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://blogs.msdn.com/windowssdk/archive/2008/10/23/esent-extensible-storage-engine-api-in-the-windows-sdk.aspx&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;If you want .NET access you can use the ManagedEsent layer on CodePlex.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://managedesent.codeplex.com/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://managedesent.codeplex.com/&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;That project has a PersistentDictionary class that implements a key-value store that implements the IDictionary interface, but is backed by a database.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2315815" ParentId="2081080" CreationDate="2010-02-23T02:45:59.390" OwnerUserId="38207" Tags="[]" Body="&amp;lt;p&amp;gt;Applying the KISS principle to your problem I would recommend you use files.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;As in filename is the key.&#10;File contents is the value.&#10;Windows folder is the index.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Simple, quick, efficient, flexible, and foolproof (providing the fools have low intelligence).&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2316921" ParentId="2285045" CreationDate="2010-02-23T09:16:33.997" OwnerUserId="277084" Tags="[]" Body="&amp;lt;p&amp;gt;My current project actually.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Storing 18,000 objects in a normalised structure: 90,000 rows across 8 different tables. Took 1 minute to retrieve and map them to our Java object model, that's with everything correctly indexed etc.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Storing them as key/value pairs using a lightweight text representation: 1 table, 18,000 rows, 3 seconds to retrieve them all and reconstruct the Java objects.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;In business terms: first option was not feasible. Second option means our app works.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Technology details: running on MySQL for both SQL and NoSQL!  Sticking with MySQL for good transaction support, performance, and proven track record for not corrupting data, scaling fairly well, support for clustering etc.  &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Our data model in MySQL is now just key fields (integers) and the big &amp;quot;value&amp;quot; field: just a big TEXT field basically.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;We did not go with any of the new players (CouchDB, Cassandra, MongoDB, etc) because although they each offer great features/performance in their own right, there were always drawbacks for our circumstances (missing/immature Java support).&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Extra benefit of (ab)using MySQL - the bits of our model that &amp;lt;em&amp;gt;do&amp;lt;/em&amp;gt; work relationally can be easily linked to our key/value store data.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Update: here's an example of how we represented text content, not our actual business domain (we don't work with &amp;quot;products&amp;quot;) as my boss'd shoot me, but conveys the idea, including the recursive aspect (one entity, here a product, &amp;quot;containing&amp;quot; others). Hopefully it's clear how in a normalised structure this could be quite a few tables, e.g. joining a product to its range of flavours, which other products are contained, etc&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;Name=An Example Product&#10;Type=CategoryAProduct&#10;Colour=Blue&#10;Size=Large&#10;Flavours={nice,lovely,unpleasant,foul}&#10;Contains=[&#10;Name=Product2&#10;Type=CategoryBProduct&#10;Size=medium&#10;Flavours={yuck}&#10;------&#10;Name=Product3&#10;Type=CategoryCProduct&#10;Size=Small&#10;Flavours={sublime}&#10;]&#10;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&#10;"/>
  <row Id="2317006" ParentId="2212230" CreationDate="2010-02-23T09:32:15.820" OwnerUserId="277084" Tags="[]" Body="&amp;lt;p&amp;gt;You can always use a NoSQL approach in a SQL DB.  NoSQL seems to generally use &amp;quot;key/value data stores&amp;quot;: you can always implement this in your preferred RDBMS and hence keep the good stuff like transactions, ACID properties, support from your friendly DBA, etc, while realising the NoSQL performance and flexibility benefits, e.g. via a table such as&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;CREATE TABLE MY_KEY_VALUE_DATA&#10;(&#10;    id_content INTEGER PRIMARY KEY,&#10;    b_content  BLOB&#10;);&#10;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Bonus is you can add extra fields here to link your content into other, properly relational tables, while still keeping your bulky content in the main BLOB (or TEXT if apt) field. &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Personally I favour a TEXT representation so you're not tied into a language for working with the data, e.g. using serialized Java means you can access the content from Perl for reporting, say. TEXT is also easier to debug and generally work with as a developer.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2322677" ParentId="2285045" CreationDate="2010-02-23T23:52:04.633" OwnerUserId="45935" Tags="[]" Body="&amp;lt;p&amp;gt;Todd Hoff's &amp;lt;a href=&amp;quot;http://highscalability.com&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;highscalability.com&amp;lt;/a&amp;gt; has a lot of great coverage of NoSQL, including some case studies.  &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;The commercial &amp;lt;a href=&amp;quot;http://www.vertica.com&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Vertica&amp;lt;/a&amp;gt; columnar DBMS might suit your purposes (even though it supports SQL): it's very fast compared with traditional relational DBMSs for analytics queries.  See Stonebraker, et al.'s &amp;lt;a href=&amp;quot;http://database.cs.brown.edu/papers/stonebraker-cacm2010.pdf&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;recent CACM paper&amp;lt;/a&amp;gt; contrasting Vertica with map-reduce.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Update: And &amp;lt;a href=&amp;quot;http://developers.slashdot.org/story/10/02/23/1826226/How-Twitter-Is-Moving-To-the-Cassandra-Database&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Twitter's selected Cassandra&amp;lt;/a&amp;gt; over several others, including HBase, Voldemort, MongoDB, MemcacheDB, Redis, and HyperTable.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Update 2: Rick Cattell has just published a comparison of several NoSQL systems in &amp;lt;a href=&amp;quot;http://cattell.net/datastores/Datastores.pdf&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;High Performance Data Stores&amp;lt;/a&amp;gt;.  And highscalability.com's take on Rick's paper is &amp;lt;a href=&amp;quot;http://highscalability.com/blog/2010/2/25/paper-high-performance-scalable-data-stores.html&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;here&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2328207" ParentId="2328169" CreationDate="2010-02-24T17:48:39.023" OwnerUserId="126769" Tags="[]" Body="&amp;lt;p&amp;gt;Take a look at &amp;lt;a href=&amp;quot;http://www.dnrtv.com/default.aspx?showNum=163&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;this&amp;lt;/a&amp;gt; video from DNR TV, doing som hands on with &amp;lt;a href=&amp;quot;http://www.mongodb.org/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;mongodb&amp;lt;/a&amp;gt;. Might be nice for a first introduction.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2328212" ParentId="2328169" CreationDate="2010-02-24T17:49:56.887" OwnerUserId="103739" Tags="[]" Body="&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://www.slideshare.net/drumwurzel/intro-to-mongodb&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Here is a decent slide show&amp;lt;/a&amp;gt; introducing MongoDB. I think some of the big differences is that most of the systems rely on Active Record or some similar database abstraction.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Also I found a wonderful &amp;lt;a href=&amp;quot;http://books.couchdb.org/relax/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;free orlys book on Couch DB here&amp;lt;/a&amp;gt;, which is pretty awesome. &amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2328251" ParentId="2328169" CreationDate="2010-02-24T17:57:56.403" OwnerUserId="209878" Tags="[]" Body="&amp;lt;p&amp;gt;At its most basic form NoSQL is really no more than a way of storing objects using some sort of key/value pairing system. You use this all the time already I assume. For instance. in javascript you can create an object named foo and then do foo['myobj'] = myobj to store stuff in the object.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;All NoSQL servers really do is give you a way to add/delete/query massive arrays and still allow for persistence and fault tolerance. You can create a NoSQL in memory server in about 100 lines of code. &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;So let's do it this way...in CouchDB you use map/reduce...so let's create a map function do to the same as a bit of SQL code:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;SELECT * FROM users WHERE age &amp;amp;#38;gt; 10&#10;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;In CouchDB you provide the server with a Javascript function that gets run against every item in the database...&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;function (doc)&#10;{&#10;    if (doc.objType == &amp;quot;users&amp;quot;) {&#10;       if (doc.age &amp;amp;#38;gt; 10) {&#10;           emit(doc._id, null)&#10;       }&#10;    }&#10;}&#10;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;That's all there really is to it.....it gets way more complex from there on the server end, as the server has to handle crashes, and multiple revisions of the same object, but this is just an example. &amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2328263" ParentId="2285045" CreationDate="2010-02-24T17:59:03.747" OwnerUserId="82219" Tags="[]" Body="&amp;lt;p&amp;gt;I've switched a small subproject from MySQL to couchdb, to be able to handle the load. The result was amazing.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;About 2 years ago, we've released a self written software on &amp;lt;a href=&amp;quot;http://www.ubuntuusers.de/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://www.ubuntuusers.de/&amp;lt;/a&amp;gt; (which is probably the biggest german linux community website). The site is written in Python and we've added a WSGI middleware which was able to catch all exceptions and send them to another small mysql powered website. This small website used a hash to determine different bugs and stored the number of occurrences and the last occurrence as well.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Unfortunately, shortly after the release, the traceback-logger website wasn't responding anymore. We had some locking issues with the production db of our main site which was throwing exceptions nearly every request, as well as several other bugs, which we haven't explored during the testing stage. The server cluster of our main site, called the traceback-logger submit page several k times per second. And that was a way too much for the small server which hosted the traceback logger (it was already an old server, which was only used for development purposes).&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;At this time couchdb was rather popular, and so I decided to try it out and write a small traceback-logger with it. The new logger only consisted of a single python file, which provided a bug list with sorting and filter options and a submit page. And in the background I've started a couchdb process. The new software responded extremely quickly to all requests and we were able to view the massive amount of automatic bug reports.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;One interesting thing is, that the solution before, was running on an old dedicated server, where the new couchdb based site on the other hand was only running on a shared xen instance with very limited resources. And I haven't even used the strength of key-values stores to scale horizontally. The ability of couchdb / Erlang OTP to handle concurrent requests without locking anything was already enough to serve the needs.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Now, the quickly written couchdb-traceback logger is still running and is a helpful way to explore bugs on the main website. Anyway, about once a month the database becomes too big and the couchdb process gets killed. But then, the compact-db command of couchdb reduces the size from several GBs to some KBs again and the database is up and running again (maybe i should consider adding a cronjob there... 0o).&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;In a summary, couchdb was surely the best choice (or at least a better choice than mysql) for this subproject and it does its job well.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2328462" ParentId="2285045" CreationDate="2010-02-24T18:28:40.397" OwnerUserId="218059" Tags="[]" Body="&amp;lt;p&amp;gt;We replaced a postgres database with a CouchDB document database because not having a fixed schema was a strong advantage to us.  Each document has a variable number of indexes used to access that document.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2329280" ParentId="2285045" CreationDate="2010-02-24T20:33:40.003" OwnerUserId="84760" Tags="[]" Body="&amp;lt;p&amp;gt;We moved part of our data from mysql to mongodb, not so much for scalability but more because it is a better fit for files and non-tabular data.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;In production we currently store:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;ul&amp;gt;&#10;&amp;lt;li&amp;gt;25 thousand files (60GB)&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;130 million other &amp;quot;documents&amp;quot; (350GB)&amp;lt;/li&amp;gt;&#10;&amp;lt;/ul&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;with a daily turnover of around 10GB.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;The database is deployed in a &amp;quot;paired&amp;quot; configuration on two nodes (6x450GB sas raid10) with apache/wsgi/python clients using the mongodb python api (pymongo). The disk setup is probably overkill but thats what we use for mysql.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Apart from some issues with pymongo threadpools and the blocking nature of the mongodb server it has been a good experience.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2334718" ParentId="2332113" CreationDate="2010-02-25T14:37:30.350" OwnerUserId="130168" Tags="[]" Body="&amp;lt;p&amp;gt;Cassandra and the other distributed databases available today do not provide the kind of ad-hoc query support you are used to from sql.  This is because you can't distribute queries with joins performantly, so the emphasis is on denormalization instead.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;However, Cassandra 0.6 (beta officially out tomorrow, but you can build from the 0.6 branch yourself if you're impatient) supports Hadoop map/reduce for analytics, which actually sounds like a good fit for you.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Cassandra provides excellent support for adding new nodes painlessly, even to an initial group of one.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;That said, at a few hundred writes/minute you're going to be fine on mysql for a long, long time.  Cassandra is much better at being a key/value store (even better, key/columnfamily) but MySQL is much better at being a relational database. :)&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;There is no django support for Cassandra (or other nosql database) yet.  They are talking about doing something for the next version after 1.2, but based on talking to django devs at pycon, nobody is really sure what that will look like yet.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2335045" ParentId="2330612" CreationDate="2010-02-25T15:13:06.580" OwnerUserId="130168" Tags="[]" Body="&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://github.com/ericflo/twissandra&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://github.com/ericflo/twissandra&amp;lt;/a&amp;gt; is a twitter clone in the same vein as retwis, originally for 0.3 and now being updated for 0.6.  Catch erifclo in #cassandra on irc if you have questions.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2335086" ParentId="2330562" CreationDate="2010-02-25T15:18:19.113" OwnerUserId="130168" Tags="[]" Body="&amp;lt;p&amp;gt;If you need availability on a RF=2, clustersize=2 system, then you can't use ALL or you will not be able to write when a node goes down.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;That is why people recommend 3 nodes instead of 2, because then you can do quorum reads+writes and still have both strong consistency and availability if a single node goes down.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;With just 2 nodes you get to choose whether you want strong consistency (write with ALL) or availability in the face of a single node failure (write with ONE) but not both.  Of course if you write with ONE cassandra will do hinted handoff etc as needed to make it eventually consistent.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2338137" ParentId="2337819" CreationDate="2010-02-25T22:25:54.953" OwnerUserId="95810" Tags="[]" Body="&amp;lt;p&amp;gt;Python defines several special methods such as &amp;lt;a href=&amp;quot;http://docs.python.org/library/pickle.html?highlight=__getstate__#object.__getstate__&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;&amp;lt;strong&amp;gt;getstate&amp;lt;/strong&amp;gt;&amp;lt;/a&amp;gt; and many others to allow your classes to define exactly how best to serialize and de-serialize their instances.  They're all used internally by the &amp;lt;code&amp;gt;pickle&amp;lt;/code&amp;gt; module (which then uses this information to produce a &amp;quot;blob&amp;quot;, i.e. a string of bytes, and restore objects from such blobs), but, if you want better indexing obtained by storing graphs directly rather than via opaque blobs, it's basically a question of tweaking the &amp;lt;code&amp;gt;pickle&amp;lt;/code&amp;gt; procedures to stop just before turning the graphs into blobs.  I think you'll have to do it by copy-paste-edit of &amp;lt;code&amp;gt;pickle.py&amp;lt;/code&amp;gt; (as it's not designed to be customized in this way by more elegant methods such as subclassing), but that should still save you lots of work wrt redoing it all from scratch.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;I believe this approach lies somewhere between your options 1 and 2 -- classes need to define such special methods only in response to specific needs, and most of the work needed to orchestrate the various possibility will be handled by your pickle-variant (much as it's handled by pickle itself for the &amp;quot;normal&amp;quot; case where the serialized form is a blob).&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2345771" ParentId="2167481" CreationDate="2010-02-27T00:48:30.283" OwnerUserId="260555" Tags="[]" Body="&amp;lt;p&amp;gt;I've seen one here:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://www.woanware.co.uk/news/esedbviewer-v1-0-0/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://www.woanware.co.uk/news/esedbviewer-v1-0-0/&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2350820" ParentId="2285045" CreationDate="2010-02-28T10:55:09.283" OwnerUserId="85785" Tags="[]" Body="&amp;lt;p&amp;gt;We've moved some of our data we used to store in Postgresql and Memcached into &amp;lt;a href=&amp;quot;http://code.google.com/p/redis/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Redis&amp;lt;/a&amp;gt;. Key value stores are much better suited for storing hierarchical object data. You can store blob data much faster and with much less development time and effort than using an ORM to map your blob to a RDBMS.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;I have an &amp;lt;a href=&amp;quot;http://code.google.com/p/servicestack/wiki/ServiceStackRedis&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;open source c# redis client&amp;lt;/a&amp;gt; that lets you store and retrieve any POCO objects with 1 line:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;var customers = redis.Lists[&amp;quot;customers&amp;quot;]; //Implements IList&amp;amp;#38;lt;Customer&amp;amp;#38;gt;&#10;customers.Add(new Customer { Name = &amp;quot;Mr Customer&amp;quot; });&#10;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Key value stores are also much easier to 'scale-out' as you can add a new server and then partition your load evenly to include the new server. Importantly, there is no central server that will limit your scalability. (though you will still need a strategy for consistent hashing to distribute your requests).&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;I consider Redis to be a 'managed text file' on steroids that provides fast, concurrent and atomic access for multiple clients, so anything I used to use a text file or embedded database for I now use Redis. e.g. To get a real-time combined rolling error log for all our services (which has notoriously been a hard task for us), is now accomplished with only a couple of lines by just pre-pending the error to a Redis server side list and then trimming the list so only the last 1000 are kept, e.g:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;var errors = redis.List[&amp;quot;combined:errors&amp;quot;];&#10;errors.Insert(0, new Error { Name = ex.GetType().Name, Message = ex.Message, StackTrace = ex.StackTrace});&#10;redis.TrimList(errors, 1000);&#10;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&#10;"/>
  <row Id="2351062" ParentId="2351040" CreationDate="2010-02-28T12:40:12.930" OwnerUserId="217862" Tags="[]" Body="&amp;lt;p&amp;gt;I'not a NoSQL expert, but as the name says, they don't rely necessary on SQL. You can probably do whatever you want, but will need to code map/reduce function or other non-SQL way to query the data. &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Maybe this blog provide useful information to you: &amp;lt;a href=&amp;quot;http://horicky.blogspot.com/2009/11/query-processing-for-nosql-db.html&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Query processing for NoSQL database&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2351602" ParentId="2351040" CreationDate="2010-02-28T15:57:48.953" OwnerUserId="126769" Tags="[]" Body="&amp;lt;p&amp;gt;In &amp;lt;a href=&amp;quot;http://www.mongodb.org/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;mongodb&amp;lt;/a&amp;gt;, you would just do something like &amp;lt;code&amp;gt;db.mytbl.find({&amp;quot;vara&amp;quot;: { $gt: 10}, &amp;quot;varb&amp;quot;:  2, &amp;quot;varc&amp;quot;: {$lt: 100 }})&amp;lt;/code&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;See &amp;lt;a href=&amp;quot;http://www.mongodb.org/display/DOCS/Advanced+Queries&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;here&amp;lt;/a&amp;gt;, and &amp;lt;a href=&amp;quot;http://www.mongodb.org/display/DOCS/Queries+and+Cursors&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;here&amp;lt;/a&amp;gt; for examples&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2354279" ParentId="2354254" CreationDate="2010-03-01T06:52:49.750" OwnerUserId="179328" Tags="[]" Body="&amp;lt;p&amp;gt;The advantage of a relational database is the ability to relate and index information. Most key-value systems don't provide that.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;What you need to ask yourself is, does switching make sense for my intended use case?&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;You have kind of missed the point. The point is, you don't have an index. You don't have a centralized list of records, or the ability to relate it together in any easy way. What makes nosql key-value stores so quick is that you store and retrieve what you need in a name-based approach. You need that blurb on someone's profile page? Just go fetch it. No need to maintain a table with everything in it. &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Not everything really needs to be tabular.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;There's advantages and disadvantages. Personally, I use a mix of both. SQL for most, and something along the lines of CouchDB for random things that have no need to be clogging up an SQL table.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;You can liken a key-value system to making an SQL table with two columns, a unique key and a value. This is quite fast. You have no need to do any relations or correlations or collation of data. Just find the value and return it.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;You'll find this is also fast in SQL databases. I've used it in place of actual key-value systems.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;I do not think scientific data is well suited to a nosql implementation.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2354332" ParentId="2354254" CreationDate="2010-03-01T07:13:31.813" OwnerUserId="282912" Tags="[]" Body="&amp;lt;p&amp;gt;The efficiency comes from three main areas:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;ol&amp;gt;&#10;&amp;lt;li&amp;gt;The database has far fewer functions: there is no concept of a join and lessened or absent transactional integrity requirements. Less function means less work means faster, on the server side at least.&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;Another design principle is that the data store lives in a cloud of servers so your request may have multiple respondents. These systems also claim the multi-server system improves fault tolerance through replication.&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;It is fully buzzword compliant, using a bunch of ideas and descriptions that are not wholly invented yet. For example, Amazon is currently giving their services away in order to better understand how people might use them and get some experience to refine the specification.&amp;lt;/li&amp;gt;&#10;&amp;lt;/ol&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;To my eye, someone coming to you with a requirement that &amp;quot;our new data will be too much for our RDBMS&amp;quot; ought either have numbers to back that assertion up or admit they just want to try the new shiny. Is noSQL meritless? Probably not. Is it going to turn the world upside-down as Java 1.0 was hyped to? Probably not.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;There's no harm in investigating new things, just don't bet the farm on them in favor of 50 year old, well-established, well-understood technology.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2357107" ParentId="2357087" CreationDate="2010-03-01T16:04:26.017" OwnerUserId="47773" Tags="[]" Body="&amp;lt;p&amp;gt;Why not start with Amazon's &amp;lt;a href=&amp;quot;http://aws.amazon.com/solutions/case-studies//&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;case studies&amp;lt;/a&amp;gt;?&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2357402" ParentId="2357239" CreationDate="2010-03-01T16:45:29.210" OwnerUserId="120163" Tags="[]" Body="&amp;lt;p&amp;gt;IBM Mainframes have had &amp;quot;non-relational&amp;quot; databases since the 60s (hierarchial databases such as IMS + variants).  These databases are still in use because they are extremely fast and handle huge scale well.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;The point of relational databases was to provide a regular, relatively abstract method for storing and retrieving data in which the tuning can be done relatively independently of the data model (not true for IMS).   They were designed rather in reaction to the inability to reorganize hiearchical databases easily. The upside is nice organization; the downside is medium, not high performance.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Google provides scalable storage and MapReduce to handle scale.  It isn't relational.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;There was a huge push early in the last decade to store data in XML, in essentially hiearchical form because XML is implicitly hierarchical.  That was a huge mistake IMHO, because it repeated the inconvenience of heirarchical databases, but had none of the performance.  I'm not very surprised this movement seems to have pretty much died.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Most of the practical push to non-relational seems to me to be towards performance and scale.  I don't see how this helps &amp;quot;small&amp;quot; applications much.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;People have proposed, but not done a lot of practical data management using knowledge-based schemes.   Doug Lenat's &amp;lt;a href=&amp;quot;http://en.wikipedia.org/wiki/Cyc&amp;quot; rel=&amp;quot;nofollow&amp;quot; title=&amp;quot;Wikipedia entry&amp;quot;&amp;gt;CYC&amp;lt;/a&amp;gt; comes to mind here.  The ability of the database&#10;to help an application draw non-obvious conclusions strikes me a very interesting for &amp;quot;small&amp;quot; applications that are trying be &amp;quot;smart&amp;quot;.  But there aren't a lot of these yet. &amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2357700" ParentId="2357239" CreationDate="2010-03-01T17:28:14.610" OwnerUserId="3211" Tags="[]" Body="&amp;lt;p&amp;gt;The sweet spot of using a NoSQL database at that scale is when the database model (key-value, document, etc.) is a good match to the application's needs and the advanced relational functionality is not needed. &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;At the small end of the spectrum, performance is a non issue because just about everything is fast. Storage engines are a non issue, if you don't need a sophisticated query engine, the lack of SQL support is a non issue. &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;You are left with how well it fits and how easy it is to use. Honestly though, tooling does become an issue. Relational database tooling is mature, NoSQL tooling is less feature rich and less battle hardened. Too often it is roll-your-own tooling. Definitely consider what tools you'd be giving up and how much you need them.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;There is an additional slate of advantages for smaller projects when considering a NoSQL service (like Amazon SimpleDB and Microsoft Azure) as compared to a product. If you only have to pay for what you use and you don't use much, it can be cheaper than running a dedicated server, going all the way down to free for something like the SimpleDB free usage tier.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;You also avoid some of the server and database maintenance costs. This can be a big win if you don't have a DBA, or when your DBAs are already over worked. Of course you'll still have admin work to do, but it is significantly reduced, and typically simpler.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2358230" ParentId="2357919" CreationDate="2010-03-01T18:51:43.420" OwnerUserId="163203" Tags="[]" Body="&amp;lt;p&amp;gt;Take look at these projects:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;ul&amp;gt;&#10;&amp;lt;li&amp;gt;Cassandra usage &amp;lt;a href=&amp;quot;http://about.digg.com/blog/looking-future-cassandra&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;at Digg&amp;lt;/a&amp;gt;.   &amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;Cassandra usage &amp;lt;a href=&amp;quot;http://nosql.mypopescu.com/post/407159447/cassandra-twitter-an-interview-with-ryan-king&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;at Twitter&amp;lt;/a&amp;gt;.&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;http://github.com/jamesgolick/friendly&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Friendly&amp;lt;/a&amp;gt; usage &amp;lt;a href=&amp;quot;http://jamesgolick.com/2009/12/16/introducing-friendly-nosql-with-mysql-in-ruby.html&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;at FetLife&amp;lt;/a&amp;gt;(nsfw).&amp;lt;/li&amp;gt;&#10;&amp;lt;/ul&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Finally &amp;lt;a href=&amp;quot;http://nosql.mypopescu.com/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;MyNoSQL&amp;lt;/a&amp;gt; is a good site for NoSQL related information.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2358572" ParentId="2357239" CreationDate="2010-03-01T19:47:13.280" OwnerUserId="36710" Tags="[]" Body="&amp;lt;p&amp;gt;When it comes to graph databases (like &amp;lt;a href=&amp;quot;http://neo4j.org/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Neo4j&amp;lt;/a&amp;gt; - a project I'm involved in) they excel at &amp;lt;a href=&amp;quot;http://blogs.neotechnology.com/emil/2009/11/nosql-scaling-to-size-and-scaling-to-complexity.html&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;scaling to complexity&amp;lt;/a&amp;gt;. This means, they provide &amp;lt;a href=&amp;quot;http://www.viget.com/extend/nosql-misconceptions/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;&amp;quot;better substrates for modeling business domains&amp;quot;&amp;lt;/a&amp;gt; (see &amp;lt;a href=&amp;quot;http://www.slideshare.net/bscofield/the-state-of-nosql&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;The State of NoSQL&amp;lt;/a&amp;gt;, also by &amp;lt;a href=&amp;quot;http://benscofield.com/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Ben Scofield&amp;lt;/a&amp;gt;, too). As I see it, this is very important in small to medium sized apps.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;This may be better explained through examples, so here's some links to example apps/domain modeling:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;ul&amp;gt;&#10;&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;http://blog.neo4j.org/2010/02/access-control-lists-graph-database-way.html&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Access control lists the graph&#10;database way&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;http://blog.neo4j.org/2009/09/social-networks-in-database-using-graph.html&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Social networks in the database: using a graph database&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;http://wiki.neo4j.org/content/Domain_Modeling_Gallery&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Domain modeling gallery&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&#10;&amp;lt;/ul&amp;gt;&#10;"/>
  <row Id="2359212" ParentId="2359159" CreationDate="2010-03-01T21:31:16.307" OwnerUserId="28589" Tags="[]" Body="&amp;lt;p&amp;gt;8080 - JMX (remote)&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;8888 - Remote debugger&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;7000 - Used internal by Cassandra&amp;lt;br&amp;gt;&#10;(7001 - Obsolete, removed in 0.6.0. Used for membership communication, aka gossip)&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;9160 - Thrift client API&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Cassandra FAQ &amp;lt;a href=&amp;quot;http://wiki.apache.org/cassandra/FAQ#ports&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;What ports does Cassandra use?&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2359282" ParentId="2359175" CreationDate="2010-03-01T21:43:51.987" OwnerUserId="28589" Tags="[]" Body="&amp;lt;p&amp;gt;A write to a Cassandra node first hits the &amp;lt;strong&amp;gt;CommitLog&amp;lt;/strong&amp;gt; (sequential). (Then Cassandra stores values to column-family specific, in-memory data structures called Memtables. The Memtables are flushed to disk whenever one of the configurable thresholds is exceeded. (1, datasize in memtable. 2, # of objects reach certain limit, 3, lifetime of a memtable expires.))&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;The &amp;lt;strong&amp;gt;data&amp;lt;/strong&amp;gt; folder contains a subfolder for each keyspace. Each subfolder contains three kind of files:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;ul&amp;gt;&#10;&amp;lt;li&amp;gt;Data files: An SSTable (nomenclature&#10;borrowed from Google) stands for&#10;Sorted Strings Table and is a file of&#10;key-value string pairs (sorted by&#10;keys).&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;Index file: (Key, offset) pairs (points into data file) &amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;http://en.wikipedia.org/wiki/Bloom_filter&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Bloom filter&amp;lt;/a&amp;gt;: all keys in data file&amp;lt;/li&amp;gt;&#10;&amp;lt;/ul&amp;gt;&#10;"/>
  <row Id="2360350" ParentId="2357919" CreationDate="2010-03-02T01:35:35.473" OwnerUserId="284038" Tags="[]" Body="&amp;lt;p&amp;gt;I doubt any of those guys will let us check out their code. ;)  You may want to check through here &amp;lt;a href=&amp;quot;http://www.opensourcerails.com/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://www.opensourcerails.com/&amp;lt;/a&amp;gt; , but I believe they all use some kind SQL.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2360378" ParentId="2357919" CreationDate="2010-03-02T01:43:13.483" OwnerUserId="242493" Tags="[]" Body="&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://harmonyapp.com/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Harmony&amp;lt;/a&amp;gt; is a Rails site that uses &amp;lt;a href=&amp;quot;http://www.mongodb.org/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;MongoDB&amp;lt;/a&amp;gt;. While it's not open source, it's co-creater, John Nunemaker, writes blog posts about how MongoDB is being used effectively in Harmony and often provides examples of code taken directly from the application. These posts appear on &amp;lt;a href=&amp;quot;http://railstips.org/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;RailsTips&amp;lt;/a&amp;gt; and more recently on &amp;lt;a href=&amp;quot;http://mongotips.com/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;MongoTips&amp;lt;/a&amp;gt;. John is also the author of &amp;lt;a href=&amp;quot;http://github.com/jnunemaker/mongomapper&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;MongoMapper&amp;lt;/a&amp;gt;, an ActiveRecord-like library for MongoDB, so his writing is very informative and his code is about as close to doing things &amp;quot;the right way&amp;quot; as you're likely to find.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2364948" ParentId="2357919" CreationDate="2010-03-02T16:51:03.860" OwnerUserId="156694" Tags="[]" Body="&amp;lt;p&amp;gt;MySQL schema-less database at Friendfeed.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://bret.appspot.com/entry/how-friendfeed-uses-mysql&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://bret.appspot.com/entry/how-friendfeed-uses-mysql&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2365573" ParentId="2351040" CreationDate="2010-03-02T18:16:21.090" OwnerUserId="196918" Tags="[]" Body="&amp;lt;p&amp;gt;It depends on the data store you are using.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;I frequently use AppEngine and their data store only allows inequality on one column (and that column must be the first element in the sort order.  So you would not be able to run the query you posted, but you could do a similar one:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;select * from DB where&#10;vara &amp;amp;#38;gt; x AND&#10;varb = 2 AND&#10;varc in (t,u,v,w)&#10;vard in (x,y,z) AND&#10;varf = 2 AND&#10;varg = 3&#10;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Also, you can do things like have a column that contains a list of strings and select rows that have a value in the list.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;So, the official answer is &amp;quot;maybe, sorta, sometimes, but not really, except when yes&amp;quot;&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2368467" ParentId="2360034" CreationDate="2010-03-03T03:01:00.157" OwnerUserId="2696" Tags="[]" Body="&amp;lt;p&amp;gt;In a NoSQL or document-oriented scenario, you'd have the actual tags as part of your document, likely stored as a list.  Since you've tagged this question with &amp;quot;couchdb&amp;quot;, I'll use that as an example.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;A &amp;quot;post&amp;quot; document in CouchDB might look like:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;{&#10;   &amp;quot;_id&amp;quot;: &amp;amp;#38;lt;generated&amp;amp;#38;gt;,&#10;   &amp;quot;question&amp;quot;: &amp;quot;Question?&amp;quot;,&#10;   &amp;quot;answers&amp;quot;: [... list of answers ...],&#10;   &amp;quot;tags&amp;quot;: [&amp;quot;mysql&amp;quot;, &amp;quot;tagging&amp;quot;, &amp;quot;joins&amp;quot;, &amp;quot;nosql&amp;quot;, &amp;quot;couchdb&amp;quot;]&#10;}&#10;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Then, to generate a view keyed by tags:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;{&#10;   &amp;quot;_id&amp;quot;: &amp;quot;_design/tags&amp;quot;,&#10;   &amp;quot;language&amp;quot;: &amp;quot;javascript&amp;quot;,&#10;   &amp;quot;views&amp;quot;: {&#10;      &amp;quot;all&amp;quot;: {&#10;         &amp;quot;map&amp;quot;: &amp;quot;function(doc) {&#10;            emit(doc.tags, null);&#10;         }&amp;quot;&#10;      }&#10;   }&#10;}&#10;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;In CouchDB, you can issue an HTTP POST with multiple keys, if you wish.  An example is in &amp;lt;a href=&amp;quot;http://wiki.apache.org/couchdb/HTTP_view_API#Access.2BAC8-Query&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;the documentation&amp;lt;/a&amp;gt;.  Using that technique, you would be able to search by multiple tags.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Note: Setting the value to null, above, helps keep the views small.  Use &amp;lt;code&amp;gt;include_docs=true&amp;lt;/code&amp;gt; in your query if you want to see the actual documents as well.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2369735" ParentId="2354254" CreationDate="2010-03-03T08:36:25.380" OwnerUserId="260555" Tags="[]" Body="&amp;lt;p&amp;gt;Here I'm assuming that you want to optimize one particular query, which is simply looking up a record by key. One example of this might be looking up a userinfo record by username. For some systems a query like that has to be incredibly fast and all other queries are unimportant.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;The biggest factor in database performance will be the number of I/O operation required to read/write data. Most database systems use similar data structures (i.e. b-trees) which can retieve uncached data in O(log(n)) I/Os. In order to give durable updates the data will have to be written to disk: most systems do that sequentially, which is the fastest way.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;So, where can a Key-Value store get efficiencies?&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;ol&amp;gt;&#10;&amp;lt;li&amp;gt;Non-normalized data. Putting all the data in one row means no joins.&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;Low CPU overhead. A key-value store avoids the CPU cost of query processing/optimization, security checks, constraint checks, etc.&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;It is easier to have the store be in-process (as opposed to a SQL server running as a separate service) this eliminate IPC overhead.&amp;lt;/li&amp;gt;&#10;&amp;lt;/ol&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Most RDBMS systems are built on top of something which looks like a key-value store so you could view this as cutting out the middleman.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2373364" ParentId="2081080" CreationDate="2010-03-03T17:11:53.857" OwnerUserId="285504" Tags="[]" Body="&amp;lt;p&amp;gt;Thanks for your kind mention of y_serial... more precisely, it is a Python module:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;warehouse Python objects with SQLite&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;quot;Serialization + persistance :: in a few lines of code, compress and annotate Python objects into SQLite; then later retrieve them chronologically by keywords without any SQL. Most useful &amp;quot;standard&amp;quot; module for a database to store schema-less data.&amp;quot;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://yserial.sourceforge.net&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://yserial.sourceforge.net&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;In my experience, SQLite is a faster and more reliable choice than most databases (including PostgresQL and Berkeley DB) for the majority of projects -- and of course, it does not need a server daemon.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;yserial is very easy to implement (and far faster than the &amp;quot;filename is the key / file contents is the value&amp;quot; approach ;-)&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2374517" ParentId="2374496" CreationDate="2010-03-03T20:02:21.853" OwnerUserId="84651" Tags="[]" Body="&amp;lt;p&amp;gt;A quick search for Berkeley DB Bindings for C# turned up - &amp;lt;a href=&amp;quot;http://sourceforge.net/projects/libdb-dotnet/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Berkeley DB for .NET&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2374525" ParentId="2374496" CreationDate="2010-03-03T20:03:56.873" OwnerUserId="283676" Tags="[]" Body="&amp;lt;p&amp;gt;i vote for Berkley DB. it is very fast and &amp;lt;a href=&amp;quot;http://sourceforge.net/projects/libdb-dotnet/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;wrapper&amp;lt;/a&amp;gt; is good. i used it a lot&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2376631" ParentId="2330612" CreationDate="2010-03-04T03:09:30.193" OwnerUserId="74235" Tags="[]" Body="&amp;lt;ul&amp;gt;&#10;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;you should start with &amp;lt;a href=&amp;quot;http://arin.me/blog/wtf-is-a-supercolumn-cassandra-data-model&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;WTF is a SuperColumn&amp;lt;/a&amp;gt; to understand the data model.&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://blog.evanweaver.com/articles/2009/07/06/up-and-running-with-cassandra/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;up and running with cassandra&amp;lt;/a&amp;gt; is also a very good starting tutorial and it has&#10;example schemas for a blog and for twitter.&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&#10;&amp;lt;/ul&amp;gt;&#10;"/>
  <row Id="2377418" ParentId="2348289" CreationDate="2010-03-04T07:07:02.800" OwnerUserId="286031" Tags="[]" Body="&amp;lt;p&amp;gt;Why don't you create your own?&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2381902" ParentId="2248789" CreationDate="2010-03-04T18:54:18.653" OwnerUserId="166836" Tags="[]" Body="&amp;lt;p&amp;gt;I'm using MongoDB w/ CI and came up with the following. It works for me, but I'm sure it can be tweaked somewhat. I'll worry about tweaking it later but right now it does what I want.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;I created a model called &amp;quot;database_conn.php&amp;quot;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;class Database_Conn extends Model {&#10;&#10;    function _connect() {&#10;        $m = new Mongo();&#10;&#10;        $db = $m-&amp;amp;#38;gt;selectDB( &amp;quot;YOUR DATABASE NAME&amp;quot; );&#10;        return $db;&#10;    }&#10;}&#10;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Then, if I need to connect to a collection from my models.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;$collection = Database_Conn::_connect()-&amp;amp;#38;gt;selectCollection( &amp;quot;COLLECTION NAME&amp;quot; );&#10;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&#10;"/>
  <row Id="2397163" ParentId="2357087" CreationDate="2010-03-07T17:32:39.257" OwnerUserId="25198" Tags="[]" Body="&amp;lt;p&amp;gt;I'm using SimpleDB for a project now but it isn't in production yet.  We use it together with S3 to form our persistence layer.  Entities are stored as JSON encoded documents in S3 (with memcached in front as a write-through cache).  Metadata we want to query on is stored in SimpleDB.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;This combination is working very well.  Using a document based model allows us to have arbitrarily large entities.  The limitations of SimpleDB are less painful if you use it strictly as an index.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;The big lightbulb moment for me came when I stopped trying to think of SimpleDB as a drop-in replacement for a RDBMS.  The combo with S3 is quite good.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Hope that's helpful.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2403246" ParentId="2403174" CreationDate="2010-03-08T17:26:39.873" OwnerUserId="184977" Tags="[]" Body="&amp;lt;p&amp;gt;firebird embedded version&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2403258" ParentId="2403174" CreationDate="2010-03-08T17:28:05.630" OwnerUserId="185349" Tags="[]" Body="&amp;lt;p&amp;gt;You can check some oodb (object-oriented database)&#10;Gemstone is nice. &amp;lt;a href=&amp;quot;http://www.gemstone.com/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://www.gemstone.com/&amp;lt;/a&amp;gt;&#10;http://www.versant.com/&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2403271" ParentId="2403174" CreationDate="2010-03-08T17:30:15.877" OwnerUserId="285570" Tags="[]" Body="&amp;lt;p&amp;gt;I think &amp;lt;a href=&amp;quot;http://en.wikipedia.org/wiki/Berkeley_DB&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;BDB&amp;lt;/a&amp;gt; is the classic choice here.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2403278" ParentId="2403174" CreationDate="2010-03-08T17:31:08.433" OwnerUserId="91" Tags="[]" Body="&amp;lt;p&amp;gt;Do you need something embedded in your application (if yes, which language are you using?) or a separate database server?&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Popular Object Databases are &amp;lt;a href=&amp;quot;http://www.mongodb.org/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;MongoDB&amp;lt;/a&amp;gt; and &amp;lt;a href=&amp;quot;http://www.db4o.com/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;db4o&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2404713" ParentId="2404155" CreationDate="2010-03-08T21:03:31.383" OwnerUserId="285289" Tags="[]" Body="&amp;lt;p&amp;gt;In MongoDB 1.3.2+ you can add some restriction in user :&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;db.addUser(&amp;quot;guest&amp;quot;, &amp;quot;passwordForGuest&amp;quot;, true)&amp;lt;/code&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;But it's only existing now not better. Maybe you can add some feature request&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;see information in MongoDB documentation : &amp;lt;a href=&amp;quot;http://www.mongodb.org/display/DOCS/Security+and+Authentication&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://www.mongodb.org/display/DOCS/Security+and+Authentication&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2405068" ParentId="2404155" CreationDate="2010-03-08T21:53:58.047" OwnerUserId="111332" Tags="[]" Body="&amp;lt;p&amp;gt;I would say the best bet would be to wrap up the access to MongoDB in a service layer that enforces your specific contracts. We don't do much in the way of fine-grained access control because there are so many different cases that solving all of them correctly is tricky to get right. So for the most part it's up to the application layer to implement those kind of controls.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2409029" ParentId="2408877" CreationDate="2010-03-09T12:41:02.447" OwnerUserId="249180" Tags="[]" Body="&amp;lt;p&amp;gt;When I first encountered this problem, I've found the great article (&amp;lt;a href=&amp;quot;http://dev.mysql.com/tech-resources/articles/hierarchical-data.html&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;link&amp;lt;/a&amp;gt;).&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;In tho words: in RDBMS world there are 2 main tree model storage approaches:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;ul&amp;gt;&#10;&amp;lt;li&amp;gt;The Adjacency List Model&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;The Nested Set Model&amp;lt;/li&amp;gt;&#10;&amp;lt;/ul&amp;gt;&#10;"/>
  <row Id="2409106" ParentId="2408877" CreationDate="2010-03-09T12:53:54.223" OwnerUserId="62195" Tags="[]" Body="&amp;lt;p&amp;gt;Here's a &amp;lt;a href=&amp;quot;http://highscalability.com/neo4j-graph-database-kicks-buttox&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;great article&amp;lt;/a&amp;gt; on Neo4j.  In general, it looks like neo4j is your best option since document databases are still relatively flat and can result in some &amp;lt;a href=&amp;quot;http://probablyprogramming.com/2008/07/04/storing-hierarchical-data-in-couchdb/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;awkward setup&amp;lt;/a&amp;gt; (still doable though).&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Neo4j, being a graph database, should be a solid fit for storing you tree.  I've never used it, but given your problem domain, it seems like the best option (at least the one to investigate first).&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;As far as what the &amp;quot;best way&amp;quot; is, I think that depends on your implementation and requirements.  I think you should write a simple test against a graph database, a document database, an &amp;lt;a href=&amp;quot;http://www.db4o.com/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;object database&amp;lt;/a&amp;gt; and a relational database (or not) and see which one fits the problem that you're trying to solve.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2410456" ParentId="2410341" CreationDate="2010-03-09T16:04:59.313" OwnerUserId="28589" Tags="[]" Body="&amp;lt;p&amp;gt;That depends on how you have configured storage-conf.xml on your two nodes. &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Hint. take a look at &amp;lt;code&amp;gt;&amp;amp;#38;lt;StoragePort&amp;amp;#38;gt;7000&amp;amp;#38;lt;/StoragePort&amp;amp;#38;gt;&amp;lt;/code&amp;gt; in storage-conf.xml. &#10;(TCP port 7000 is the standard/default port used by Cassandra for internal communication, i.e. address to bind to and tell other nodes to connect to).&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;UDP port (7001 default) was previous used for gossip, was removed in 0.6.0.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2411472" ParentId="2411424" CreationDate="2010-03-09T18:21:31.180" OwnerUserId="536" Tags="[]" Body="&amp;lt;p&amp;gt;Me too. I've been using DB4O for a few years, and have found the Object Manager clumsy, and often buggy (sometimes it won't open my large DB4O database at all).&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;I know of no alternatives, unfortunately.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2417204" ParentId="2411424" CreationDate="2010-03-10T13:33:53.640" OwnerUserId="257786" Tags="[]" Body="&amp;lt;p&amp;gt;I suggest you use &amp;lt;a href=&amp;quot;http://www.linqpad.net/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;LINQPad&amp;lt;/a&amp;gt; as a first start.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Gamlor has &amp;lt;a href=&amp;quot;http://www.gamlor.info/wordpress/?p=949&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;a great tutorial on how to use LINQPad with db4o&amp;lt;/a&amp;gt;. You'll need to modify that a bit so you use client-server access (thus not locking your db).&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;I don't want to re-post his code here, because I think it's pointless and he's also a user here, don't wanna win his laurels. &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;For me, LINQPad seems to be the best approach, also because I can use it on my server, where I'd be having trouble with OME for obvious reasons.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2421324" ParentId="2413466" CreationDate="2010-03-10T23:01:15.263" OwnerUserId="130168" Tags="[]" Body="&amp;lt;p&amp;gt;you have two options:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;(1) is sort of traditional: have one CF (columnfamily) with your foo objects, one row per foo, one column per field.  then create two index CFs, where the row key in one is the string values, and the row key in the other is lookup_id.  Columns in the index rows are foo ids.  So you do a GET on the index CF, then a MULTIGET on the ids returned.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Note that if you can make id the same as lookup_id then you have one less index to maintain.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;High-level clients like Digg's lazyboy (http://github.com/digg/lazyboy) will automate maintaining the index CFs for you.  Cassandra itself does not do this automatically (yet).&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;(2) is like (1), but you duplicate the entire foo objects into subcolumns of the index rows (that is, the index top-level columns are supercolumns).  If you're not actually querying by the foo id itself, you don't need to store it in its own CF at all.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2436098" ParentId="2436046" CreationDate="2010-03-12T21:43:59.217" OwnerUserId="28589" Tags="[]" Body="&amp;lt;p&amp;gt;Yes, row size is still limited by available memory. This is because the compaction algorithm today de-serializes the entire row in memory before writing out the compacted SSTable. &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;This is currently aimed to be fixed in the 0.7 release. See &amp;lt;a href=&amp;quot;https://issues.apache.org/jira/browse/CASSANDRA-16&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;CASSANDRA-16&amp;lt;/a&amp;gt; for progress.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Another interesting link: &amp;lt;a href=&amp;quot;http://wiki.apache.org/cassandra/CassandraLimitations&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;CassandraLimitations&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2438758" ParentId="2438055" CreationDate="2010-03-13T14:58:00.303" OwnerUserId="155862" Tags="[]" Body="&amp;lt;p&amp;gt;I think if you run it with the 'install' command line switch it installs it as a Windows Service.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;mongod --install&#10;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;It might be worth reading &amp;lt;a href=&amp;quot;http://groups.google.com/group/mongodb-user/browse_thread/thread/fde13e7ceb64ac44/a39a7e1b711a6b00&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;this thread&amp;lt;/a&amp;gt; first though. There seems to be some problems with relative/absolute paths when the relevant registry key gets written.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2440091" ParentId="2440079" CreationDate="2010-03-13T21:26:17.920" OwnerUserId="258550" Tags="[]" Body="&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://carsonified.com/blog/dev/should-you-go-beyond-relational-databases/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://carsonified.com/blog/dev/should-you-go-beyond-relational-databases/&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Provides a nice breakdown of the things to consider when looking at certain types of data storage tools.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2440096" ParentId="2440079" CreationDate="2010-03-13T21:28:49.823" OwnerUserId="114770" Tags="[]" Body="&amp;lt;p&amp;gt;Digg have some &amp;lt;a href=&amp;quot;http://about.digg.com/node/564&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;interesting&amp;lt;/a&amp;gt; &amp;lt;a href=&amp;quot;http://about.digg.com/blog/looking-future-cassandra&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;articles&amp;lt;/a&amp;gt; on this question. Essentially, you're shifting the burden of processing to writes rather than reads, which may be desirable in highly scalable applications. Cassandra specifically is also highly available. &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;blockquote&amp;gt;&#10;  &amp;lt;p&amp;gt;Simplistically, Cassandra is a&#10;  distributed database with a BigTable&#10;  data model running on a Dynamo like&#10;  infrastructure. It is column-oriented&#10;  and allows for the storage of&#10;  relatively structured data. It has a&#10;  fully decentralized model; every node&#10;  is identical and there is no single&#10;  point of failure. It's also extremely&#10;  fault tolerant; data is replicated to&#10;  multiple nodes and across data&#10;  centers. Cassandra is also very&#10;  elastic; read and write throughput&#10;  increase linearly as new machines are&#10;  added.&amp;lt;/p&amp;gt;&#10;&amp;lt;/blockquote&amp;gt;&#10;"/>
  <row Id="2440104" ParentId="2440079" CreationDate="2010-03-13T21:31:17.893" OwnerUserId="122012" Tags="[]" Body="&amp;lt;p&amp;gt;When you say, data modell is rather simple, this could speak for the NoSQL option.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;When you have plenty of attributes to make selections, heavy transaction load or complicated table structures, that would speak for traditional SQL tables.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;I would recommend to find out how difficult it would be to implement the data modell with one or two NoSQL databases. When this is rather difficult, you could also make a classical table schema to compare with.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;When you have difficulties with NoSQL, this could speak for the SQL option. But also it could be, that the heavy load is better handled with NoSQL -- but also it could be that a good SQL database scales sufficiently ...&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Buffering can also be done with a simple Proxy-Server ...&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;On difficulties, a mix of NoSQL and SQL could be also considered.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2440141" ParentId="2440079" CreationDate="2010-03-13T21:41:28.973" OwnerUserId="70604" Tags="[]" Body="&amp;lt;p&amp;gt;To me, you don't have any particular problem to solve. If you need ACIDity, use a database; if you don't, then it doesn't matter. At the end just build your app. And let me quote &amp;lt;a href=&amp;quot;http://bjclark.me/2009/08/04/nosql-if-only-it-was-that-easy/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;NoSQL: If Only It Was That Easy&amp;lt;/a&amp;gt;:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;blockquote&amp;gt;&#10;  &amp;lt;p&amp;gt;The real thing to point out is that if you are being held back from making something super awesome because you can&#x2019;t choose a database, you are doing it wrong. If you know mysql, just used it. Optimize when you actually need to. Use it like a k/v store, use it like a rdbms, but for god sake, build your killer app! None of this will matter to most apps. Facebook still uses MySQL, a lot. Wikipedia uses MySQL, a lot. FriendFeed uses MySQL, a lot. NoSQL is a great tool, but it&#x2019;s certainly not going to be your competitive edge, it&#x2019;s not going to make your app hot, and most of all, your users won&#x2019;t give a shit about any of this.&amp;lt;/p&amp;gt;&#10;&amp;lt;/blockquote&amp;gt;&#10;"/>
  <row Id="2442760" ParentId="2442735" CreationDate="2010-03-14T16:13:27.147" OwnerUserId="10661" Tags="[]" Body="&amp;lt;p&amp;gt;The file system itself is faster and more stable than almost anything else.  It stores big data seamlessly and efficiently.  The API is very simple.  &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;You can store and retrieve from the file system very, very efficiently.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Since your question is a little thin on &amp;quot;requirements&amp;quot; it's hard to say much more.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2442778" ParentId="2442735" CreationDate="2010-03-14T16:17:32.993" OwnerUserId="206367" Tags="[]" Body="&amp;lt;p&amp;gt;What's wrong with &amp;lt;a href=&amp;quot;http://www.sqlite.org&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;SqlLite&amp;lt;/a&amp;gt;? Since you did explicitly state non-sql, Berkeley DB are based on key/value pairs which might not suffice for your needs if you wish to expand the datasets, even more so, how would you make that dataset relate to one another using key/value pairs....&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;On the other hand, Kdb+, looking at the &amp;lt;a href=&amp;quot;http://kx.com/Products/faq.php&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;FAQ&amp;lt;/a&amp;gt; on their website is a relational database that can handle SQL via their programming language Q...be aware, if the need to migrate appears, there could be potential hitches, such as incompatible dialects or a query that uses vendor specifics, hence the potential to get locked into that database and not being able to migrate at all...something to bear in mind for later on...&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;You need to be careful what you decide here and look at it from a long-term perspective, future upgrades, migration to another database, how easy would it be to up-scale, etc&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2442784" ParentId="2442735" CreationDate="2010-03-14T16:19:12.750" OwnerUserId="219155" Tags="[]" Body="&amp;lt;p&amp;gt;One obvious entry in this category is Intersystems Cach&#xE9;. (Well, obvious to me...) Be aware, though, it's not cheap. (But I don't think Kdb+ is either.)&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2442851" ParentId="2442735" CreationDate="2010-03-14T16:36:39.290" OwnerUserId="286260" Tags="[]" Body="&amp;lt;p&amp;gt;What about Redis?&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://code.google.com/p/redis/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://code.google.com/p/redis/&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Haven't try it yet did read about it and it seem to be a fast and stable enough for data storage.&#10;It also provides you with a decent anti-single-point-failure solution, as far as I understand.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2442956" ParentId="2442735" CreationDate="2010-03-14T17:03:56.873" OwnerUserId="257090" Tags="[]" Body="&amp;lt;p&amp;gt;Berkely DB is tried and tested and hardened and is at the heart of many mega-high transaction volume systems. One example is wireless carrier infrastructure that use huge LDAP stores (OpenWave, for example) to process more than 2 BILLION transactions per day. These systems also commonly have something like Oracle in the mix too for point in time recovery, but they use Berkeley DB as replicated caches.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Also, BDB is not limited to key value pairs in the simple sense of scalar values. You can store anything you want in the value, including arbitrary structures/records.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2443045" ParentId="2440079" CreationDate="2010-03-14T17:31:57.507" OwnerUserId="130168" Tags="[]" Body="&amp;lt;p&amp;gt;I liked Ian Eure's rule of thumb: &#x201C;if you&#x2019;re deploying memcache on top of your database, you&#x2019;re inventing your own ad-hoc, difficult to maintain NoSQL system.&#x201D;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://www.rackspacecloud.com/blog/2010/02/25/should-you-switch-to-nosql-too/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://www.rackspacecloud.com/blog/2010/02/25/should-you-switch-to-nosql-too/&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2443392" ParentId="2443381" CreationDate="2010-03-14T19:15:16.920" OwnerUserId="76337" Tags="[]" Body="&amp;lt;p&amp;gt;SQL Server 2008 has new data types for storing and processing geographic information, in addition to the usual date and time types.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;See &amp;quot;&amp;lt;a href=&amp;quot;http://technet.microsoft.com/en-us/library/bb933876.aspx&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Working with Spatial Data (Database Engine)&amp;lt;/a&amp;gt;&amp;quot;.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2443445" ParentId="2443381" CreationDate="2010-03-14T19:29:35.790" OwnerUserId="178060" Tags="[]" Body="&amp;lt;p&amp;gt;The &amp;quot;best&amp;quot; depends on how you are going to use it and what limitations you are willing to impose upon your solution.  For geographic mapping people are using a technique which transforms the lat/long into a hash code (see &amp;lt;a href=&amp;quot;http://en.wikipedia.org/wiki/R-tree&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;R-Tree&amp;lt;/a&amp;gt;.)  Most SQL databases also support a single column datetime.  You can look to the &amp;lt;a href=&amp;quot;http://www.opengeospatial.org/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Open GIS&amp;lt;/a&amp;gt; website for pre-made third party API's which specifically handle this type of geographic mapping (and more powerful forms of mapping.)&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Without knowing more about the true problem you're attempting to solve and what constraints you plan to solve it I'd refer you to one of the NoSQL types of databases, specifically &amp;lt;a href=&amp;quot;http://www.mongodb.org/display/DOCS/Home&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;MongoDG&amp;lt;/a&amp;gt; and then refer to &amp;lt;a href=&amp;quot;http://gissolved.blogspot.com/2009/05/populating-mongodb-with-pois.html&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;this&amp;lt;/a&amp;gt; blog.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2443873" ParentId="2443712" CreationDate="2010-03-14T21:35:36.090" OwnerUserId="293580" Tags="[]" Body="&amp;lt;p&amp;gt;I am going through the same process. You might find SimplyStored interesting if you haven't already given it a look.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://github.com/peritor/simply_stored&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://github.com/peritor/simply_stored&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2445190" ParentId="2443712" CreationDate="2010-03-15T05:04:11.297" OwnerUserId="242298" Tags="[]" Body="&amp;lt;p&amp;gt;The basic layer of CouchRest is probably the best to get started, CouchPotato is the most active for Rails integration, SimplyStored adds some nicities on top of CouchPotato&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2448065" ParentId="2445878" CreationDate="2010-03-15T15:02:52.630" OwnerUserId="130168" Tags="[]" Body="&amp;lt;p&amp;gt;you would do a multiget_slice w/ keys of alfred, joe, and molly, and SlicePredicate column_names of id, age, phone&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2448225" ParentId="2445878" CreationDate="2010-03-15T15:23:51.840" OwnerUserId="28589" Tags="[]" Body="&amp;lt;p&amp;gt;A Cassandra equivalent could be modelled as described below:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;Users = { //this is a ColumnFamily&#10;  &amp;quot;alfred&amp;quot;: { //this is the key to this Row inside the CF&#10;     &amp;quot;age&amp;quot;:&amp;quot;30&amp;quot;,&#10;     &amp;quot;city&amp;quot;:&amp;quot;london&amp;quot;,&#10;     &amp;quot;phone&amp;quot;:&amp;quot;3281283&amp;quot;&#10;  }, // end row&#10;  // more rows...&#10;}&#10;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;where &amp;quot;alfred&amp;quot; is your (row) key and the row has three columns; age, city and phone. (Omitted the timestamp field (for simplicity) for the three columns)&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2452216" ParentId="2452169" CreationDate="2010-03-16T05:00:25.537" OwnerUserId="110436" Tags="[]" Body="&amp;lt;p&amp;gt;What exactly do you want to implement? What do you mean saying &amp;quot;Object Databases&amp;quot;? Most likely you just need an ORM (Object-Relational Mapper) tool to work with RDBMS in object-oriented way. You can find list of ORMs &amp;lt;a href=&amp;quot;http://en.wikipedia.org/wiki/List_of_object-relational_mapping_software&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;here&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2452304" ParentId="2452169" CreationDate="2010-03-16T05:29:36.933" OwnerUserId="38807" Tags="[]" Body="&amp;lt;p&amp;gt;I guess you want to get started in MongoDb with asp.net MVC. In that case get the latest community supported drivers for Mongodb from &amp;lt;a href=&amp;quot;http://github.com/samus/mongodb-csharp&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://github.com/samus/mongodb-csharp&amp;lt;/a&amp;gt; and follow this step by step blog post &amp;lt;a href=&amp;quot;http://odetocode.com/Blogs/scott/archive/2009/10/13/experimenting-with-mongodb-from-c.aspx&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://odetocode.com/Blogs/scott/archive/2009/10/13/experimenting-with-mongodb-from-c.aspx&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2453646" ParentId="2453513" CreationDate="2010-03-16T10:46:14.947" OwnerUserId="2289" Tags="[]" Body="&amp;lt;p&amp;gt;It does support fetching by object ID.  Your id variable should be an Oid.  Is it the correct type?&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Here is a complete program that will&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;ul&amp;gt;&#10;&amp;lt;li&amp;gt;Connect to Mongo&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;Insert a document&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;Fetch the document back using its ID&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;Print the document's details.&amp;lt;/li&amp;gt;&#10;&amp;lt;/ul&amp;gt;&#10;&#10;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;&#10;// Connect to Mongo&#10;Mongo db = new Mongo();&#10;db.Connect();&#10;&#10;// Insert a test document&#10;var insertDoc = new Document { { &amp;quot;name&amp;quot;, &amp;quot;my document&amp;quot; } };&#10;db[&amp;quot;database&amp;quot;][&amp;quot;collection&amp;quot;].Insert(insertDoc);&#10;&#10;// Extract the ID from the inserted document, stripping the enclosing quotes&#10;string idString = insertDoc[&amp;quot;_id&amp;quot;].ToString().Replace(&amp;quot;\&amp;quot;&amp;quot;, &amp;quot;&amp;quot;);&#10;&#10;// Get an Oid from the ID string&#10;Oid id = new Oid(idString);&#10;&#10;// Create a document with the ID we want to find&#10;var queryDoc = new Document { { &amp;quot;_id&amp;quot;, id } };&#10;&#10;// Query the db for a document with the required ID &#10;var resultDoc = db[&amp;quot;database&amp;quot;][&amp;quot;collection&amp;quot;].FindOne(queryDoc);&#10;db.Disconnect();&#10;&#10;// Print the name of the document to prove it worked&#10;Console.WriteLine(resultDoc[&amp;quot;name&amp;quot;].ToString());&#10;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&#10;"/>
  <row Id="2455442" ParentId="2452395" CreationDate="2010-03-16T15:01:40.137" OwnerUserId="130168" Tags="[]" Body="&amp;lt;p&amp;gt;You mean, random columns?&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;I guess you'd need to read them all to the client and use random.choice or something, it won't do that for you server-side.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2457373" ParentId="2173082" CreationDate="2010-03-16T19:17:40.640" OwnerUserId="62649" Tags="[]" Body="&amp;lt;p&amp;gt;Jon Meredith recently gave a presentation to the Front Range PHP Users Group about NoSQL databases which you might find useful: &amp;lt;a href=&amp;quot;http://www.frontrangephp.org/resources/122-introduction-to-nosql-databases&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;link&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2457383" ParentId="1245338" CreationDate="2010-03-16T19:18:44.337" OwnerUserId="62649" Tags="[]" Body="&amp;lt;p&amp;gt;See &amp;lt;a href=&amp;quot;http://stackoverflow.com/questions/2173082/what-exactly-is-nosql/2457373#2457373&amp;quot;&amp;gt;this question&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2461892" ParentId="2411424" CreationDate="2010-03-17T11:48:08.510" OwnerUserId="157321" Tags="[]" Body="&amp;lt;p&amp;gt;Hi,&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;We have discussed integrating some kind of &amp;quot;interactive LINQ query&amp;quot; into Object Manager (.Net of course :). &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;If you think this would be a nice feature, please vote in the issue &amp;lt;a href=&amp;quot;http://tracker.db4o.com/browse/OMN-146&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;here&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Also, any input on how to improve Object Manager is welcome.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2462653" ParentId="2460876" CreationDate="2010-03-17T13:43:32.797" OwnerUserId="130168" Tags="[]" Body="&amp;lt;p&amp;gt;Migrating from MySQL to Cassandra is usually not something people describe as &amp;quot;easy&amp;quot; for nontrivial applications, but &amp;lt;a href=&amp;quot;http://github.com/NZKoz/cassandra_object/tree/master&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://github.com/NZKoz/cassandra_object/tree/master&amp;lt;/a&amp;gt; can help.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2463324" ParentId="2457494" CreationDate="2010-03-17T15:04:02.523" OwnerUserId="3211" Tags="[]" Body="&amp;lt;p&amp;gt;Currently, there are not, and there is a chance that it may not be possible.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Conditional updates and deletes only allow a condition to be set on the item being updated. In addition to this, there is no built in mechanism to store multiple versions of the same data or store sequence information for multi-valued attributes. Different attribute names can be used, but this breaks querying.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;The recent consistency updates allow for easily implemented transactions at the item level. However, across multiple items in the same (or different) domain, there is no straight forward implementation. Also there are no isolation level options.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;It might be possible to do, but I fear that you would end up killing all query capability in the process. Either through inconsistent attribute names or by requiring more SELECT conditions than good performance will allow. &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Beyond that, it seems like it would require consistent reads for ALL access to the data. This will probably negate all of the the availability benefits of using an eventually consistent system, since consistent reads fail when even a single replica node cannot be reached. &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;I'm not trying to be a nay-sayer, I just wonder how practical it is. You already have to give up a lot of features to get SimpleDB's high availability, which is fine if you don't need those features, but if you then give up the high availability as well, I think there are a lot fewer cases where that would be a good trade off.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2475461" ParentId="1959818" CreationDate="2010-03-19T06:49:55.480" OwnerUserId="76486" Tags="[]" Body="&amp;lt;p&amp;gt;It looks like there are some in the works for MongoDB:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://github.com/sbellity/futon4mongo&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://github.com/sbellity/futon4mongo&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://www.mongodb.org/display/DOCS/Http+Interface&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://www.mongodb.org/display/DOCS/Http+Interface&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://www.mongohq.com&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://www.mongohq.com&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2476507" ParentId="2476280" CreationDate="2010-03-19T10:37:55.400" OwnerUserId="164197" Tags="[]" Body="&amp;lt;p&amp;gt;Many of the NoSQL type systems have details of migration, there are some video examples in here&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://www.mongodb.org/display/DOCS/Articles&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://www.mongodb.org/display/DOCS/Articles&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;or try here&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://nosql-databases.org/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://nosql-databases.org/&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://groups.google.com/group/nosql-discussion&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://groups.google.com/group/nosql-discussion&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2479790" ParentId="2479589" CreationDate="2010-03-19T18:43:57.160" OwnerUserId="122101" Tags="[]" Body="&amp;lt;p&amp;gt;Something like this:  &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;Products : { // Column Family  &#10;    productA : { //Row key  &#10;        name: 'The name of the product' // column&#10;        price: 33.55 // column&#10;        tags : 'fun, toy' // column&#10;    }  &#10;}&#10;&#10;ProductTag : { // Column Family&#10;    fun : { //Row key&#10;        timeuuid_1 : productA // column&#10;        timeuuid_2 : productB // column&#10;    },&#10;    toy : { //Row key&#10;        timeuuid_3 : productA // column&#10;    }&#10;}&#10;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;UPDATE&amp;lt;/strong&amp;gt;&amp;lt;br&amp;gt;&#10;Check this &amp;lt;a href=&amp;quot;http://www.mail-archive.com/user@cassandra.apache.org/msg00108.html&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Model to store biggest score&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2483820" ParentId="2483530" CreationDate="2010-03-20T16:30:18.177" OwnerUserId="131433" Tags="[]" Body="&amp;lt;p&amp;gt;You seem to have a specific idea in mind of a 'document database,' but that term is not a term of art.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;A 'document database' could be:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;ol&amp;gt;&#10;&amp;lt;li&amp;gt;a database with a big text field column and a full text index.&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;an XML database such as MarkLogic or SoftwareAG&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;a complex SQL schema that models a document as a lot of little pieces.&amp;lt;/li&amp;gt;&#10;&amp;lt;/ol&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;There are more or less efficient architectures and indexing strategies for all of these. Only the last uses conventional SQL indices. Full text support uses inverted term indices such as are implemented by Lucene to supply fast search on arbitrary terms. XML databases build indexes on XPath expressions.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2484449" ParentId="2357239" CreationDate="2010-03-20T19:41:37.197" OwnerUserId="285504" Tags="[]" Body="&amp;lt;p&amp;gt;The question perhaps requires a bit more context... assuming a Python environment, consider the tutorial at  the y_serial project: &amp;lt;a href=&amp;quot;http://yserial.sourceforge.net/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://yserial.sourceforge.net/&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;NoSQL is not merely adopted for reasons of scalability. Serialization (of any arbitrary Python object) and persistence are very convenient at any scale -- so consider the key-value system as one approach. &amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2484491" ParentId="2278186" CreationDate="2010-03-20T19:52:40.480" OwnerUserId="285504" Tags="[]" Body="&amp;lt;p&amp;gt;If you are in a Python environment, consider the y_serial module: &amp;lt;a href=&amp;quot;http://yserial.sourceforge.net/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://yserial.sourceforge.net/&amp;lt;/a&amp;gt; &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;In under 10 minutes, you will be able to store and access your images (in fact, any arbitrary Python object including webpages) -- in compressed form; NoSQL.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2484513" ParentId="2403174" CreationDate="2010-03-20T19:57:59.253" OwnerUserId="285504" Tags="[]" Body="&amp;lt;p&amp;gt;Sounds like a job for y_serial ;-)&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Here's the description: &amp;quot;Serialization + persistance :: in a few lines of code, compress and annotate Python objects into SQLite; then later retrieve them chronologically by keywords without any SQL. Most useful &amp;quot;standard&amp;quot; module for a database to store schema-less data.&amp;quot;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;See &amp;lt;a href=&amp;quot;http://yserial.sourceforge.net/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://yserial.sourceforge.net/&amp;lt;/a&amp;gt; for more details.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2484565" ParentId="2328169" CreationDate="2010-03-20T20:10:21.427" OwnerUserId="285504" Tags="[]" Body="&amp;lt;p&amp;gt;y_serial is written as a single Python module which reads like a working tutorial and includes many tips and references: &amp;lt;a href=&amp;quot;http://yserial.sourceforge.net/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://yserial.sourceforge.net/&amp;lt;/a&amp;gt; &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;This takes the perspective of how to persist an arbitrary Python object (e.g. a dictionary data structure) in a &amp;quot;NoSQL&amp;quot; (Not only SQL) manner. &amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2484799" ParentId="2357087" CreationDate="2010-03-20T21:14:13.247" OwnerUserId="50277" Tags="[]" Body="&amp;lt;p&amp;gt;I'm using SimpleDB as the main structured data store for &amp;lt;a href=&amp;quot;http://www.gridroom.com/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;GridRoom&amp;lt;/a&amp;gt;, a sports video sharing and collaboration service currently in beta. &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;I created &amp;lt;a href=&amp;quot;http://simplesavant.codeplex.com/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Simple Savant&amp;lt;/a&amp;gt;, an open-source object persistence framework written in C#, to make this easier for myself. Aside from the initial work involved in creating the Savant framework itself, using SimpleDB means I spend about 1% of my time working on and supporting the data tier vs, say, 15% with SQL Server or another RDBMS. &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;There are still gaps in the administration and reporting tools that might make it difficult to justify moving an existing application over to SimpleDB for a couple more years, but for a new application I've found it to be a great choice.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2484928" ParentId="2457494" CreationDate="2010-03-20T21:54:07.940" OwnerUserId="50277" Tags="[]" Body="&amp;lt;p&amp;gt;I've thought a lot about this while working on my &amp;lt;a href=&amp;quot;http://simplesavant.codeplex.com/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Simple Savant C# library for SimpleDB&amp;lt;/a&amp;gt;, and I've come to the conclusion that attempting to layer true transactionality on a distributed system like SimpleDB is a bad idea for a whole host of reasons.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;The best thing I've come up with (that provides value without over-promising and over-complicating the system) is something I'm calling &amp;quot;reliable writes&amp;quot;. This would guarantee that all operations (puts and deletes) in a cross-domain update complete eventually. The only way for part of the write to fail permanently would be if one of your updates violated SimpleDB constraints.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;This feature has not yet been implemented, but you can read more details and comment on the feature &amp;lt;a href=&amp;quot;http://simplesavant.codeplex.com/WorkItem/View.aspx?WorkItemId=2181&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;here&amp;lt;/a&amp;gt;. I'd be interested in hearing your thoughts and how this would meet your needs as an application developer.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2486364" ParentId="2486346" CreationDate="2010-03-21T08:00:57.860" OwnerUserId="271959" Tags="[]" Body="&amp;lt;p&amp;gt;First, is 0.5s a problem or not? And did you already optimize your queries, datamodel and configuration settings? If not, you can still get better performance. Performance is a choice.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Besides speed, there is also functionality, that's what you will loose.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;===&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;What about pushing the function to a JOIN:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;EXPLAIN ANALYZE&#10;SELECT &#10;    D.doc_id as doc_id,&#10;    (count(D.doc_crc32) *1.0 / testing.get_count_by_doc_id(D.doc_id))::real as avg_doc &#10;FROM &#10;    testing.text_attachment D&#10;        JOIN (SELECT testing.get_crc32_rows_by_doc_id(29758) AS r) AS crc ON D.doc_crc32 = r&#10;WHERE &#10;    D.doc_id &amp;amp;#38;lt;&amp;amp;#38;gt; 29758&#10;GROUP BY D.doc_id&#10;ORDER BY avg_doc DESC&#10;LIMIT 10&#10;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&#10;"/>
  <row Id="2486373" ParentId="2452169" CreationDate="2010-03-21T08:05:01.730" OwnerUserId="64105" Tags="[]" Body="&amp;lt;p&amp;gt;For a good introduction to MongoDB with C#, you might look at this series:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;ul&amp;gt;&#10;&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;http://mookid.dk/oncode/archives/1057&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://mookid.dk/oncode/archives/1057&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;http://mookid.dk/oncode/archives/1107&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://mookid.dk/oncode/archives/1107&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;http://mookid.dk/oncode/archives/1145&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://mookid.dk/oncode/archives/1145&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;http://mookid.dk/oncode/archives/1165&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://mookid.dk/oncode/archives/1165&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&#10;&amp;lt;/ul&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;As for using it from ASP.net MVC, I don't know of any reference-implementation yet.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2486507" ParentId="2486346" CreationDate="2010-03-21T09:20:31.317" OwnerUserId="35306" Tags="[]" Body="&amp;lt;p&amp;gt;1.5 GByte is nothing. Serve from ram. Build a datastructure that helps you searching.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2486640" ParentId="2486346" CreationDate="2010-03-21T10:05:39.503" OwnerUserId="112499" Tags="[]" Body="&amp;lt;p&amp;gt;If you're getting that bad performance out of PostgreSQL, a good start would be to tune PostgreSQL, your query and possibly your datamodel. A query like that should serve a lot faster on such a small table.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2486878" ParentId="2486346" CreationDate="2010-03-21T11:30:41.807" OwnerUserId="123984" Tags="[]" Body="&amp;lt;p&amp;gt;I don't think your main problem here is the kind of database you're using but the fact that you don't in fact have an &amp;quot;index&amp;quot; for what you're searching: similarity between documents.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;My proposal is to determine once which are the 10 documents similar to each of the 100.000 doc_ids and &amp;lt;strong&amp;gt;cache&amp;lt;/strong&amp;gt; the result in a new table like this:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;doc_id(integer)-similar_doc(integer)-score(integer)&#10;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;where you'll insert 10 rows per document each of them representing the 10 best matches for it. You'll get 400.000 rows which you can directly access by index which should take down search time to something like O(log n) (depending on index implementation).&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Then, on each insertion or removal of a document (or one of its values) you iterate through the documents and update the new table accordingly.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;e.g. when a new document is inserted:&#10;for each of the documents already in the table&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;ol&amp;gt;&#10;&amp;lt;li&amp;gt;you calculate its match score and&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;if the score is higher than the lowest score of the similar documents cached in the new table you swap in the similar_doc and score of the newly inserted document&amp;lt;/li&amp;gt;&#10;&amp;lt;/ol&amp;gt;&#10;"/>
  <row Id="2489708" ParentId="2488783" CreationDate="2010-03-22T02:27:23.573" OwnerUserId="237955" Tags="[]" Body="&amp;lt;p&amp;gt;It looks like a bug in the library:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;sub readByte&#10;{&#10;    my $self  = shift;&#10;    my $value = shift;&#10;&#10;    my $data = $self-&amp;amp;#38;gt;{trans}-&amp;amp;#38;gt;readAll(1);&#10;    my @arr = unpack('c', $data);&#10;    $$value = $arr[0];    # &amp;amp;#38;lt;~ line 376&#10;    return 1;&#10;}&#10;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;(from &amp;lt;code&amp;gt;&amp;lt;a href=&amp;quot;http://cpansearch.perl.org/src/TEODOR/Net-Cassandra-Easy-0.05/lib/Net/GenThrift/Thrift/BinaryProtocol.pm&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Net::GenThrift::Thrift::BinaryProtocol&amp;lt;/code&amp;gt;&amp;lt;/a&amp;gt;)&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Apparently that sub is being called from somewhere in the library where &amp;lt;code&amp;gt;$value&amp;lt;/code&amp;gt; is not a variable, but a constant scalar. I'd report the bug to the authors.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2493782" ParentId="2488783" CreationDate="2010-03-22T16:07:44.110" OwnerUserId="58394" Tags="[]" Body="&amp;lt;p&amp;gt;The code works as expected under Cassandra 0.6.x, but fails under Cassandra 0.5.x.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;It appears as if &amp;lt;code&amp;gt;Net::Cassandra::Easy&amp;lt;/code&amp;gt; is targeting Cassandra 0.6.x only.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Upgrading to Cassandra 0.6.x solves the problem.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2496466" ParentId="2495141" CreationDate="2010-03-22T23:21:57.257" OwnerUserId="74496" Tags="[]" Body="&amp;lt;p&amp;gt;How about&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;$result = $cassandra-&amp;amp;#38;gt;get(['row1', 'row2', 'row3'], family =&amp;amp;#38;gt; 'Standard1', standard =&amp;amp;#38;gt; 1);&#10;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;standard =&amp;amp;#38;gt; 1&amp;lt;/code&amp;gt; will force Net::Cassandra::Easy to use a slice predicate that matches all columns in the family.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2496672" ParentId="2452169" CreationDate="2010-03-23T00:14:41.737" OwnerUserId="50964" Tags="[]" Body="&amp;lt;p&amp;gt;Have a look at Rob Conery's blog at &amp;lt;a href=&amp;quot;http://www.wekeroad.com&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://www.wekeroad.com&amp;lt;/a&amp;gt;. He's been doing a lot of work lately with MongoDB. His main project which provides an object persistence interface, although it is still very much a work in progress, can be found on &amp;lt;a href=&amp;quot;http://github.com/atheken/NoRM&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;github as NoRM&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2496740" ParentId="667141" CreationDate="2010-03-23T00:33:11.360" OwnerUserId="207036" Tags="[]" Body="&amp;lt;p&amp;gt;There are three main data models (C.J.Date, E.F.Codd) and I am adding a flat file to this:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;ul&amp;gt;&#10;&amp;lt;li&amp;gt;flat file(s) (structure varies - from 'stupid' flat text to files conforming to grammars which coupled with clever tools do very clever things, think compilers and what they can do, narrow application in modelling new things)&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;http://en.wikipedia.org/wiki/Hierarchical_data_model&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;hierarchical&amp;lt;/a&amp;gt; (trees, nested sets - examples: xml and other markup languages, registry, organizational charts, etc; anything can be modelled, but integrity rules are not easy to express and retrieval is hard to optimize automatically, some retrieval is fast and some is very slow )&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;http://en.wikipedia.org/wiki/Network_data_model&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;network&amp;lt;/a&amp;gt; (networks, graphs - examples: navigational databases, hyperlinks, semantic web, again almost anything can be modelled but automatic optimizing of retrieval is a problem)&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;http://en.wikipedia.org/wiki/Relational_data_model&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;relational&amp;lt;/a&amp;gt; (first order predicate logic - example: relational databases, automatic optimization of retrieval)&amp;lt;/li&amp;gt;&#10;&amp;lt;/ul&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Both hierarchical and network can be represented in relational and relational can be expressed in the other two.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;The reason that relational is considered 'better' is the declarative nature and standardization on not only the data retrieval language but also on the data definition language, including the strong declarative data integrity, backed up with &amp;lt;a href=&amp;quot;http://en.wikipedia.org/wiki/ACID&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;stable&amp;lt;/a&amp;gt;, scalable, multi-user management system.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Benefits come at a cost, which most projects find to be a good ratio for systems (multi application) that store long term data in a from that will be usable in foreseeable future.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;If you are not building a system, but a single application, perhaps for a single user, and you are fairly certain that you will not want multiple applications using your data, nor multiple users, any time soon then you'll probably find faster approaches.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Also if you don't know what kind of data you want to store and how to model it then relational model strengths are wasted on it. &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Or if you simply don't care about integrity of your data that much (which can be fine).&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;All data structures are optimized for a certain kind of use, only relational if properly modelled tries to represent the 'reality' in semantically unbiased way. People who had bad experience with relational databases usually don't realize that their experience would have been much worse with other types of data models. Horrible implementations are possible, and especially with relational databases, where it is relatively easy to build complex models, you could end up with quite a monster on your hands. Still I always feel better when I try to imagine the same monster in xml.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;One example of how good relational model is, IMO, is ratio of complexity vs shortness of the questions that you will find that involve SQL.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2500874" ParentId="2500595" CreationDate="2010-03-23T14:55:48.373" OwnerUserId="28589" Tags="[]" Body="&amp;lt;p&amp;gt;Take a look at &amp;lt;a href=&amp;quot;http://wiki.apache.org/cassandra/API#get_range_slices&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;get_range_slices&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;list&amp;amp;#38;lt;KeySlice&amp;amp;#38;gt; get_range_slices(keyspace, column_parent, predicate, range, consistency_level) &#10;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;which replaces get_range_slice in 0.6.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Nb. For version &amp;amp;#38;lt; 0.6: this method is only allowed when using an order-preserving partitioner. &amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2502768" ParentId="2502742" CreationDate="2010-03-23T18:55:55.553" OwnerUserId="84651" Tags="[]" Body="&amp;lt;p&amp;gt;MongoDB powers SourceForge, The New York Times, and several other large databases...&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2502789" ParentId="2502742" CreationDate="2010-03-23T18:58:53.600" OwnerUserId="636" Tags="[]" Body="&amp;lt;p&amp;gt;You should read the &amp;lt;a href=&amp;quot;http://www.mongodb.org/display/DOCS/Use+Cases&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;MongoDB use cases&amp;lt;/a&amp;gt;. People who are just playing with technology are often just looking at how does this work and are not at the point where they can understand the limitations. For the right sorts of datasets and access patterns 50GB is nothing for MongoDB running on the right hardware. &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;These non-relational systems look at the trade-offs which RDBMs made, and changed them a bit. Consistency is not as important as other things in some situations so these solutions let you trade that off for something else. The trade-off is still relatively minor ms or maybe secs in some situations.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;It is worth reading about the &amp;lt;a href=&amp;quot;http://www.julianbrowne.com/article/viewer/brewers-cap-theorem&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;CAP theorem&amp;lt;/a&amp;gt; too.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2502795" ParentId="2502742" CreationDate="2010-03-23T18:59:10.803" OwnerUserId="40015" Tags="[]" Body="&amp;lt;p&amp;gt;Here's some benchmarks on db4o:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://www.db4o.com/about/productinformation/benchmarks/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://www.db4o.com/about/productinformation/benchmarks/&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;I think it ultimately depends on a lot of factors, including the complexity of the data, but db4o seems to certainly hang with the best of them.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2502988" ParentId="2502742" CreationDate="2010-03-23T19:32:06.787" OwnerUserId="25343" Tags="[]" Body="&amp;lt;p&amp;gt;I was looking at moving the API I have for sure with the stack overflow iphone app I wrote a while back to MongoDB from where it currently sits in a MySQL database. In raw form the SO CC dump is in the multi-gigabyte range and the way I constructed the documents for MongoDB resulted in a 10G+ database. It is arguable that I didn't construct the documents well but I didn't want to spend a ton of time doing this.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;One of the very first things you will run into if you start down this path is the lack of 32 bit support. Of course everything is moving to 64 bit now but just something to keep in mind. I don't think any of the major document databases support paging in 32 bit mode and that is understandable from a code complexity standpoint.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;To test what I wanted to do I used a 64 bit instance EC2 node. The second thing I ran into is that even though this machine had 7G of memory when the physical memory was exhausted things went from fast to not so fast. I'm not sure I didn't have something set up incorrectly at this point because the non-support of 32 bit system killed what I wanted to use it for but I still wanted to see what it looked like. Loading the same data dump into MySQL takes about 2 minutes on a much less powerful box but the script I used to load the two database works differently so I can't make a good comparison. Running only a subset of the data into MongoDB was much faster as long as it resulted in a database that was less than 7G.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;I think my take away from it was that large databases will work just fine but you may have to think about how the data is structured more than you would with a traditional database if you want to maintain the high performance. I see a lot of people using MongoDB for logging and I can imagine that a lot of those databases are massive but at the same time they may not be doing a lot of random access so that may mask what performance would look like for more traditional applications.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;A recent resource that might be helpful is the &amp;lt;a href=&amp;quot;http://blog.nahurst.com/visual-guide-to-nosql-systems&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;visual guide to nosql systems&amp;lt;/a&amp;gt;. There are a decent number of choices outside of MongoDB. I have used Redis as well although not with as large of a database.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2503319" ParentId="2502742" CreationDate="2010-03-23T20:22:19.280" OwnerUserId="4243" Tags="[]" Body="&amp;lt;p&amp;gt;Someone just went into production with a 12 terabytes of data in MongoDB.  The largest I knew of before that was 1 TB.  Lots of people are keeping really large amounts of data in Mongo.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;It's important to remember that Mongo works a lot like a relational database: you need the right indexes to get good performance.  You can use explain() on queries and contact &amp;lt;a href=&amp;quot;http://groups.google.com/group/mongodb-user/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;the user list&amp;lt;/a&amp;gt; for help with this.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2504623" ParentId="2504591" CreationDate="2010-03-24T00:32:59.920" OwnerUserId="28401" Tags="[]" Body="&amp;lt;p&amp;gt;There is a &amp;lt;a href=&amp;quot;http://github.com/samus/mongodb-csharp/tree/master/MongoDB.Linq/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;LINQ Provider&amp;lt;/a&amp;gt; for &amp;lt;a href=&amp;quot;http://www.mongodb.org/display/DOCS/Home&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;MongoDB&amp;lt;/a&amp;gt; (another NoSQL DB) - haven't had any experience with it yet. The Provider is just a part of a complete .NET library for accessing MongoDB.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2504846" ParentId="2504833" CreationDate="2010-03-24T01:48:21.443" OwnerUserId="3055" Tags="[]" Body="&amp;lt;p&amp;gt;Well &amp;quot;Fast, networked and language-independent&amp;quot; + &amp;quot;few complex queries&amp;quot; brings to mind the various NoSQL solutions. To name a few:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;ul&amp;gt;&#10;&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;http://www.mongodb.org/display/DOCS/Home&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;MongoDB&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;http://couchdb.apache.org/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;CouchDB&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;http://cassandra.apache.org/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Cassandra&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&#10;&amp;lt;/ul&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;And if that's not fast enough, there are always the wicked fast &amp;lt;a href=&amp;quot;http://code.google.com/p/redis/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Redis&amp;lt;/a&amp;gt; which is my personal favorite atm. :) It is not a database per se, but it's good enough for most scenarios.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;I am sure other people can list more NoSQL databases...&amp;lt;br&amp;gt;&#10;and there is always &amp;lt;strong&amp;gt;&amp;lt;a href=&amp;quot;http://nosql-database.org/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://nosql-database.org/&amp;lt;/a&amp;gt;&amp;lt;/strong&amp;gt; .&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Generally speaking, databases in this category is better and faster in your scenario because they have relaxed constraints and thus is easier and faster to insert/update/retrieve frequently. But that requires that you think harder about your data model and it is generally not possible to do SQL-style complex queries directly -- you'll instead write more pre-computed data or use a more denormalized design to account for the lack of complex queries.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;But since complex queries is a minor problem in your case, I think NoSQL solutions are ideal for you.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2504851" ParentId="2504833" CreationDate="2010-03-24T01:49:51.317" OwnerUserId="636" Tags="[]" Body="&amp;lt;p&amp;gt;Have you done any sort of end-to-end profiling of your application and MySQL database? To provide better advice it would also be good to understand what improvements you have tried to implement, and your database structure. You haven't given a lot of information on how your MySQL database is configured either. It provides a lot of options for tuning.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;You should pick up a copy of &amp;lt;a href=&amp;quot;http://oreilly.com/catalog/9780596101718&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;High Performance MySQL&amp;lt;/a&amp;gt; if you haven't already to learn more about the product.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;There is no point in doing anything until you know what your problem is. NoSQL solutions can offer performance benefits but you have provided little evidence that MySQL is incapable of servicing your needs.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2506556" ParentId="2505900" CreationDate="2010-03-24T09:36:02.723" OwnerUserId="244618" Tags="[]" Body="&amp;lt;p&amp;gt;Your data seems ideal for document oriented databases.&amp;lt;br&amp;gt;&#10;Document example:&amp;lt;br&amp;gt;&#10;&amp;lt;code&amp;gt;{&amp;lt;br&amp;gt;&#10;&amp;quot;type&amp;quot;:&amp;quot;Album&amp;quot;,&amp;lt;br&amp;gt;&#10;&amp;quot;artist&amp;quot;:&amp;quot;ArtistName&amp;quot;,&amp;lt;br&amp;gt;&#10;&amp;quot;album_name&amp;quot;:&amp;quot;AlbumName&amp;quot;,&amp;lt;br&amp;gt;&#10;&amp;quot;songs&amp;quot; : [&amp;lt;br&amp;gt;&#10; {&amp;quot;title&amp;quot;:&amp;quot;SongTitle&amp;quot;,&amp;quot;duration&amp;quot;:4.5}&amp;lt;br&amp;gt;&#10;],&amp;lt;br&amp;gt;&#10;&amp;quot;genres&amp;quot;:[&amp;quot;rock&amp;quot;,&amp;quot;indie&amp;quot;]&amp;lt;br&amp;gt;&#10;}&amp;lt;/code&amp;gt;  &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;And replication is one of couchDB coolest features ( &amp;lt;a href=&amp;quot;http://blog.couch.io/post/468392274/whats-new-in-apache-couchdb-0-11-part-three-new&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://blog.couch.io/post/468392274/whats-new-in-apache-couchdb-0-11-part-three-new&amp;lt;/a&amp;gt; )&amp;lt;br&amp;gt;&#10;You might also wanna take a look at Riak.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2507095" ParentId="2505900" CreationDate="2010-03-24T11:07:47.483" OwnerUserId="5296" Tags="[]" Body="&amp;lt;p&amp;gt;This kind of information is ideally suited to document databases.  As with much real-world data, it is not inherently relational, so shoe-horning it into a relational schema will bring headaches down the line (even using an ORM - I speak from experience).  Ubuntu already uses CouchDB for storing music metadata, as well as other things, in their &amp;lt;a href=&amp;quot;https://one.ubuntu.com/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;One product&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Taking the remainder of your questions one-by-one:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;ol&amp;gt;&#10;&amp;lt;li&amp;gt;Horizontal scaling is &amp;lt;em&amp;gt;WAY&amp;lt;/em&amp;gt; easier than with RDBMS.  This is one of the many reasons big sites like Facebook, Digg and LinkedIn are using, or are actively investigating, schema-less databases.  For example, sharding (dividing your data across different nodes in a system) works beautifully thanks to a concept called &amp;lt;a href=&amp;quot;http://en.wikipedia.org/wiki/Eventual_consistency&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Eventual Consistency&amp;lt;/a&amp;gt;; i.e., the data may be inconsistent across nodes for a while, but it will eventually resolve to a consistent state.  &amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;It depends what you mean by &amp;quot;manage&amp;quot;...  Installation is generally quick and easy to complete.  There are no user accounts to configure and secure (this is instead generally done in the application's business logic layer).  Working with a document DB in real time can be interesting: there's no ad hoc querying in CouchDB, for example; you have to use the Futon UI or communicate with it via HTTP requests.  MongoDB, however, does support ad hoc querying. &amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;I shouldn't think so.  Bastien's answer provides a good example of a JSON document serialising some data.  The beauty of schemaless DBs is that fields can be missing from one document and present in another, or the documents can be completely different from one another.  This removes many of the problems involved with RDBMS' &amp;lt;code&amp;gt;null&amp;lt;/code&amp;gt; value, which are many and varied.  &amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;Yes; the associations are stored as nested documents, which are parsed in your application as object references, collections, etc.  In Bastien's answer, the &amp;quot;songs&amp;quot; key identifies an array of song documents.  &amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;This is very similar to your first question about horizontal scaling (horizontal scaling and replication are intertwined).  As the CouchIO blog post Bastien mentioned states, &amp;quot;Replication &amp;amp;#38;hellip; has been baked into CouchDB from the beginning.&amp;quot;.  My understanding is that all document databases handle replication well, and do so more easily than it is to set it up in an RDBMS.  &amp;lt;/li&amp;gt;&#10;&amp;lt;/ol&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Were you to decide you wanted to store the song file itself along with the metadata, you could do that too in CouchDB, by supplying the song file as an attachment to the document; further more, you wouldn't have any schema inconsistencies as a result of doing this, because there is no schema!  &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;I hope I haven't made too many missteps here; I'm quite new to document DBs myself.  &amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2507634" ParentId="2505900" CreationDate="2010-03-24T12:38:50.580" OwnerUserId="207036" Tags="[]" Body="&amp;lt;p&amp;gt;Regarding horizontal scaling read this &amp;lt;a href=&amp;quot;http://spyced.blogspot.com/2008/12/couchdb-not-drinking-kool-aid.html&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;this&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2508839" ParentId="2501583" CreationDate="2010-03-24T15:13:52.563" OwnerUserId="130168" Tags="[]" Body="&amp;lt;p&amp;gt;Please submit bug reports to &amp;lt;a href=&amp;quot;https://issues.apache.org/jira/browse/CASSANDRA&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;https://issues.apache.org/jira/browse/CASSANDRA&amp;lt;/a&amp;gt;, not SO.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2509361" ParentId="2504833" CreationDate="2010-03-24T16:17:38.163" OwnerUserId="116805" Tags="[]" Body="&amp;lt;p&amp;gt;With the data you've given about your application's data and workload, it is almost impossible to determine whether the problem really is MySQL itself or something else. You seem to assume that you can throw any workload to a relational engine and it should handle it. Therefore the suggestions made by other commenters about analyzing the performance more carefully are valid in my opinion. Without more data (transactions / second etc.) any further analysis regarding other suitable engines is also futile.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2509482" ParentId="2504833" CreationDate="2010-03-24T16:32:55.093" OwnerUserId="197229" Tags="[]" Body="&amp;lt;p&amp;gt;I'm not sure I agree with the advice to jump ship on traditional databases. It might not be the most efficient tool, but it is the one that is FAR more widely understood and used, and a strongly doubt you have a problem that can't be handled by an efficiently set up relational database.&#10;Obvious answers are Oracle, SQLServer, etc, but it might just be your database structure isn't right. I don't know much about MySQL but I do know it's used in some pretty big projects (eBay being noteworthy). &amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2510666" ParentId="2510627" CreationDate="2010-03-24T19:08:27.697" OwnerUserId="158595" Tags="[]" Body="&amp;lt;p&amp;gt;It kind of depends on what sorts of analysis you are going to be doing on these stats. If you are going to be doing a lot of different operations (averaging, summing, joining...) you may find NoSQL solutions to be more of a pain then they are worth.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;However, if you are storing stats mostly for a display purpose, or for very specific analysis routines, NoSQL solutions start to shine.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;If your data is small enough, stick with a SQL solution, which will give the benefit of a full query engine to work with, but if you have lots of values (one value a day is nothing, even if you were running for a million years), and are worried about storage size and performance, NoSQL options once again may be worth it.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;If your data is semi-structured, take a look at CouchDB, which offers some rudimentary indexing and querying support, which could provide some basis for analysis routines. If you are storing individual values with very little structure, my best advice would be to take a look at Tokyo Cabinet and Tokyo Tyrant, which are absolutely incredible options for key-value storage.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2510680" ParentId="2510627" CreationDate="2010-03-24T19:09:55.340" OwnerUserId="131070" Tags="[]" Body="&amp;lt;p&amp;gt;NoSQL systems tend to optimize the case where data is stored frequently, but accessed infrequently.  In the case of statistics, you might gather lots of data from a (social) site frequently in small bits, which is optimized for. But retrieval and analysis might be slower...  It of course depends on which &amp;quot;NoSql&amp;quot; System you decide to use.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2516839" ParentId="2516752" CreationDate="2010-03-25T15:26:45.020" OwnerUserId="110469" Tags="[]" Body="&amp;lt;p&amp;gt;I'd suggest the following given that you are looking at multiple options [SQL or NoSQL]. While reading up on magento I came across &amp;lt;a href=&amp;quot;http://en.wikipedia.org/wiki/Entity-attribute-value_model&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://en.wikipedia.org/wiki/Entity-attribute-value_model&amp;lt;/a&amp;gt; which makes sense when you have a large number of attributes [columns in day to language] of which most will be null. Read up the wiki page and note the part that specifically related to lab reports.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2517105" ParentId="2516752" CreationDate="2010-03-25T15:57:09.990" OwnerUserId="146325" Tags="[]" Body="&amp;lt;p&amp;gt;Perhaps the original NoSQL database was MUMPS, which dates from before Codd devised his rules (i.e. the 1960s).  As the name implies  (*M*assachusetts General Hospital *U*tility *M*ulti-*P*rogramming *S*ystem),  its original purpose was the storing of medical documents.  Apparently MUMPS is still in use in some healthcare systems and other environments.  &amp;lt;a href=&amp;quot;http://en.wikipedia.org/wiki/MUMPS&amp;quot; rel=&amp;quot;nofollow&amp;quot; title=&amp;quot;Wikipedia article&amp;quot;&amp;gt;Find out more.&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;But as for the more recent rash of NoSQL databases I would be suprised if there were any implementations - yet.  Most of these products are still extremely beta and - being largely open source - lacking in support.  Medical apps are inevitably going to be extremely conservative, because people could die if the IT system fouls up.   &amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2520965" ParentId="2520791" CreationDate="2010-03-26T03:15:26.017" OwnerUserId="108056" Tags="[]" Body="&amp;lt;p&amp;gt;I would say two things.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;First my answer to your question. Secondly what I think you should do instead.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;1. Answer:&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;SQL, its easy to develop and test + production for some time. &#10;A table for Players, with INT or some other uniq value, not strings. (I know you said its a sample, but go for &amp;quot;long word&amp;quot; ints that ought to give you enough unique ID's&#10;Same goes for Game. Now the thing to keep the highscores together would be to have a relation between the two.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;em&amp;gt;Score (Table relation):&amp;lt;/em&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;[Player ID][Game_ID][Score]&#10;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Where score is a numeric value... I dont know the max score of each of your games, so you figure out what type is enough.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Now, this should be quite easy to implement for a start. Get that to work. But dont make every call directly to the database.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Make a 3-TIER architecture. Make a datalayer and a businesslayer and then the &amp;quot;game&amp;quot; layer.&#10;So every game calls the businesslayer with its own &amp;quot;game ID&amp;quot; like:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;PlayerSaveScore(int gameID, int playerID, int score)&#10;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;The Businesslayer then checks that the &amp;quot;parameters&amp;quot; are of the correct size and are valid ID's, perhaps validates that this player actual has been in a session the past 5 minutes etc.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;After validation, then the Businesslayer calles the datalayer for &amp;quot;update table&amp;quot; where the datalayer first looks if the record exists. IF not, then it inserts it.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Tier design&amp;lt;/strong&amp;gt;&#10;Once you are &amp;quot;online&amp;quot; (in air) and the games becomes popular, then you can start to &amp;quot;upgrade&amp;quot;, but you are still able to get going now with a &amp;quot;furture scaleable solution&amp;quot;. Just remember that EVERY game MUST call to the business object/layer, not directly - NEVER!&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;I've been in the same &amp;quot;thought ooh so many times&amp;quot; but I kept getting into one simple loop called preparation, but that has almost never gotten me into a realistic solution thats up and running fast.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;So get 100000 players first! then start worrying when it grows beyond.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;2. Part to... how to scale... suggestion:&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;So here is my reason for all the trouble of building the &amp;quot;businesslayer/webservices&amp;quot;... &#10;And best of all, your speed problems can be solved nicely now.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;You can implement &amp;quot;cache&amp;quot; quite simple.&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;You make an extra table, if you only have 15 games, you dont need a table pr. game, but you decide. That one ONLY keeps the TOP 100 of each game. each time you post a new record from a player, you make a select on this &amp;quot;top 100&amp;quot; and checks if the posted value comes into the list. if it does, then handle that by updating the top 100 table and for extra speed purpose. &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Build the extract of Top 100 as a static datalist, eg. XML or similar static data. Depending on your platform, you pick the right &amp;quot;static format&amp;quot; for you.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;You could even improve speed further. Just keep the smallest value needed to get on top 100 of each game. That would be a record pr. game.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Then match the player score against the game's &amp;quot;lowest score in top 100&amp;quot;... if its above, then you have some &amp;quot;caching/indexing&amp;quot; to do and THEN you call the &amp;quot;giant sort&amp;quot; :o)&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Get the point? I know its a very long answer, but I wanted to post you a &amp;quot;complete&amp;quot; solution. &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Hope you will mark this as your answer :o)&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2522389" ParentId="2520791" CreationDate="2010-03-26T10:12:33.873" OwnerUserId="28875" Tags="[]" Body="&amp;lt;p&amp;gt;I don't see why this can't be solved with one score table and simple SQL queries:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;(Untested pseudo-SQL)&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;create table scores {&#10;  player_id as integer,&#10;  game_id as integer,&#10;  score as integer&#10;}&#10;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;most played games: &amp;lt;code&amp;gt;SELECT count(*) AS c FROM scores GROUP BY game_id ORDER BY c DESC&amp;lt;/code&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;best player: &amp;lt;code&amp;gt;SELECT sum(score) AS s FROM scores GROUP BY player_id ORDER BY s DESC&amp;lt;/code&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;best player in a given game: &amp;lt;code&amp;gt;SELECT * FROM scores WHERE score=(SELECT max(score) FROM scores WHERE game_id=$given_game) LIMIT 1&amp;lt;/code&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;If you need to get a list of the best players across all games simultaneously, you can extend that last query a little (which can probably be optimised with a join, but it's too early for me to think that through right now).&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;The number of rows you're talking about is tiny in database terms. If you cache the query results as well (eg. via something like memcached, or within your RoR application) then you'll barely touch the database at all for this.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2523733" ParentId="2476280" CreationDate="2010-03-26T13:54:39.500" OwnerUserId="138041" Tags="[]" Body="&amp;lt;p&amp;gt;You may check a real example of a working twitter simple clone &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://twissandra.com/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://twissandra.com/&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;with source codes at &amp;lt;a href=&amp;quot;http://github.com/ericflo/twissandra&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://github.com/ericflo/twissandra&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Here's another good article explaining cassandra data model:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://arin.me/blog/wtf-is-a-supercolumn-cassandra-data-model&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://arin.me/blog/wtf-is-a-supercolumn-cassandra-data-model&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2526222" ParentId="2526192" CreationDate="2010-03-26T19:40:23.507" OwnerUserId="44861" Tags="[]" Body="&amp;lt;p&amp;gt;I have used &amp;lt;a href=&amp;quot;http://www.mongodb.org&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;MongoDB&amp;lt;/a&amp;gt; on Windows and the install went pretty smoothly.  I haven't put a real heavy load on it yet.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;And you can find a &amp;lt;a href=&amp;quot;http://github.com/robconery/NoRM&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;.NET driver here&amp;lt;/a&amp;gt; for Mongo if that's your platform&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2528683" ParentId="2527173" CreationDate="2010-03-27T08:54:33.337" OwnerUserId="28589" Tags="[]" Body="&amp;lt;p&amp;gt;Cassandra supports map reduce since version 0.6. (Current stable release is 0.5.1, but go ahead and try the new map reduce functionality in 0.6.0-beta3) To get started I recommend to take a look at the word count map reduce example in 'contrib/word_count'.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2528749" ParentId="2527173" CreationDate="2010-03-27T09:27:26.933" OwnerUserId="295964" Tags="[]" Body="&amp;lt;p&amp;gt;MongoDB has update-in-place, so MongoDB should be very good with counters. &amp;lt;a href=&amp;quot;http://blog.mongodb.org/post/171353301/using-mongodb-for-real-time-analytics&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://blog.mongodb.org/post/171353301/using-mongodb-for-real-time-analytics&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2528954" ParentId="2527682" CreationDate="2010-03-27T10:47:26.120" OwnerUserId="74496" Tags="[]" Body="&amp;lt;p&amp;gt;Add &amp;lt;code&amp;gt;use Encode;&amp;lt;/code&amp;gt; to the beginning of your script, and pass variables through &amp;lt;code&amp;gt;Encode::decode_utf8&amp;lt;/code&amp;gt;. For example:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;my $get_value = $result-&amp;amp;#38;gt;{$key}-&amp;amp;#38;gt;{&amp;quot;Standard1&amp;quot;}-&amp;amp;#38;gt;{$column};&#10;$get_value = Encode::decode_utf8($get_value);&#10;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Outputs:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;OK: &#x2603; == &#x2603;&#10;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;When you set &amp;lt;code&amp;gt;$set_value&amp;lt;/code&amp;gt; to &amp;quot;\x{2603}&amp;quot;, Perl detects the wide character and sets the string encoding to UTF-8 for you. To confirm this, print the return value of &amp;lt;code&amp;gt;Encode::is_utf8($set_value)&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Unfortunately, once this string goes into Cassandra and back out again, the encoding information is lost. It appears that Cassandra is encoding-agnostic. Calling &amp;lt;code&amp;gt;Encode::decode_utf8&amp;lt;/code&amp;gt; tells Perl that you have a string containing a UTF-8 byte sequence, and that it should be converted into Perl's internal representation for Unicode. As jrockway points out, you should also call &amp;lt;code&amp;gt;Encode::encode_utf8&amp;lt;/code&amp;gt; on any strings before they are sent to Cassandra, although in most cases Perl already knows they are UTF-8, for example if you've opened a file with the &amp;lt;code&amp;gt;:utf8&amp;lt;/code&amp;gt; encoding layer.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;If you use UTF-8 often, you might want to write a wrapper over Net::Cassandra::Easy to do this automatically.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Finally, you don't need &amp;lt;code&amp;gt;use utf8;&amp;lt;/code&amp;gt; unless your Perl &amp;lt;em&amp;gt;source code&amp;lt;/em&amp;gt; (variable &amp;lt;em&amp;gt;names&amp;lt;/em&amp;gt;, comments etc.) contains UTF-8 characters. Perl can handle UTF-8 &amp;lt;em&amp;gt;strings&amp;lt;/em&amp;gt; whether you specify &amp;lt;code&amp;gt;use utf8;&amp;lt;/code&amp;gt; or not.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2530300" ParentId="2529871" CreationDate="2010-03-27T17:56:08.307" OwnerUserId="271959" Tags="[]" Body="&amp;lt;p&amp;gt;All different products and they all have their pro's and conn's. What kind of problem do you have to solve?&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Huge, as in TB's?&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2530354" ParentId="2529871" CreationDate="2010-03-27T18:09:27.683" OwnerUserId="146325" Tags="[]" Body="&amp;lt;p&amp;gt;There are many different flavours of &amp;quot;NoSQL&amp;quot; databases.  If your application is really like &amp;lt;a href=&amp;quot;http://wordnet.princeton.edu/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Wordnet&amp;lt;/a&amp;gt; perhaps you should look at a graph database such as &amp;lt;a href=&amp;quot;http://neo4j.org/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Neo4j&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2531507" ParentId="2526634" CreationDate="2010-03-28T00:50:18.183" OwnerUserId="130168" Tags="[]" Body="&amp;lt;p&amp;gt;I would just update the user count as a batch operation every N minutes rather than updating it in realtime.  If there's only one process updating it, you don't need to worry about contention by definition.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Alternatively cassandra has a contrib/mutex for adding lock support via ZooKeeper.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2532316" ParentId="2526634" CreationDate="2010-03-28T08:31:58.950" OwnerUserId="295964" Tags="[]" Body="&amp;lt;p&amp;gt;MongoDB has update-in-place and a special inc operator for counters. &amp;lt;a href=&amp;quot;http://blog.mongodb.org/post/171353301/using-mongodb-for-real-time-analytics&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://blog.mongodb.org/post/171353301/using-mongodb-for-real-time-analytics&amp;lt;/a&amp;gt; &amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2533077" ParentId="2529871" CreationDate="2010-03-28T13:37:05.483" OwnerUserId="297094" Tags="[]" Body="&amp;lt;p&amp;gt;I would suggest to analyse your request.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;ol&amp;gt;&#10;&amp;lt;li&amp;gt;If you are going with more clusters, machines take NoSQL&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;If your data model is complicated - require efficient structures take NoSQL (no limits with type of columns)&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;If you fit in a few machines without scales, and you don't need super performance for multi request (as for example in social network - where lot of users send http request), and you don't think you involve saleability take RDBMS (Postgres have some good functions and structures which you can use, like array column type).&amp;lt;/li&amp;gt;&#10;&amp;lt;/ol&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Cassandra should work better with large scales of data, multi purpose.&#10;neo4j - would be better for special structures, graphs.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2534467" ParentId="2534408" CreationDate="2010-03-28T20:40:25.827" OwnerUserId="81106" Tags="[]" Body="&amp;lt;p&amp;gt;what raised this issue that if you have a large server farm and need to manage the distribution of your data and load balancing which is more difficult and harder to implement using RDBMS and requires high IT skills to design, plan and deploy for your solution (and still performance is less).&#10;but if you have only 3 or 4 servers with small project. I don't think you have an issue about it. NoSQL database is usually considered in large server farms not small number of servers&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2534505" ParentId="2534408" CreationDate="2010-03-28T20:50:35.377" OwnerUserId="183402" Tags="[]" Body="&amp;lt;p&amp;gt;Yes, sometimes RDBMS are not the best solution, although there are ways to accomodate user defined fields (see XML Datatype, EAV design pattern, or just have spare generic columns) sometimes a schema free database is a good choice.  &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;However, you need to nail down your requirements before choosing to go with a document database, as you will loose a lot of the power you may be used to with the relational model &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;eg...&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;If you would otherwise have multiple tables in your RDBMS database, you will need to research the features MongoDB affords you to accomodate these needs.  &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;If you will need to query the data in specific ways, again you need to research what MongoDB offers you.  &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;I wouldnt think of NoSQL as replacement for RDBMS, rather a slightly different tool that brings its own sets of advantages and disadvantages making it more suitable for some projects than others.  &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;(Both databases may be used in some circumstances. Also if you decide to go down the route of possibly using MongoDB, once you have researched the websites out there and have more specific questions, you can visit Freenode IRC #mongodb channel)&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2535643" ParentId="2529871" CreationDate="2010-03-29T03:25:18.737" OwnerUserId="125487" Tags="[]" Body="&amp;lt;p&amp;gt;Cassandra and other NoSQL stores are being used for social based sites because of their need for massive write based operations. Not that MySQL and Postgres can't achieve this but NoSQL requires far less time and money, generally speaking.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Sounds like you may want to look at Neo4J though, just in terms of your object model needs.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2538400" ParentId="2529871" CreationDate="2010-03-29T13:58:54.887" OwnerUserId="271959" Tags="[]" Body="&amp;lt;p&amp;gt;A nice article about the NoSQL-movement: &amp;lt;a href=&amp;quot;http://teddziuba.com/2010/03/i-cant-wait-for-nosql-to-die.html&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://teddziuba.com/2010/03/i-cant-wait-for-nosql-to-die.html&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2540140" ParentId="2443381" CreationDate="2010-03-29T18:00:19.757" OwnerUserId="24279" Tags="[]" Body="&amp;lt;p&amp;gt;I have used PostGres (free open source db) with PostGIS extensions for working with location data.  They are extremely good, even though I was working in an MS environment with all production databases using MSSQL 2005, I used PostGres w/GIS to manipulate and precalculate a lot of geographic data.  &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;PostGis has utilities for import arcview .shp files which is a huge plus since that's how most geographic data is present.  It also provides a host of location based sql functions like contains( ... ) and near( ... ); and it provides a mechanism for indexing spatial data.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;It's been awhile since I used it, but I remember it being rock solid and very useful.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;PostGIS: &amp;lt;a href=&amp;quot;http://postgis.refractions.net/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://postgis.refractions.net/&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2540290" ParentId="2539958" CreationDate="2010-03-29T18:26:49.963" OwnerUserId="18315" Tags="[]" Body="&amp;lt;p&amp;gt;Marc-Andre,&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Your best bet is to ask on the mailing list: &amp;lt;a href=&amp;quot;http://lists.basho.com/mailman/listinfo/riak-users_lists.basho.com&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://lists.basho.com/mailman/listinfo/riak-users_lists.basho.com&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;There's also lots of information on the wiki: &amp;lt;a href=&amp;quot;http://wiki.basho.com/display/RIAK/Home&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://wiki.basho.com/display/RIAK/Home&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2540458" ParentId="2539958" CreationDate="2010-03-29T18:53:55.857" OwnerUserId="10715" Tags="[]" Body="&amp;lt;p&amp;gt;I'm not a Riak expert, but if you keep all of your EC2 instances in the same availability zone you should get more than adequate performance.  AWS has a gigabit internal network and people have been able to get the full gigabit out of it; see &amp;lt;a href=&amp;quot;http://blog.rightscale.com/2007/10/28/network-performance-within-amazon-ec2-and-to-amazon-s3/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;this blog post&amp;lt;/a&amp;gt; for an example.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2541325" ParentId="2541273" CreationDate="2010-03-29T21:13:42.967" OwnerUserId="28589" Tags="[]" Body="&amp;lt;p&amp;gt;Take a look at:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;list&amp;amp;#38;lt;KeySlice&amp;amp;#38;gt; get_range_slices(keyspace, column_parent, predicate, range, consistency_level)&#10;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Where your KeyRange tuple is (start_key, end_key) == (r1, r10)&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2547181" ParentId="2546948" CreationDate="2010-03-30T17:20:12.470" OwnerUserId="133858" Tags="[]" Body="&amp;lt;p&amp;gt;Its all about using effective indexes. &#10;If you have a special query, make an index for that query.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Ex. make an index age_lovebutterflies_hateschoclate&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;If you have a high-traffic site like facebook, you would need more power than only sql optimizing. E.g memcaching, implemented a search-engine like vespa or lucene/solr  implemented as clusters. Loadbalancers, multiple servers with 64gb ram, raid disks, and lots of other server technologies... &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Problem with databases like mysql, postgresql, sqlite and oracle is that indexes ok for static searches, but they are not flexible. Ex if you would like to combine searches over columns that are not indexed, no indexes will be used. Ex. if you include an additional parameter like gender or maybe another like location.. you would have to create more indexes... lucene/solr and a real search engine is much more effective in this way, as you can make as many combination you would like... All you have to think about is that a column is indexed, not what other columns its indexed together with...&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;So, Facebook...It's a long way to go dude ;)&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2547740" ParentId="2546825" CreationDate="2010-03-30T18:43:46.903" OwnerUserId="28589" Tags="[]" Body="&amp;lt;p&amp;gt;&amp;quot;&amp;lt;strong&amp;gt;&amp;lt;a href=&amp;quot;http://wiki.apache.org/cassandra/HintedHandoff&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Hinted handoff&amp;lt;/a&amp;gt;&amp;lt;/strong&amp;gt; means that if a node that should receive a write is down, Cassandra will send that write to another node with a &amp;quot;hint&amp;quot; saying that when the destination node becomes available again, the write should be forwarded there.&amp;quot;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;After the answer on question two I believe the third question becomes obsolete (?)&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;And finally the first question:&#10;The token, cluster name, and whether the node is bootstrapped or not will be stored in system. (thanks driftx)&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2547768" ParentId="2540040" CreationDate="2010-03-30T18:47:55.440" OwnerUserId="1012" Tags="[]" Body="&amp;lt;p&amp;gt;check out this file in lazyboy:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://github.com/digg/lazyboy/blob/master/lazyboy/iterators.py&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://github.com/digg/lazyboy/blob/master/lazyboy/iterators.py&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;it has a few different range methods. &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;E.g., line 121: def key_range(key, start=&amp;quot;&amp;quot;, finish=&amp;quot;&amp;quot;, count=100):&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;or you could use this when you need to apply slice predicates:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;def slice_iterator(key, consistency, **predicate_args):&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;HTH&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2554024" ParentId="2552985" CreationDate="2010-03-31T15:01:56.087" OwnerUserId="130168" Tags="[]" Body="&amp;lt;p&amp;gt;You'd have to scan all the rows and grab the timestamp from the column(s) you're interested in.  If this is something you run every day or so, doing this in a Hadoop job should be fine.  If it's something you run every few minutes, then you'll need to come up with another approach.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2559472" ParentId="2559411" CreationDate="2010-04-01T09:46:42.867" OwnerUserId="17028" Tags="[]" Body="&amp;lt;p&amp;gt;Here's a quote from a recent &amp;lt;a href=&amp;quot;http://www.25hoursaday.com/weblog/2010/03/29/TheNoSQLDebateAutomaticVsManualTransmission.aspx&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;blog post from Dare Obasanjo&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;blockquote&amp;gt;&#10;  &amp;lt;p&amp;gt;SQL databases are like automatic&#10;  transmission and NoSQL databases are&#10;  like manual transmission. Once you&#10;  switch to NoSQL, you become&#10;  responsible for a lot of work that the&#10;  system takes care of automatically in&#10;  a relational database system. Similar&#10;  to what happens when you pick manual&#10;  over automatic transmission. Secondly,&#10;  NoSQL allows you to eke more&#10;  performance out of the system by&#10;  eliminating a lot of integrity checks&#10;  done by relational databases from the&#10;  database tier. Again, this is similar&#10;  to how you can get more performance&#10;  out of your car by driving a manual&#10;  transmission versus an automatic&#10;  transmission vehicle.&amp;lt;/p&amp;gt;&#10;  &#10;  &amp;lt;p&amp;gt;However the most notable similarity is&#10;  that just like most of us can&#x2019;t really&#10;  take advantage of the benefits of a&#10;  manual transmission vehicle because&#10;  the majority of our driving is sitting&#10;  in traffic on the way to and from&#10;  work, there is a similar harsh reality&#10;  in that most sites aren&#x2019;t at Google or&#10;  Facebook&#x2019;s scale and thus have no need&#10;  for a Bigtable or Cassandra.&amp;lt;/p&amp;gt;&#10;&amp;lt;/blockquote&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;To which I can add only that switching from MySQL, where you have at least some experience, to CouchDB, where you have no experience, means you will have to deal with a whole new set of problems and learn different concepts and best practices. While by itself this is wonderful (I am playing at home with MongoDB and like it a lot), it will be a cost that you need to calculate when estimating the work for that project, and brings unknown risks while promising unknown benefits. It will be very hard to judge if you can do the project on time and with the quality you want/need to be successful, if it's based on a technology you don't know.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Now, if you have on the team an expert in the NoSQL field, then by all means take a good look at it. But without any expertise on the team, don't jump on NoSQL for a new commercial project.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Update&amp;lt;/strong&amp;gt;: Just to throw some gasoline in the open fire you started, here are two interesting articles from people on the SQL camp. :-)&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://teddziuba.com/2010/03/i-cant-wait-for-nosql-to-die.html&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;I Can't Wait for NoSQL to Die&amp;lt;/a&amp;gt;&amp;lt;br&amp;gt;&#10;&amp;lt;a href=&amp;quot;http://www.yafla.com/dforbes/The_Impact_of_SSDs_on_Database_Performance_and_the_Performance_Paradox_of_Data_Explodification&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Fighting The NoSQL Mindset, Though This Isn't an anti-NoSQL Piece&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2559473" ParentId="2559411" CreationDate="2010-04-01T09:46:53.693" OwnerUserId="274609" Tags="[]" Body="&amp;lt;p&amp;gt;if you are looking for a highly scalable open source nosql solution check out cassandra or hbase&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;edit: bad word choice, corrected, &amp;quot;real&amp;quot; has been replaced by &amp;quot;highly scalable open source&amp;quot;&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2564372" ParentId="2081080" CreationDate="2010-04-01T23:59:41.900" OwnerUserId="101909" Tags="[]" Body="&amp;lt;p&amp;gt;Could you create a simple sqlite database with two columns:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;==documents==&#10;id|data&#10;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;and data would be json data.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;You could also create a key table which would be:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;==keys==&#10;keyname|keyvalue|id&#10;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;that would be indexed on keyname and keyvalue for quick lookups.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;A single db file could be a collection, and you could create multiple db files for multiple collections.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;You could use folders as &amp;quot;dbs&amp;quot; to match mongodb's hierarchy of db-&amp;gt;collection-&amp;gt;document&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2565451" ParentId="2565417" CreationDate="2010-04-02T07:03:44.050" OwnerUserId="28589" Tags="[]" Body="&amp;lt;p&amp;gt;I would recommend to take a look at &amp;lt;a href=&amp;quot;http://github.com/tjake/Lucandra&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Lucandra&amp;lt;/a&amp;gt; (Lucandra = &amp;lt;a href=&amp;quot;http://lucene.apache.org/java/docs/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Lucene&amp;lt;/a&amp;gt; + &amp;lt;a href=&amp;quot;http://cassandra.apache.org/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Cassandra&amp;lt;/a&amp;gt; )&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2566466" ParentId="2501583" CreationDate="2010-04-02T11:50:53.837" OwnerUserId="58394" Tags="[]" Body="&amp;lt;p&amp;gt;This bug is documented in &amp;lt;a href=&amp;quot;https://issues.apache.org/jira/browse/CASSANDRA-934&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;CASSANDRA-934&amp;lt;/a&amp;gt; and was fixed in Cassandra 0.6.1.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2567411" ParentId="2562712" CreationDate="2010-04-02T15:16:11.700" OwnerUserId="130168" Tags="[]" Body="&amp;lt;p&amp;gt;You create a CF whose keys are your categories, and whose columns are the articles in that category.  Then lookup-by-category is just another lookup-by-key.  Clients like lazyboy will automate this for you.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2567547" ParentId="2443381" CreationDate="2010-04-02T15:39:28.123" OwnerUserId="108434" Tags="[]" Body="&amp;lt;p&amp;gt;SQL Express is a free database + has suppport to store lat/long &amp;amp;#38;amp; dateTime&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;just a tip - use UTC time for dateTime specially if your application needs to be aware of various locations...&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;hth.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2569531" ParentId="2568245" CreationDate="2010-04-02T22:30:38.940" OwnerUserId="247003" Tags="[]" Body="&amp;lt;p&amp;gt;From wikipedia:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;ul&amp;gt;&#10;&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;http://en.wikipedia.org/wiki/Document-oriented_database&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Document data store&amp;lt;/a&amp;gt;: As opposed to relational databases, document-based databases do not store data in tables with uniform sized fields for each record. Instead, each record is stored as a document that has certain characteristics. Any number of fields of any length can be added to a document. Fields can also contain multiple pieces of data.&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;http://en.wikipedia.org/wiki/Key-value_pair&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Key Value&amp;lt;/a&amp;gt;: An associative array (also associative container, map, mapping, dictionary, finite map, and in query-processing an index or index file) is an abstract data type composed of a collection of unique keys and a collection of values, where each key is associated with one value (or set of values). The operation of finding the value associated with a key is called a lookup or indexing, and this is the most important operation supported by an associative array. The relationship between a key and its value is sometimes called a mapping or binding. For example, if the value associated with the key &amp;quot;bob&amp;quot; is 7, we say that our array maps &amp;quot;bob&amp;quot; to 7.&amp;lt;/li&amp;gt;&#10;&amp;lt;/ul&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;More examples at &amp;lt;a href=&amp;quot;http://en.wikipedia.org/wiki/NoSQL&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;NoSQL&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2571210" ParentId="2571098" CreationDate="2010-04-03T12:13:20.140" OwnerUserId="33890" Tags="[]" Body="&amp;lt;p&amp;gt;Good question. I have heard and read a lot about NoSQL vs SQL, mostly from the NoSQL side. &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;It looks a lot like the key-value databases that were there from a long time ago. It also looks like the Object-Oriented databases of the 1990s which were supposed to come and replace SQL. &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;NoSQL has an advantage with respect to the &amp;lt;a href=&amp;quot;http://javathink.blogspot.com/2010/01/characterizing-enterprise-systems-using.html&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;CAP Theorem&amp;lt;/a&amp;gt;, which states that nice things about databases are consistency, availability, and partition tolerance, but you can only pick 2 of the 3. Relational databases give you consistency and availability, and a lot of popular NoSQL databases give you availability and partition tolerance. i.e. You can distribute data across many computers easily with NoSQL. So if you have an application (like a lot of Google's applications) that need to scale to a gajillion users, NoSQL is a better choice.   &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;I think some of the advocacy of NoSQL comes from people who have gotten applications working quickly with NoSQL, and ask, &amp;lt;em&amp;gt;&amp;quot;...relational databases? we don't need no stinkin' relational databases!&amp;quot;&amp;lt;/em&amp;gt;. NoSQL seems to be the way to go at Google. A friend of mine worked there for a while, and his comment was that Google folks advocate using NoSQL, but it requires a lot of code to dipsy-doodle around data in complex relationships. Problem domains with lots of joins and indices are harder to code with NoSQL plus code vs just SQL.  This works for Google because they aggressively recruit prolific coders. The other thing is that a lot of Google applications boil down to being huge lists of stuff that can be scattered across multiple machines. They achieve good query speed with their search indices, Google File System,  and &amp;lt;a href=&amp;quot;http://en.wikipedia.org/wiki/MapReduce&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Map-Reduce&amp;lt;/a&amp;gt;. Joins are not as much of a problem in those applications. &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://www.youtube.com/watch?v=LhnGarRsKnA&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;This video at YouTube&amp;lt;/a&amp;gt; talks about NoSQL vs SQL. It's kind of funny if you are a SQL advocate, but it describes how you solve problems in NoSQL that were solved in SQL relational databases. &amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2571329" ParentId="2571098" CreationDate="2010-04-03T13:15:47.580" OwnerUserId="50552" Tags="[]" Body="&amp;lt;p&amp;gt;One of the things that's easy to overlook is that technologies are often associated with a specific development process.  For example, say you are hired at a company that has a settled team of database administrators.  They proudly guard a deliberate process of deploying and testing SQL.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Now you've been given two months to implement a new procurement website, and there's just no way you could get there with the DBA team.  So you start looking for a way around the DBA team.  NoSQL can provide that.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Being an alternative to SQL, while doing 60% of the things SQL does, is a powerful feature :)&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2571377" ParentId="2571098" CreationDate="2010-04-03T13:43:07.233" OwnerUserId="18255" Tags="[]" Body="&amp;lt;p&amp;gt;It's rather like comparing bananas to mushrooms.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;There are very few kinds of bananas, very closely related, everyone knows what they taste like and they all peel the same way.  If you try to describe a kind of banana to someone without using the word banana, they'll probably understand and relate it to the banana they know pretty quickly.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;There are a wide variety of mushrooms, they all taste different, and you prepare them differently.  If you try to describe a kind of mushroom to someone without using the word mushroom, they may have no idea what you are talking about and try to make a broccoli dish with it.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;The relational model that almost all RDBMS conform to is fairly consistent, and the notion of referential integrity, ACID, constraints, relations (i.e. tables) and normal forms are well understood.  Modelling the data is typically important.  The idea of what a database is is well-defined and the boundary of the database's responsibility is well-defined.  Data is king.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;As far as NoSQL, about the only thing consistent with their various models is distributed processing, scalability and lots more code and not much of a unified query engine.  They are really databases in only the vaguest sense of an organized collection of data, like a folder of Excel spreadsheets is a database.  Rules can be in code or not or whatever.  Code is king.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;The problems that NoSQL systems are designed to solve are not the same problems that the relational model solves, it's horses for courses.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2571516" ParentId="2571098" CreationDate="2010-04-03T14:35:37.857" OwnerUserId="38360" Tags="[]" Body="&amp;lt;p&amp;gt;The original name of this technology before people started calling it &amp;quot;NoSQL&amp;quot; was a &amp;lt;em&amp;gt;distributed key/value store&amp;lt;/em&amp;gt;. This is a far more descriptive name, and I originally remember looking at it and going &amp;quot;hey, cool, I'll bet that will end up being very useful to a lot of people.&amp;quot;  The term has since expanded to essentially include &amp;quot;anything that isn't a relational database&amp;quot;, but usually, when most people talk about NoSQL, they are talking about key/value stores.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Ever since the term &amp;lt;em&amp;gt;NoSQL&amp;lt;/em&amp;gt; was coined, it's been getting touted as a silver bullet.  I'm interested in products like Cassandra and follow their progress, but they are still immature technologies, and to claim that they are &amp;quot;replacing&amp;quot; SQL or RDBMSes in general (or that they will in the near future) is specious reasoning at best, if not an out-and-out lie.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Products and technologies fitting under the NoSQL umbrella are geared toward the following problem domain:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;ul&amp;gt;&#10;&amp;lt;li&amp;gt;You plan to deploy a large-scale, high-concurrency database (hundreds of GB, thousands of users);&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;Which doesn't need ACID guarantees;&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;Or relationships or constraints;&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;Stores a fairly narrow set of data (the equivalent of 5-10 tables in SQL);&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;Will be running on commodity hardware (i.e. Amazon EC2);&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;Needs to be implemented on a very low budget and &amp;quot;scaled out.&amp;quot;&amp;lt;/li&amp;gt;&#10;&amp;lt;/ul&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;This actually describes &amp;lt;strong&amp;gt;a lot&amp;lt;/strong&amp;gt; of web sites today.  Google and Twitter fit very neatly into these requirements.  Does it really matter if a few tweets are lost or delayed?  On the other hand, these specs apply to nearly 0% of business systems, which is what a very high number of us work on developing.  Most businesses have very different requirements:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;ul&amp;gt;&#10;&amp;lt;li&amp;gt;Medium-to-large-scale databases (10-100 GB) with fairly low concurrency (hundreds of users at most);&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;ACID (especially the A and C - Atomicity and Consistency) is a &amp;lt;em&amp;gt;hard&amp;lt;/em&amp;gt; requirement;&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;Data is highly correlated (hierarchies, master-detail, histories);&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;Has to store a wide assortment of data - hundreds or thousands of tables are not uncommon in a &amp;lt;em&amp;gt;normalized&amp;lt;/em&amp;gt; schema (more for denormalization tables, data warehouses, etc.);&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;Run on high-end hardware;&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;Lots of capital available (if your business has millions of customers then you can probably find $25k or so lying &amp;lt;a href=&amp;quot;http://en.wikipedia.org/wiki/Hyperbole&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;behind the couch&amp;lt;/a&amp;gt;).&amp;lt;/li&amp;gt;&#10;&amp;lt;/ul&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;High-end SQL databases (SQL Server, Oracle, Teradata, Vertica, etc.) are designed for &amp;lt;em&amp;gt;vertical&amp;lt;/em&amp;gt; scaling, they like being on machines with lots and lots of memory, fast I/O through SANs and SSDs, and the occasional horizontal scaling through clustering (HA) and partitioning (HC).&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;quot;NoSQL&amp;quot; is often compared favourably to &amp;quot;SQL&amp;quot; in performance terms.  But fully maxed-out, a high-end SQL database server or cluster will scale almost infinitely.  That is how they were intended to be deployed.  Beware of dubious benchmarks comparing poorly-normalized, poorly-indexed SQL databases running mysql on entry-level servers (or worse, cloud servers like Amazon EC2) to similarly-deployed NoSQL databases.  Apples and oranges.  If you work with SQL, don't be scared by that hype.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;SQL isn't going anywhere.  DBAs are no more likely to vanish as a result of NoSQL than PHP programmers were as a result of Java and XML.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;NoSQL isn't going anywhere either, because the development community has correctly recognized that RDBMSes aren't &amp;lt;em&amp;gt;always&amp;lt;/em&amp;gt; the optimal solution to &amp;lt;em&amp;gt;every&amp;lt;/em&amp;gt; problem.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;So, as a developer you owe it to yourself to at least learn what NoSQL is, what products it refers to (Cassandra, BigTable, Voldemort, db4o, etc.), and how to build and code against a simple database created with one of these.  But don't start throwing away all your SQL databases yet or thinking that your career is going to be made obsolete - that's hype, not reality.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2572635" ParentId="2568245" CreationDate="2010-04-03T20:51:07.247" OwnerUserId="4243" Tags="[]" Body="&amp;lt;p&amp;gt;In a document data store each record has multiple fields, similar to a relational database.  It also has secondary indexes.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Example record:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;&amp;quot;id&amp;quot; =&amp;amp;#38;gt; 12345,&#10;&amp;quot;name&amp;quot; =&amp;amp;#38;gt; &amp;quot;Fred&amp;quot;,&#10;&amp;quot;age&amp;quot; =&amp;amp;#38;gt; 20,&#10;&amp;quot;email&amp;quot; =&amp;amp;#38;gt; &amp;quot;fred@example.com&amp;quot;&#10;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Then you could query by id, name, age, or email.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;A key/value store is more like a big hash table than a traditional database: each key corresponds with a value and looking things up by that one key is the only way to access a record.  This means it's much simpler and often faster, but it's difficult to use for complex data.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Example record:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;12345 =&amp;amp;#38;gt; &amp;quot;Fred,fred@example.com,20&amp;quot;&#10;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;You can only use 12345 for your query criteria.  You can't query for name, email, or age.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2573800" ParentId="2573657" CreationDate="2010-04-04T07:03:56.810" OwnerUserId="69742" Tags="[]" Body="&amp;lt;p&amp;gt;Ok, I've found two pages that are helpful &amp;lt;a href=&amp;quot;http://www.mongodb.org/display/DOCS/Schema+Design&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Schema Design&amp;lt;/a&amp;gt; and &amp;lt;a href=&amp;quot;http://www.mongodb.org/display/DOCS/MongoDB+Data+Modeling+and+Rails&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Data Modeling (a full application in RoR)&amp;lt;/a&amp;gt; &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Also, the #mongodb channel on IRC is extremely helpful. The user &amp;lt;code&amp;gt;dacort&amp;lt;/code&amp;gt; there helped me to find those very useful pages. &amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2574149" ParentId="2573657" CreationDate="2010-04-04T10:31:22.427" OwnerUserId="43901" Tags="[]" Body="&amp;lt;p&amp;gt;Here an explanation of the use of DBRefs in MongoDB: &amp;lt;a href=&amp;quot;http://valyagolev.net/article/mongo_dbref/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://valyagolev.net/article/mongo_dbref/&amp;lt;/a&amp;gt; &amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2574443" ParentId="2571098" CreationDate="2010-04-04T13:02:23.757" OwnerUserId="184499" Tags="[]" Body="&amp;lt;p&amp;gt;Try &amp;lt;a href=&amp;quot;http://www.mongodb.org/display/DOCS/Home&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;MongoDB&amp;lt;/a&amp;gt;. You can find drivers and a tutorial for Java &amp;lt;a href=&amp;quot;http://www.mongodb.org/display/DOCS/Java+Language+Center&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;here&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2574609" ParentId="2571098" CreationDate="2010-04-04T14:03:01.850" OwnerUserId="121364" Tags="[]" Body="&amp;lt;p&amp;gt;NoSQL does not refer to any single type of database system, but rather to any type of database system which is not relational. Asking for the &amp;quot;most simple nosql engine&amp;quot; is equivalent of asking for the &amp;quot;most simple instrument which is not a guitar&amp;quot;. No single definitive answer exists.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;First, you will need to ask yourself &amp;lt;em&amp;gt;why&amp;lt;/em&amp;gt; a relational database is not optimal for the problem you are trying to solve. Then, use that information to decide amongst the many different kind of alternative (NoSQL) database systems available:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;ul&amp;gt;&#10;&amp;lt;li&amp;gt;Document store&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;Graph databases&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;Key/value stores&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;Eventually consistent key/value stores&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;Object database&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;etc.&amp;lt;/li&amp;gt;&#10;&amp;lt;/ul&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;The &amp;lt;a href=&amp;quot;http://en.wikipedia.org/wiki/NoSQL&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;NoSQL article on Wikipedia&amp;lt;/a&amp;gt; and &amp;lt;a href=&amp;quot;http://nosql-database.org/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;NoSQL-database.org&amp;lt;/a&amp;gt; both seems to have comprehensive lists of popular NoSQL database implementations. If you are merely looking to investigate some of the different systems, I would suggest having a look at &amp;lt;a href=&amp;quot;http://hadoop.apache.org/hbase/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;NHbase&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;quot;http://cassandra.apache.org/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Cassandra&amp;lt;/a&amp;gt; and &amp;lt;a href=&amp;quot;http://neo4j.org/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;neo4j&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2574667" ParentId="2571098" CreationDate="2010-04-04T14:17:40.020" OwnerUserId="248994" Tags="[]" Body="&amp;lt;p&amp;gt;Take a look at &amp;lt;a href=&amp;quot;http://www.db4o.com/DownloadNow.aspx&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Db4o&amp;lt;/a&amp;gt;, an object database. I have used this briefly for a .NET project and it is easy to get started with. It is also available for Java too.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;This &amp;lt;a href=&amp;quot;http://www.buunguyen.net/blog/the-legend-of-data-persistence-part-1.html&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;blog post&amp;lt;/a&amp;gt; does a nice job of explaining the motivation behind using an object-oriented DBMS rather than a RDBMS.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2574690" ParentId="2574689" CreationDate="2010-04-04T14:23:56.483" OwnerUserId="18393" Tags="[]" Body="&amp;lt;p&amp;gt;Your question could mean one of two things.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;If you mean a data structure for storing key-value pairs, use one of the &amp;lt;a href=&amp;quot;http://java.sun.com/javase/6/docs/api/java/util/Map.html&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;&amp;lt;code&amp;gt;Map&amp;lt;/code&amp;gt;&amp;lt;/a&amp;gt; instances that are a standard part of the JDK.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;If however you are after an in-memory key-value store then I would suggest taking a look at &amp;lt;a href=&amp;quot;http://ehcache.org/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;EHCache&amp;lt;/a&amp;gt; or even &amp;lt;a href=&amp;quot;http://memcached.org/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;memcached&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2574694" ParentId="2574689" CreationDate="2010-04-04T14:24:07.823" OwnerUserId="87197" Tags="[]" Body="&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://java.sun.com/j2se/1.4.2/docs/api/java/util/HashMap.html&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;HashMap&amp;lt;/a&amp;gt;?&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2574841" ParentId="2574689" CreationDate="2010-04-04T15:07:26.777" OwnerUserId="82609" Tags="[]" Body="&amp;lt;p&amp;gt;There are lightweigh or embedded dbs like HSQLDB, Derby, SQLite&#10;But like others don't understand why you need a db to store key/values...&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Why not a Map? &#10;Need to keep key/values on app reboot? &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Also it's perhaps not what you need but with html5 on up to date browsers you have localStorage that permits you to store key/values in the browser using javascript.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2576088" ParentId="2576012" CreationDate="2010-04-04T22:21:21.560" OwnerUserId="28589" Tags="[]" Body="&amp;lt;p&amp;gt;Sorted Strings Table (borrowed from google) is a file of key/value string pairs, sorted by keys&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2576857" ParentId="2576838" CreationDate="2010-04-05T03:59:21.303" OwnerUserId="14955" Tags="[]" Body="&amp;lt;p&amp;gt;I am looking for the exact same thing. Have not found it yet. An interesting project in this space is Bestpractical's &amp;lt;a href=&amp;quot;http://syncwith.us/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Prophet&amp;lt;/a&amp;gt; (and the bug tracker SD that is built on this). I have no idea how active it is, though, and I do not think it uses an encrypted file format (but in your scenario, whole-disk encryption would be a feasible solution).&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Prophet's buzzword-laden pitch reads something like this:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;blockquote&amp;gt;&#10;  &amp;lt;p&amp;gt;A grounded, semirelational, peer to peer replicated, disconnected, versioned, property database with self-healing conflict resolution. &amp;lt;/p&amp;gt;&#10;&amp;lt;/blockquote&amp;gt;&#10;"/>
  <row Id="2576875" ParentId="2576838" CreationDate="2010-04-05T04:07:39.493" OwnerUserId="289135" Tags="[]" Body="&amp;lt;p&amp;gt;I have done this where a vertical-market customer wanted to use my ClipMate program to store and distribute medical-related data, and didn't want the data to escape &amp;quot;into the wild&amp;quot;.&amp;lt;br&amp;gt;&#10;I leveraged the encryption capability of the database (DBISAM by Elevatesoft, which has an engine that compiles directly into Delphi programs) and the &amp;quot;hardware locking&amp;quot; capability of my protection wrapper, Armadillo.&amp;lt;br&amp;gt;&#10;So when someone purchases the program from the vertical market customer, they get the app (download or CD) and install it. Upon installation, they are presented with a registration dialog that shows their &amp;quot;hardware fingerprint&amp;quot; (as reported by Armadillo). This is derived from their ethernet address, CPU serial, hard drive serial, etc., and I could be wrong on any of those, but that's the general idea. They call it in, and a key is generated that's unique to that end-user/machine combo.  The registration key &amp;quot;unlocks&amp;quot; the database, which is encrypted, and the encryption key is part of the registration code. &#10;The end-user cannot make any use of the data without the key, and they cannot give away or transfer the data without receiving another unlock code.  It's pretty tight.  Would be too annoying for a low-priced app, but they're charging a lot for it, so it's worth it.  &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Anyway, to recap:  The database is encrypted, and the encryption code is only accessible (to the program that reads the database) when the program is properly registered to a specific user/computer.  &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;You COULD do this with Access, MySQL, etc.. Just encrypt the data, either at the database level (I suppose they support this, no?) or at the field level, if you want ultimate control and are ok with using a custom front-end app to read the thing.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2577012" ParentId="2576838" CreationDate="2010-04-05T05:06:42.910" OwnerUserId="152253" Tags="[]" Body="&amp;lt;p&amp;gt;Following is the one which I am looking for:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;blockquote&amp;gt;&#10;  &amp;lt;p&amp;gt;From &amp;lt;a href=&amp;quot;http://couchdb.apache.org/docs/overview.html&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;official site&amp;lt;/a&amp;gt;: CouchDB is a peer-based distributed&#10;  database system, it allows for users&#10;  and servers to access and update the&#10;  same shared data while disconnected&#10;  and then bi-directionally replicate&#10;  those changes later.&amp;lt;/p&amp;gt;&#10;  &#10;  &amp;lt;p&amp;gt;The CouchDB document storage, view and&#10;  security models are designed to work&#10;  together to make true bi-directional&#10;  replication efficient and reliable.&#10;  Both documents and designs can&#10;  replicate, allowing full database&#10;  applications (including application&#10;  design, logic and data) to be&#10;  replicated to laptops for offline use,&#10;  or replicated to servers in remote&#10;  offices where slow or unreliable&#10;  connections make sharing data&#10;  difficult.&amp;lt;/p&amp;gt;&#10;&amp;lt;/blockquote&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Any idea how the couchDB data can be protected using user accounts? e.g. Mysql needs user to login to use the data. I am looking only for a simple authentication, not for something fool proof. I just do not want the data to be open for editing. Encrypting the file system seems to be an overkill.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2577023" ParentId="2574689" CreationDate="2010-04-05T05:13:08.883" OwnerUserId="10973" Tags="[]" Body="&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://jdbm.sourceforge.net/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;jdbm&amp;lt;/a&amp;gt; works great for this sort of thing.  It's intended for storing on disk in a paged file, provides for basic transaction support (no guarantees on isolation, but ACD are covered).  We've used it in a production system with fairly wide deployment and have been quite pleased with the performance, stability, etc...&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2577979" ParentId="2577967" CreationDate="2010-04-05T11:04:21.923" OwnerUserId="44309" Tags="[]" Body="&amp;lt;p&amp;gt;You probably do need a full relational DBMS, if not right now, very soon.  If you start now while your problems and data are simple and straightforward then when they become complex and difficult you will have plenty of experience with at least one DBMS to help you.  You probably don't need MySQL on all desktops, you might install it on a server for example and feed data out over your network, but you perhaps need to provide more information about your requirements, toolset and equipment to get better suggestions.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;And, while the other DBMSes have their strengths and weaknesses too, there's nothing wrong with MySQL for large and complex databases.  I don't know enough about SQLite to comment knowledgeably about it.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;EDIT: @Eric from your comments to my answer and the other answers I form even more strongly the view that it is time you moved to a database.  I'm not surprised that trying to do database operations on a 900MB Python dictionary is slow.  I think you have to first convince yourself, then your management, that you have reached the limits of what your current toolset can cope with, and that future developments are threatened unless you rethink matters.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;If your network really can't support a server-based database than (a) you really need to make your network robust, reliable and performant enough for such a purpose, but (b) if that is not an option, or not an early option, you should be thinking along the lines of a central database server passing out digests/extracts/reports to other users, rather than simultaneous, full RDBMS working in a client-server configuration.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;The problems you are currently experiencing are problems of not having the right tools for the job.  They are only going to get worse.  I wish I could suggest a magic way in which this is not the case, but I can't and I don't think anyone else will.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2577983" ParentId="2577967" CreationDate="2010-04-05T11:05:42.357" OwnerUserId="54808" Tags="[]" Body="&amp;lt;p&amp;gt;Here is a performance benchmark of different database suits -&amp;gt;&#10;&amp;lt;a href=&amp;quot;http://www.sqlite.org/cvstrac/wiki?p=SpeedComparison&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Database Speed Comparison&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;I'm not sure how objective the above comparison is though, seeing as it's hosted on &amp;lt;a href=&amp;quot;http://www.sqlite.org&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;sqlite.org&amp;lt;/a&amp;gt;. &amp;lt;strike&amp;gt;Sqlite only seems to be a bit slower when dropping tables, otherwise you shouldn't have any problems using it.&amp;lt;/strike&amp;gt; Both sqlite and mysql seem to have their own strengths and weaknesses, in some tests the one is faster then the other, in other tests, the reverse is true.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;If you've been experiencing lower then expected performance, perhaps it is not sqlite that is the causing this, have you done any profiling or otherwise to make sure nothing else is causing your program to misbehave?&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;EDIT: Updated with a link to a slightly more recent speed comparison.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2578080" ParentId="2577967" CreationDate="2010-04-05T11:24:54.557" OwnerUserId="7055" Tags="[]" Body="&amp;lt;p&amp;gt;Have you done any bench marking to confirm that it is the text files that are slowing you down? If you haven't, there's a good chance that tweaking some other part of the code will speed things up so that it's fast enough.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2578310" ParentId="2577967" CreationDate="2010-04-05T12:23:00.050" OwnerUserId="205083" Tags="[]" Body="&amp;lt;p&amp;gt;If you have that problem with a CSV file, maybe you can just pickle the dictionary and generate a pickle &amp;quot;binary&amp;quot; file with &amp;lt;code&amp;gt;pickle.HIGHEST_PROTOCOL&amp;lt;/code&amp;gt; option. It can be faster to read and you get a smaller file. You can load the CSV file once and then generate the pickled file, allowing faster load in next accesses.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Anyway, with 900 Mb of information, you're going to deal with some time loading it in memory. Another approach is not loading it on one step on memory, but load only the information when needed, maybe making different files by date, or any other category (company, type, etc..)&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2578659" ParentId="2577967" CreationDate="2010-04-05T13:43:13.767" OwnerUserId="247542" Tags="[]" Body="&amp;lt;p&amp;gt;It sounds like each department has their own feudal database, and this implies a lot of unnecessary redundancy and inefficiency.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Instead of transferring hundreds of megabytes to everyone across your network, why not keep your data in MySQL and have the departments upload &amp;lt;em&amp;gt;their&amp;lt;/em&amp;gt; data to the database, where it can be normalized and accessible by everyone?&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;As your organization grows, having completely different departmental databases that are unaware of each other, and contain potentially redundant or conflicting data, is going to become very painful.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2578751" ParentId="2577967" CreationDate="2010-04-05T14:03:38.757" OwnerUserId="102022" Tags="[]" Body="&amp;lt;p&amp;gt;Does the machine this process runs on have sufficient memory and bandwidth to handle this efficiently?  Putting MySQL on a slow machine and recoding the tool to use MySQL rather than text files could potentially be far more costly than simply adding memory or upgrading the machine.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2580277" ParentId="2580244" CreationDate="2010-04-05T18:38:26.627" OwnerUserId="81106" Tags="[]" Body="&amp;lt;p&amp;gt;you can check this thread it is similar what you asked&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://stackoverflow.com/questions/2534408/nosql-vs-mysql-when-scalability-is-irrelevant/&amp;quot;&amp;gt;http://stackoverflow.com/questions/2534408/nosql-vs-mysql-when-scalability-is-irrelevant/&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2581460" ParentId="2577967" CreationDate="2010-04-05T22:03:43.277" OwnerUserId="309559" Tags="[]" Body="&amp;lt;p&amp;gt;Take a look at mongodb.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2581768" ParentId="2581738" CreationDate="2010-04-05T23:29:15.673" OwnerUserId="241462" Tags="[]" Body="&amp;lt;p&amp;gt;I don't think security would be any different on a NoSQL database than on a relational database. In the end, security is an orthogonal question to how data is actually stored. Besides, it's not like you'd allow access to the database from anything but your business-layer servers from a networking standpoint.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;As for backups, most NoSQL databases that I know of allow for hot backups, just like a regular database does.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;The real question, IMO, is whether you can live with the restrictions that a NoSQL database puts on you - in particular, the general lack of ad-hoc queries. For example, if you ever wanted to know all of the people who ever bought product &amp;quot;X&amp;quot; then you'd have to build into your data access layer a counter for that from day one (or run a &amp;lt;em&amp;gt;very expensive&amp;lt;/em&amp;gt; serial lookup of every past transaction). In a regular SQL database, you can just add an index and do a query and you're done (or even, don't add an index if it's a one-off). Or maybe you want to find out all the people who bought product &amp;quot;Y&amp;quot; before the latest version came out (so you can send them a reminder to upgrade or whatever): again, you have to plan that ahead with a NoSQL database, but it's trivial with a relational database.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;I think it makes sense when you can plan your schema and your usage pattern ahead of time, and where the occasional re-scan of records to add some new field or metric is acceptable. But for an e-commerce website, I think ad-hoc queries are just too valuable a feature to lose. Of course, that's just my opinion, and there's certainly no reason why you couldn't mix-n-match parts of the application between the two databases. I'd &amp;lt;em&amp;gt;personally&amp;lt;/em&amp;gt; choose a relational database with memcached in between for added performance, though...&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2581792" ParentId="2581738" CreationDate="2010-04-05T23:38:08.327" OwnerUserId="101970" Tags="[]" Body="&amp;lt;p&amp;gt;Handling financial information is one of the areas where SQL really is the right tool for the job. Most of the NOSQL systems were designed to improve scalability by accepting a higher risk of data loss or inconsistency. They also tend to have limited abilities to run reports over all records, since on a typical large website you only need enough data in the index to find and display a single record - the rest can be completely inaccessible until you know the record you are looking for.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;When dealing with money, any data inconsistency is a big problem, and if you need more scalability than a single sql server can give you, you have enough money that you can afford the higher cost of scaling sql. Also, the ad-hoc reporting available from sql is something you'd miss if you don't use sql - pretty much any information you want about sales history is trivial to get from sql, but potentially requires complex custom code from an object based store.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2581801" ParentId="2581738" CreationDate="2010-04-05T23:41:36.037" OwnerUserId="164299" Tags="[]" Body="&amp;lt;ol&amp;gt;&#10;&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;http://www.royans.net/arch/scalability-links-for-march-20th-2010-lots-of-datastore-related-items/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Amazon&amp;lt;/a&amp;gt; S3 uses NoSQL implementation.&amp;lt;/li&amp;gt;&#10;&amp;lt;/ol&amp;gt;&#10;"/>
  <row Id="2581859" ParentId="2581738" CreationDate="2010-04-05T23:56:30.323" OwnerUserId="82769" Tags="[]" Body="&amp;lt;p&amp;gt;The overhead that makes RDBMS's so slow, is guaranteeing atomicity, consistency, isolation, durability, also known as &amp;lt;a href=&amp;quot;http://en.wikipedia.org/wiki/ACID&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;ACID&amp;lt;/a&amp;gt;.  Some of these properties are pretty critical for applications that deal with money.  You don't want to lose a single order when the lights go out.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;NoSQL databases usually sacrifice some or all of the ACID properties in return for severely reduced overhead.  For many applications, this is fine -- if a few &amp;quot;diggs&amp;quot; go missing when the lights go out, it's no big deal.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;For an ecommerce site, you need to ask yourself what you really need.  &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;ol&amp;gt;&#10;&amp;lt;li&amp;gt;Do you really need a level of performance that a RDBMS can't deliver?  &amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;Do you need the reliability that an DRMBS provides?&amp;lt;/li&amp;gt;&#10;&amp;lt;/ol&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Honestly, the answer to #2 is probably &amp;quot;yes&amp;quot;, which rules out most NoSQL solutions.  And unless you're dealing with traffic levels comparable to amazon.com's, an RDBMs, even on modest hardware will probably satisfy your performance needs just fine, especially if you limit yourself to simple queries, and index properly.  Which makes the answer to #1 &amp;quot;no&amp;quot;.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;You &amp;lt;em&amp;gt;could&amp;lt;/em&amp;gt; however, consider using a RDBMS for transaction data, and a NoSQL database for non-critical data, like product pages, user reviews, etc.  But then you'd have twice as much  datastore software to install, and any relationships between the data in the two datastores  would have to be managed in code -- there'd be no JOINing your NoSQL database against your RDBMS.  This would likely result in an unnecessary level of complexity.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;In the end, if an RDBMS offers features you must have for reliability, and it performs acceptably for the sorts of load you'll be experiencing, an RDBMS is probably the best bet.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2581861" ParentId="2580244" CreationDate="2010-04-05T23:56:40.987" OwnerUserId="101970" Tags="[]" Body="&amp;lt;p&amp;gt;Basically it's about using the right tool for the job. Relational databases have been around for decades, which means they are very good at solving the problems that haven't changed in that time - things like keeping track of sales for example. Although they have become the default data store for just about everything, they are not so good at handling the problems that didn't exist twenty years ago - particularly scalability and data without a clearly defined, unchanging schema. &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;NOSQL is a class of tools designed to solve the problems that are not perfectly suited to relational databases. Scalability is the best known, though unlikely to be a relevant to most developers. I think the other key use case that we don't see so much of yet is for small projects that don't need to worry about the data storage characteristics at all, and can just use the default - being able to skip database design, ORM and database maintenance is quite attractive. &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;For Ecommerce specifically you're probably better off using sql at least in part - You might use NOSQL for product details or a recommendation engine, but you want your sales data in an easily queried sql table.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2582847" ParentId="2577967" CreationDate="2010-04-06T05:33:43.603" OwnerUserId="11926" Tags="[]" Body="&amp;lt;h2&amp;gt;Quick Summary&amp;lt;/h2&amp;gt;&#10;&#10;&amp;lt;ul&amp;gt;&#10;&amp;lt;li&amp;gt;You need enough memory(RAM) to solve your problem efficiently. I think you should upgrade memory?? When reading the excellent &amp;lt;a href=&amp;quot;http://highscalability.com/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;High Scalability&amp;lt;/a&amp;gt; Blog you will notice that for big sites to solve there problem efficiently they store the complete problem set in memory.&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;You do need a central database solution. I don't think hand doing this with python dictionary's only will get the job done.&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;How to solve &amp;quot;your problem&amp;quot; depends on your &amp;quot;query's&amp;quot;. What I would try to do first is put your data in elastic-search(see below) and query the database(see how it performs). I think this is the easiest way to tackle your problem. But as you can read below there are a lot of ways to tackle your problem.&amp;lt;/li&amp;gt;&#10;&amp;lt;/ul&amp;gt;&#10;&#10;&amp;lt;h2&amp;gt;We know:&amp;lt;/h2&amp;gt;&#10;&#10;&amp;lt;ul&amp;gt;&#10;&amp;lt;li&amp;gt;You used python as your program language.&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;Your database is ~900MB (I think that's pretty large, but absolute manageable).&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;You have loaded all the data in a python dictionary. Here I am assume the problem lays. Python tries to store the dictionary(also python dictionary's aren't the most memory friendly) in your memory, but you don't have enough memory(&amp;lt;strong&amp;gt;How much memory do you have????&amp;lt;/strong&amp;gt;). When that happens you are going to have a lot of &amp;lt;a href=&amp;quot;http://en.wikipedia.org/wiki/Virtual_memory&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Virtual Memory&amp;lt;/a&amp;gt;. When you attempt to read the dictionary you are constantly swapping data from you disc into memory. This swapping causes &amp;quot;&amp;lt;a href=&amp;quot;http://en.wikipedia.org/wiki/Virtual_memory#Avoiding_thrashing&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Trashing&amp;lt;/a&amp;gt;&amp;quot;. &amp;lt;strong&amp;gt;I am assuming that your computer does not have enough Ram. If true then I would first upgrade your memory with at least 2 Gigabytes extra RAM.&amp;lt;/strong&amp;gt; When your problem set is able to fit in memory solving the problem is going to be a lot faster. I opened my computer architecture book where it(The memory hierarchy) says that main memory access time is about 40-80ns while disc memory access time is 5 ms. That is a BIG difference.&amp;lt;/li&amp;gt;&#10;&amp;lt;/ul&amp;gt;&#10;&#10;&amp;lt;h2&amp;gt;Missing information&amp;lt;/h2&amp;gt;&#10;&#10;&amp;lt;ul&amp;gt;&#10;&amp;lt;li&amp;gt;Do you have a central server. You should use/have a server.&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;What kind of architecture does your server have? Linux/Unix/Windows/Mac OSX? In my opinion your server should have linux/Unix/Mac OSX architecture.&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;How much memory does your server have?&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;Could you specify your data set(CSV) a little better.&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;What kind of data mining are you doing? Do you need full-text-search capabilities? I am not assuming you are doing any complicated (SQL) query's. Performing that task with only python dictionary's will be a complicated problem. Could you formalize the query's that you would like to perform? For example:&#10;&amp;lt;ul&amp;gt;&#10;&amp;lt;li&amp;gt;&amp;lt;code&amp;gt;&amp;quot;get all users who work for departement x&amp;quot;&amp;lt;/code&amp;gt;&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;&amp;lt;code&amp;gt;&amp;quot;get all sales from user x&amp;quot;&amp;lt;/code&amp;gt;&amp;lt;/li&amp;gt;&#10;&amp;lt;/ul&amp;gt;&amp;lt;/li&amp;gt;&#10;&amp;lt;/ul&amp;gt;&#10;&#10;&amp;lt;h2&amp;gt;Database needed&amp;lt;/h2&amp;gt;&#10;&#10;&amp;lt;blockquote&amp;gt;&#10;  &amp;lt;p&amp;gt;I am the computer person for&#10;  everything in a small company and I&#10;  have been started a new project where&#10;  I think it is about time to try new&#10;  databases.&amp;lt;/p&amp;gt;&#10;&amp;lt;/blockquote&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;You are sure right that you need a database to solve your problem. Doing that yourself only using python dictionary's is difficult. Especially when your problem set can't fit in memory.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;h2&amp;gt;MySQL&amp;lt;/h2&amp;gt;&#10;&#10;&amp;lt;blockquote&amp;gt;&#10;  &amp;lt;p&amp;gt;I thought about using mysql, but then&#10;  I need installing mysql in every&#10;  desktop, sqlite is easier, but it is&#10;  very slow. I do not need a full&#10;  relational database, just some way of&#10;  play with big amounts of data in a&#10;  decent time.&amp;lt;/p&amp;gt;&#10;&amp;lt;/blockquote&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;A centralized(Client-server architecture) database is exactly what you need to solve your problem. Let all the users access the database from 1 PC which you manage. &amp;lt;strong&amp;gt;You can use MySQL to solve your problem&amp;lt;/strong&amp;gt;.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;h2&amp;gt;Tokyo Tyrant&amp;lt;/h2&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;You could also use &amp;lt;a href=&amp;quot;http://petewarden.typepad.com/searchbrowser/2009/03/tokyo-tyrant-tutorial.html&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Tokyo Tyrant&amp;lt;/a&amp;gt; to store all your data. Tokyo Tyrant is pretty fast and it does not have to be stored in RAM. It handles getting data a more efficient(instead of using python dictionary's). However if your problem can completely fit in Memory I think you should have look at Redis(below).&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;h2&amp;gt;Redis:&amp;lt;/h2&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;You could for example use &amp;lt;a href=&amp;quot;http://code.google.com/p/redis/wiki/QuickStart&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Redis(quick start in 5 minutes)&amp;lt;/a&amp;gt;(Redis is extremely fast) to store all sales in memory. Redis is extremely powerful and can do this kind of queries insanely fast. The only problem with Redis is that it has to fit completely in &amp;lt;a href=&amp;quot;http://antirez.com/m/p.php?i=203&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;RAM&amp;lt;/a&amp;gt;, but I believe he is working on that(nightly build already supports it). Also like I already said previously solving your problem set completely from memory is how big sites solve there problem in a timely manner.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;h2&amp;gt;Document stores&amp;lt;/h2&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;This &amp;lt;a href=&amp;quot;http://bcbio.wordpress.com/2009/05/10/evaluating-key-value-and-document-stores-for-short-read-data/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;article&amp;lt;/a&amp;gt; tries to evaluate kv-stores with document stores like couchdb/riak/mongodb. These stores are better capable of searching(a little slower then KV stores), but aren't good at full-text-search.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;h2&amp;gt;Full-text-search&amp;lt;/h2&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;If you want to do full-text-search queries you could like at: &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;ul&amp;gt;&#10;&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;http://www.elasticsearch.com/videos/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;elasticsearch(videos)&amp;lt;/a&amp;gt;: When I saw the video demonstration of elasticsearch it looked pretty cool. You could try put(post simple json) your data in elasticsearch and see how fast it is. I am following elastissearch on github and the author is commiting a lot of new code to it.&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;http://lucene.apache.org/solr/tutorial.html&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;solr(tutorial)&amp;lt;/a&amp;gt;: A lot of big companies are using solr(github, digg) to power there search. They got a big boost going from MySQL full-text search to solr.&amp;lt;/li&amp;gt;&#10;&amp;lt;/ul&amp;gt;&#10;"/>
  <row Id="2584578" ParentId="2584567" CreationDate="2010-04-06T11:57:54.120" OwnerUserId="1583" Tags="[]" Body="&amp;lt;p&amp;gt;You can use ESENT - an embeddable database storage engine for local storage. It comes as part of windows.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Here is the managed interface &amp;lt;a href=&amp;quot;http://managedesent.codeplex.com/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;codeplex&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;As for using NoSQL databases - by all means, if they fit your needs use them. But don't do it simply because of their current popularity. If all you need to do is save documents, what is wrong with the filesystem? &amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2584676" ParentId="2584567" CreationDate="2010-04-06T12:15:01.930" OwnerUserId="14955" Tags="[]" Body="&amp;lt;p&amp;gt;There is also the &amp;lt;a href=&amp;quot;http://www.freedesktop.org/wiki/Specifications/desktopcouch&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Desktopcouch&amp;lt;/a&amp;gt; project, which aims to provide a storage backend for (not necessarily Linux) desktop applications, for things like preferences and bookmarks. It is based on CouchDB and one of the stated goals is automatic replication and synchronization of data between computers. I believe it also plays a central role in the Ubuntu One cloud storage service.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2588981" ParentId="2571098" CreationDate="2010-04-06T23:16:59.890" OwnerUserId="310465" Tags="[]" Body="&amp;lt;p&amp;gt;I made a &amp;lt;a href=&amp;quot;http://blog.nahurst.com/visual-guide-to-nosql-systems&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Visual Guide to NoSQL Systems&amp;lt;/a&amp;gt; to quickly see the major trade-offs involved in choosing one. The biggest choice is picking two of the following: consistency, availability, and partition tolerance.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2589004" ParentId="2571098" CreationDate="2010-04-06T23:20:59.647" OwnerUserId="14316" Tags="[]" Body="&amp;lt;p&amp;gt;berkeley db is pretty nice too&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2589006" ParentId="2574689" CreationDate="2010-04-06T23:21:31.613" OwnerUserId="310465" Tags="[]" Body="&amp;lt;p&amp;gt;Consider using &amp;lt;a href=&amp;quot;http://code.google.com/p/jredis/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;jredis&amp;lt;/a&amp;gt;. It's a Java client for Redis, a persistent key-value store. There's also a JDBC driver for it: code.google.com/p/jdbc-redis/.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2589050" ParentId="2568245" CreationDate="2010-04-06T23:30:10.230" OwnerUserId="310465" Tags="[]" Body="&amp;lt;p&amp;gt;Here's a description of a few common data models:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;ul&amp;gt;&#10;&amp;lt;li&amp;gt;Relational systems are the databases we've been using for a while now. RDBMSs and systems that support ACIDity and joins are considered relational.&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;Key-value systems basically support get, put, and delete operations based on a primary key.&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;Column-oriented systems still use tables but have no joins (joins must be handled within your application). Obviously, they store data by column as opposed to traditional row-oriented databases. This makes aggregations much easier.&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;Document-oriented systems store structured &amp;quot;documents&amp;quot; such as JSON or XML but have no joins (joins must be handled within your application). It's very easy to map data from object-oriented software to these systems.&amp;lt;/li&amp;gt;&#10;&amp;lt;/ul&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;from &amp;lt;a href=&amp;quot;http://blog.nahurst.com/visual-guide-to-nosql-systems&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Visual Guide to NoSQL Systems&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2589060" ParentId="2559411" CreationDate="2010-04-06T23:33:21.973" OwnerUserId="310465" Tags="[]" Body="&amp;lt;p&amp;gt;Here's a &amp;lt;a href=&amp;quot;http://blog.nahurst.com/visual-guide-to-nosql-systems&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Visual Guide to NoSQL Systems&amp;lt;/a&amp;gt; that illustrates the primary trade-offs involved, the biggest being choosing two of the following: consistency, availability, and partition tolerance.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2593943" ParentId="2573106" CreationDate="2010-04-07T15:58:11.197" OwnerUserId="48695" Tags="[]" Body="&amp;lt;p&amp;gt;Cassandra by design is Key value database, so to achieve M:M there are two ways to do it.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;ul&amp;gt;&#10;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;1&amp;gt; De-normalize your data so every&#10;relation ship should duplicate data.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;ie. x-&amp;gt;y(value) and x-&amp;gt;z(value) and a-&amp;gt;y(value)&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;y should be saved for x and a&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;This is how it should be done as it's give you strength of database &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;ul&amp;gt;&#10;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;2&amp;gt;    Save reference for relational key as value.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;x-&amp;gt;y(key) and x-&amp;gt;z(Key) and a-&amp;gt;y(Key)&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;So if you need x with value of y it should be two operation, get&#10;x    which will give you value of y.&#10;then    get y itself in separate    operation&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&#10;&amp;lt;/ul&amp;gt;&amp;lt;/li&amp;gt;&#10;&amp;lt;/ul&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Cassandra is not RDBMS so don't wrap you mind around traditional way of doing it by dropping values and define relationship.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2605285" ParentId="2604831" CreationDate="2010-04-09T05:34:32.977" OwnerUserId="101970" Tags="[]" Body="&amp;lt;p&amp;gt;I think there is a store size setting in redis config that will stop you adding more data than can fit in the store you have set up. If you set up a store that doesn't fit in physical memory, it will simply ask the OS for more memory and some of it will be paged to disk, with obvious performance consequences.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;The next version of redis has its own virtual memory implementation which can store less frequently used keys on disk - &amp;lt;a href=&amp;quot;http://antirez.com/post/redis-virtual-memory-story.html&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://antirez.com/post/redis-virtual-memory-story.html&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2605897" ParentId="2605862" CreationDate="2010-04-09T08:07:36.200" OwnerUserId="81179" Tags="[]" Body="&amp;lt;p&amp;gt;NoSQL could be a fit when your data structure is quite simple (for example a simple key-value store) / predictable and you have no need for relational integrity or a need for ad-hoc and/or advanced querying.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;What you win in easy scalability you might lose in flexibility and consistency though.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;The biggest problem would be to have an easy means for composing complex queries over your data. I would say meterological data is not the best candidate for NoSQL.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;I personally prefer PostgreSQL over MySQL and find it very scalable (even with millions or even billions of rows) when setup correctly.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2605912" ParentId="2605862" CreationDate="2010-04-09T08:12:07.373" OwnerUserId="74305" Tags="[]" Body="&amp;lt;p&amp;gt;I think you should try with a full-featured and mature DBMS, before giving up with SQL.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;See for instance:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://www.yafla.com/dforbes/Getting_Real_about_NoSQL_and_the_SQL_Performance_Lie/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://www.yafla.com/dforbes/Getting_Real_about_NoSQL_and_the_SQL_Performance_Lie/&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://www.yafla.com/dforbes/The_Impact_of_SSDs_on_Database_Performance_and_the_Performance_Paradox_of_Data_Explodification/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://www.yafla.com/dforbes/The_Impact_of_SSDs_on_Database_Performance_and_the_Performance_Paradox_of_Data_Explodification/&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2607947" ParentId="2607923" CreationDate="2010-04-09T13:47:46.960" OwnerUserId="39430" Tags="[]" Body="&amp;lt;p&amp;gt;One reason is that materialized views will perform poorly in an OLTP situation where there is a heavy amount of INSERTs vs. SELECTs.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Everytime data is inserted the materialized views indexes must be updated, which not only slows down inserts but selects as well. The primary reason for using NoSQL is performance. By being basically a hash-key store, you get insanely fast reads/writes, at the cost of  less control over constraints, which typically must be done at the application layer.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;So, while materialized views may help reads, they do nothing to speed up writes.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2608121" ParentId="2608103" CreationDate="2010-04-09T14:08:08.407" OwnerUserId="30913" Tags="[]" Body="&amp;lt;p&amp;gt;IMHO it is an &amp;lt;strong&amp;gt;axiom&amp;lt;/strong&amp;gt; of NoSql that it is not ACID compliant.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;To elaborate: it would be possible to extend one to be ACID but in doing so you'd lose most of the reasons for using one in the first place. &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;So like always it depends on your case.  If you're looking for ACID compliance, it would be hard to look away from the more traditional relational databases.  Of course, if you have the resources this could be implemented with a system that has a NoSql store for specifiic parts of the system.  That is, it might store the user settings or shopping cart before going to the relational database.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2608157" ParentId="2608103" CreationDate="2010-04-09T14:12:52.063" OwnerUserId="16883" Tags="[]" Body="&amp;lt;p&amp;gt;&amp;quot;NoSQL&amp;quot; is not a well-defined term. It's a very vague concept. As such, it's not even possible to say what is and what is not a &amp;quot;NoSQL&amp;quot; product. Not nearly all of the products typcially branded with the label are key-value stores.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2608223" ParentId="2608103" CreationDate="2010-04-09T14:22:40.370" OwnerUserId="57477" Tags="[]" Body="&amp;lt;p&amp;gt;Well, according to the &amp;lt;a href=&amp;quot;http://en.wikipedia.org/wiki/NoSQL&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Wikipedia article on NoSQL&amp;lt;/a&amp;gt;:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;blockquote&amp;gt;&#10;  &amp;lt;p&amp;gt;NoSQL is a movement promoting a&#10;  loosely defined class of&#10;  non-relational data stores that break&#10;  with a long history of relational&#10;  databases and ACID guarantees.&amp;lt;/p&amp;gt;&#10;&amp;lt;/blockquote&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;and also:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;blockquote&amp;gt;&#10;  &amp;lt;p&amp;gt;The name was an attempt to describe&#10;  the emergence of a growing number of&#10;  non-relational, distributed data&#10;  stores that often did not attempt to&#10;  provide ACID  guarantees.&amp;lt;/p&amp;gt;&#10;&amp;lt;/blockquote&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;and&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;blockquote&amp;gt;&#10;  &amp;lt;p&amp;gt;NoSQL systems often provide weak&#10;  consistency guarantees such as&#10;  eventual consistency and transactions&#10;  restricted to single data items, even&#10;  though one can impose full ACID&#10;  guarantees by adding a supplementary&#10;  middleware layer.&amp;lt;/p&amp;gt;&#10;&amp;lt;/blockquote&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;So, in a nutshell, I'd say that one of the main benefits of a &amp;quot;NoSQL&amp;quot; data store is it's distinct &amp;lt;em&amp;gt;lack&amp;lt;/em&amp;gt; of &amp;lt;a href=&amp;quot;http://en.wikipedia.org/wiki/ACID&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;ACID&amp;lt;/a&amp;gt; properties.  Furthermore, IMHO, the more one tries to implement and enforce &amp;lt;a href=&amp;quot;http://en.wikipedia.org/wiki/ACID&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;ACID&amp;lt;/a&amp;gt; properties, the further away from the &amp;quot;spirit&amp;quot; of a &amp;quot;NoSQL&amp;quot; data store you get, and the closer to a &amp;quot;true&amp;quot; &amp;lt;a href=&amp;quot;http://en.wikipedia.org/wiki/RDBMS&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;RDBMS&amp;lt;/a&amp;gt; you get (relatively speaking, of course).&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;However, all that said, &amp;quot;NoSQL&amp;quot; is a very vague term and is open to individual interpretations, and depends heavily upon just how much of a purist viewpoint you have.  For example, most modern-day RDBMS systems don't actually adhere to &amp;lt;em&amp;gt;all&amp;lt;/em&amp;gt; of &amp;lt;a href=&amp;quot;http://en.wikipedia.org/wiki/Edgar_F._Codd&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Edgar F. Codd&amp;lt;/a&amp;gt;'s &amp;lt;a href=&amp;quot;http://en.wikipedia.org/wiki/Codd%27s_12_rules&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;12 rules&amp;lt;/a&amp;gt; of his &amp;lt;a href=&amp;quot;http://en.wikipedia.org/wiki/Relational_model&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;relation model&amp;lt;/a&amp;gt;!&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Taking a pragmatic approach, it would appear that Apache's &amp;lt;a href=&amp;quot;http://couchdb.apache.org/docs/intro.html&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;CouchDB&amp;lt;/a&amp;gt; comes closest to embodying both ACID-compliance whilst retaining loosely-coupled, non-relational &amp;quot;NoSQL&amp;quot; mentality.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2608318" ParentId="2608103" CreationDate="2010-04-09T14:39:28.677" OwnerUserId="252207" Tags="[]" Body="&amp;lt;p&amp;gt;take a look at the CAP theorem&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2608981" ParentId="2573106" CreationDate="2010-04-09T16:07:19.413" OwnerUserId="130168" Tags="[]" Body="&amp;lt;p&amp;gt;Instead of using a join table the way you would with an rdbms, you would have one ColumnFamily containing a row for each X and a list of Ys associated with it, then a CF containing a row for each Y and a list of each X associated with it.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;If it turns out you don't really care about querying one of those directions then only keep the CF that you do care about.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2609462" ParentId="2605862" CreationDate="2010-04-09T17:16:18.480" OwnerUserId="204218" Tags="[]" Body="&amp;lt;p&amp;gt;I find it hard to create a coherent answer right now, but here goes.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;ol&amp;gt;&#10;&amp;lt;li&amp;gt;Your data would fit without problem in a &amp;quot;nosql&amp;quot; datastore such as Cassandra (and many more probably)&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;You would benefit from the schema-less design of many &amp;quot;nosql&amp;quot; solutions (seeing as not all columns (to use a MySQL term) are present all the time)&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;The time based queries would be no problem in Cassandra (check out TimeUUID based keys)&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;You don't seem to be taking advantage of the relational part of MySQL, so you wouldn't be hurt that much when losing it&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;Although you might be just fine with MySQL, since you're really not describing the kind of problems, are you really having any? (Just being interested is totally cool)&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;Things like indexes and search are things you would have to implement manually in many nosql datastore, if this scares you perhaps stick with sql.&amp;lt;/li&amp;gt;&#10;&amp;lt;/ol&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Thanks for listening ;)&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2612878" ParentId="2608103" CreationDate="2010-04-10T09:26:47.080" OwnerUserId="36710" Tags="[]" Body="&amp;lt;p&amp;gt;If you are looking for an ACID compliant key/value store, there's &amp;lt;a href=&amp;quot;http://en.wikipedia.org/wiki/Berkeley_DB&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Berkeley DB&amp;lt;/a&amp;gt;. Among &amp;lt;a href=&amp;quot;http://en.wikipedia.org/wiki/Graph_database&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;graph databases&amp;lt;/a&amp;gt; at least &amp;lt;a href=&amp;quot;http://en.wikipedia.org/wiki/Neo4j&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Neo4j&amp;lt;/a&amp;gt; and &amp;lt;a href=&amp;quot;http://www.kobrix.com/hgdb.jsp&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;HyperGraphDB&amp;lt;/a&amp;gt; offer ACID transactions (HyperGraphDB actually uses Berkeley DB for low-level storage at the moment).&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2613092" ParentId="2607923" CreationDate="2010-04-10T10:47:05.590" OwnerUserId="101970" Tags="[]" Body="&amp;lt;p&amp;gt;NoSQL is not about getting better performance out of your SQL database. It is about considering options other than the default SQL storage when there is no particular reason for the data to be in SQL at all.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;If you have an established SQL Database with a well designed schema and your only new requirement is improved performance, adding indexes and views is definitely the right approach. &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;If you need to save a user profile object that you know will only ever need to be accessed by its key, SQL may not be the best option -  you gain nothing from a system with all sorts of query functionality you won't use, but being able to leave out the ORM layer while improving the performance of the queries you will be using is quite valuable.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2613918" ParentId="2576012" CreationDate="2010-04-10T15:48:00.207" OwnerUserId="130168" Tags="[]" Body="&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://wiki.apache.org/cassandra/MemtableSSTable&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://wiki.apache.org/cassandra/MemtableSSTable&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2614227" ParentId="2614195" CreationDate="2010-04-10T17:23:24.727" OwnerUserId="28589" Tags="[]" Body="&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://svn.apache.org/repos/asf/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/TimeUUIDType.java&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;TimeUUID&amp;lt;/a&amp;gt; is one of six concrete implementations of the abstract class &amp;lt;a href=&amp;quot;http://svn.apache.org/repos/asf/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/AbstractType.java&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;AbstractType&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;For ColumnFamilies you have the possiblity to specify an attribute called CompareWith. (SuperColumns have a similar CompareSubcolumnsWith attribute).  &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Valid values for this attribute are classes that implements the abstract class AbstractType (eg. TimeUUID). The CompareWith attribute tells Cassandra how to sort the columns for slicing operations.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;If you are using Java and using cassandra with TimeUUID I would recommend to read &amp;lt;a href=&amp;quot;http://wiki.apache.org/cassandra/FAQ#working_with_timeuuid_in_java&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;this section of the cassandra FAQ&amp;lt;/a&amp;gt;.  &amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2614233" ParentId="2614195" CreationDate="2010-04-10T17:27:24.033" OwnerUserId="99234" Tags="[]" Body="&amp;lt;p&amp;gt;to indicate a unique &amp;quot;row&amp;quot; in a ColumnFamily&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2614236" ParentId="2614195" CreationDate="2010-04-10T17:28:20.677" OwnerUserId="138041" Tags="[]" Body="&amp;lt;p&amp;gt;TimeUUID is a random global unique identifier. 16 bytes.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Sample hex presentation: a4a70900-24e1-11df-8924-001ff3591711&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;See &amp;lt;a href=&amp;quot;http://en.wikipedia.org/wiki/Universally_Unique_Identifier&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://en.wikipedia.org/wiki/Universally_Unique_Identifier&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;It may serve as a primary key in terms of relational database or when you need to store a list of values under some key.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;For example check this open source twitter example based on cassandra:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://twissandra.com/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://twissandra.com/&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://github.com/ericflo/twissandra&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://github.com/ericflo/twissandra&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;User = {&#10;    'a4a70900-24e1-11df-8924-001ff3591711': {&#10;        'id': 'a4a70900-24e1-11df-8924-001ff3591711',&#10;        'username': 'ericflo',&#10;        'password': '****',&#10;    },&#10;}&#10;&#10;Username = {&#10;    'ericflo': {&#10;        'id': 'a4a70900-24e1-11df-8924-001ff3591711',&#10;    },&#10;}&#10;&#10;Friends = {&#10;    'a4a70900-24e1-11df-8924-001ff3591711': {&#10;        # friend id: timestamp of when the friendship was added&#10;        '10cf667c-24e2-11df-8924-001ff3591711': '1267413962580791',&#10;        '343d5db2-24e2-11df-8924-001ff3591711': '1267413990076949',&#10;        '3f22b5f6-24e2-11df-8924-001ff3591711': '1267414008133277',&#10;    },&#10;}&#10;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Here user is assigned a unique key a4a70900-24e1-11df-8924-001ff3591711 which is used to refer to the user from other places.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2616418" ParentId="2613357" CreationDate="2010-04-11T08:14:26.580" OwnerUserId="36710" Tags="[]" Body="&amp;lt;p&amp;gt;If you have no reason to choose RDF + SPARQL (which both products support), Neo4j provides a clean Java API for manipulating a property graph (nodes + relationships + properties on both). For web applications, I wrote up an &amp;lt;a href=&amp;quot;http://wiki.neo4j.org/content/IMDB_Example&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;example&amp;lt;/a&amp;gt; using Spring Framework, which also exists in a simplified version as a &amp;lt;a href=&amp;quot;http://wiki.neo4j.org/content/IMDB_Workshop&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;workshop&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Disclaimer: Obviously I'm on the Neo4j team, and I don't have any in-depth knowledge regarding AllegroGraph.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2619851" ParentId="2619744" CreationDate="2010-04-12T04:17:19.427" OwnerUserId="101970" Tags="[]" Body="&amp;lt;p&amp;gt;Being able to query properties directly is one of the features you lose when moving away from SQL, so you need a way to maintain your own index to let you find records. &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;If your datastore does not have built in indexing or atomic list operations, you will need to deal with the locking issues you mention. However, indexing doesn't necessarily need to be synchronous - maintain a queue of updated records to be reindexed and you have a solution for 3 that can be reused to solve 2 also.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;If the index list for a particular value becomes too large for the system to handle in a single list, you can replace the list of users with a list of lists. However, if you have that many records with the same value it probably isn't a particularly useful search criteria anyway.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Another option that is useful in some cases is to use a seperate system for the indexing - for example you could set up lucene to index the records in your main datastore.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2621849" ParentId="2621795" CreationDate="2010-04-12T12:03:21.930" OwnerUserId="297484" Tags="[]" Body="&amp;lt;p&amp;gt;the fuss around nosql is down to indexing, availability, and scalability. indexing is what allows the document-oriented stores to NOT open all documents if you want to get the ones where have = 1. availablity and scalability allow these systems to easily scale out and be robust in the face of unreliable hardware.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;erlang is designed for multi-processor systems and so is an ideal fit for distributed systems too.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2626293" ParentId="2604745" CreationDate="2010-04-13T00:32:40.170" OwnerUserId="206625" Tags="[]" Body="&amp;lt;p&amp;gt;Haven't followed Rob's stuff too much but just thinking out loud here. Couldn't you have a Profile provider object that the Content object could get at and that would have some way to fetch the instance of the Profile you are looking for.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;That would favor the composition you are looking for over the parent / child relationship. &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Again, thinking out loud here, but I would make the content object have a dependency of type IProfileProvider and I would inject that provider into the content object when needed. That would allow me to compose the Content type with the Profile type, while not explicitly having the parent / child relationship &amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2632589" ParentId="2604745" CreationDate="2010-04-13T19:31:29.543" OwnerUserId="28567" Tags="[]" Body="&amp;lt;p&amp;gt;I've decided that denormalizing the profile to be a &amp;quot;smaller&amp;quot; profile that only contains the immutable profile properties under the content would be a better solution. This minimizes the reads I'll be making while at the same time allows me to look up the actual profile object if necessary to gather deeper data on the profile.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2637815" ParentId="2634955" CreationDate="2010-04-14T13:42:05.013" OwnerUserId="307430" Tags="[]" Body="&amp;lt;p&amp;gt;less data!&#10;easy architecture!&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2638093" ParentId="2634955" CreationDate="2010-04-14T14:17:52.067" OwnerUserId="312262" Tags="[]" Body="&amp;lt;p&amp;gt;My understanding is that you would use NoSQL when you just have a single key-value pair. Meaning, your RDMS table would just be 2 columns (key, value).&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2641039" ParentId="2640516" CreationDate="2010-04-14T21:05:45.307" OwnerUserId="620" Tags="[]" Body="&amp;lt;p&amp;gt;Mongo uses stored Javascript in a few places including Map/Reduce, db.eval and where clauses. Checkout this blog post for a survey: &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://dirolf.com/2010/04/05/stored-javascript-in-mongodb-and-pymongo.html&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Working With Stored JavaScript in MongoDB&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;The key to storing your functions on the server and making them available in these three contexts is db.system.js.save:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;db.system.js.save( { _id : &amp;quot;foo&amp;quot; , value : function( x , y ){ return x + y; } } );&#10;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;More details &amp;lt;a href=&amp;quot;http://www.mongodb.org/display/DOCS/Server-side+Code+Execution#Server-sideCodeExecution-Storingfunctionsserverside&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;in the Mongo docs&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2641158" ParentId="2488783" CreationDate="2010-04-14T21:24:26.203" OwnerUserId="74011" Tags="[]" Body="&amp;lt;p&amp;gt;hmm, it looks more like a Perl binding bug when handling exception to me.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;I believe that 0.6 fixes it for you because the interface has indeed changed, so 0.6 is not raising a thrift exception anymore, but the bug in thrift remains. I've opened a JIRA case, we'll see that thrift team says about it:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;https://issues.apache.org/jira/browse/THRIFT-758&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;https://issues.apache.org/jira/browse/THRIFT-758&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2641482" ParentId="2634955" CreationDate="2010-04-14T22:22:11.203" OwnerUserId="101970" Tags="[]" Body="&amp;lt;p&amp;gt;The general idea of NoSQL is that you should use whichever data store is the best fit for your application. If you have a table of financial data, use SQL. If you have objects that would require complex/slow queries to map to a relational schema, use an object or key/value store. &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Of course just about any real world problem you run into is somewhere in between those two extremes and neither solution will be perfect. You need to consider the capabilities of each store and the consequences of using one over the other, which will be very much specific to the problem you are trying to solve.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2642911" ParentId="2642710" CreationDate="2010-04-15T05:21:26.727" OwnerUserId="113839" Tags="[]" Body="&amp;lt;p&amp;gt;One possibility is to have a object and property table (which you may have already). &#10;The  create the association table containing&#10;ID  ObjectId    PropertyId   Value Date_Added/version_number (as per your choice if you want to use timestamp or sequence column)&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;As per your problem you would always add to association table and never update it. &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;When you want to get a snapshot of latest object properties, you need to do a DISTINCT query for properties ordered by date_added/version number.&#10;For a given property checking history is straightforward as well.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;I hope this helps&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2653705" ParentId="2653074" CreationDate="2010-04-16T14:32:54.500" OwnerUserId="83406" Tags="[]" Body="&amp;lt;p&amp;gt;Don't duplicate the properties if they'll always be the same between the &amp;lt;code&amp;gt;SearchResult&amp;lt;/code&amp;gt; and a &amp;lt;code&amp;gt;Search&amp;lt;/code&amp;gt;.  If a &amp;lt;code&amp;gt;SearchResult&amp;lt;/code&amp;gt; should have a reference to a &amp;lt;code&amp;gt;Search&amp;lt;/code&amp;gt;, keep a &amp;lt;a href=&amp;quot;http://code.google.com/appengine/docs/python/datastore/typesandpropertyclasses.html#ReferenceProperty&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;&amp;lt;code&amp;gt;ReferenceProperty&amp;lt;/code&amp;gt;&amp;lt;/a&amp;gt; pointing to the Search.  This basically stores the related &amp;lt;code&amp;gt;Search&amp;lt;/code&amp;gt;'s &amp;lt;code&amp;gt;Key&amp;lt;/code&amp;gt; in the model.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;class SearchResult(db.Model):&#10;    search = db.ReferenceProperty(Search, required=True)&#10;    # other stuff...&#10;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;I also highly recommend you watch some of the &amp;lt;a href=&amp;quot;http://code.google.com/events/io/2009/sessions.html#appengine&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;App Engine videos from last year's Google I/O&amp;lt;/a&amp;gt; (and from &amp;lt;a href=&amp;quot;http://sites.google.com/site/io/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;2008&amp;lt;/a&amp;gt;), in particular &amp;lt;a href=&amp;quot;http://code.google.com/events/io/2009/sessions/BuildingScalableComplexApps.html&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;this one&amp;lt;/a&amp;gt; by Brett Slatkin, and &#10;&amp;lt;a href=&amp;quot;http://www.youtube.com/watch?v=tx5gdoNpcZM&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;this one&amp;lt;/a&amp;gt; by Ryan Barrett. They're all pretty helpful videos if you have the time, but I found those two in particular to be really great.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2657215" ParentId="2552985" CreationDate="2010-04-17T04:21:32.167" OwnerUserId="48695" Tags="[]" Body="&amp;lt;p&amp;gt;To achieve what you described you need to have column name as time stamp and use get slice function using start time and endtime, it will give you all rows with column name with in that range. also use column name sort so you would get result in ordered by time.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2663923" ParentId="2654423" CreationDate="2010-04-18T20:55:22.767" OwnerUserId="169895" Tags="[]" Body="&amp;lt;p&amp;gt;First of all you have to understand the properties of each system. i can offer you to read this &amp;lt;a href=&amp;quot;http://www.vineetgupta.com/2010/01/nosql-databases-part-1-landscape.html&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;post&amp;lt;/a&amp;gt;. it's the first step to understand NOSQL or Not Only SQL.Secondly you can check  this &amp;lt;a href=&amp;quot;http://blog.nahurst.com/visual-guide-to-nosql-systems&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;blog post&amp;lt;/a&amp;gt; to understand all these stuff visually.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Finally glance at open source projects such as Mongodb, Couchdb etc. to see the list you can go &amp;lt;a href=&amp;quot;http://java.dzone.com/articles/open-source-nosql-databases&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;here&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2675904" ParentId="2675488" CreationDate="2010-04-20T14:26:01.080" OwnerUserId="284645" Tags="[]" Body="&amp;lt;p&amp;gt;To retrieve the document(s) with &amp;lt;code&amp;gt;doc_id&amp;lt;/code&amp;gt;=10, you need to create a view with &amp;lt;code&amp;gt;doc_id&amp;lt;/code&amp;gt; as a key. Afair, you cannot enforce uniqueness of the &amp;lt;code&amp;gt;doc_id&amp;lt;/code&amp;gt;. &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Instead of using your &amp;lt;code&amp;gt;doc_id&amp;lt;/code&amp;gt;, you could still use CouchDB's &amp;lt;code&amp;gt;_id&amp;lt;/code&amp;gt; field. Iirc, you do not have to leave it to CouchDB to assign a value to &amp;lt;code&amp;gt;_id&amp;lt;/code&amp;gt;. If you do not like the UUIDs CouchDB uses for the &amp;lt;code&amp;gt;_id&amp;lt;/code&amp;gt; field, you can create a document with an &amp;lt;code&amp;gt;_id&amp;lt;/code&amp;gt; you specify. &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;You need to be careful with that, esp. in a distributed setup. If you end up with different documents (on different nodes) having the same &amp;lt;code&amp;gt;_id&amp;lt;/code&amp;gt;, CouchDB might consider them to be different versions of the same document.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2677850" ParentId="2634955" CreationDate="2010-04-20T19:01:38.050" OwnerUserId="310465" Tags="[]" Body="&amp;lt;p&amp;gt;When evaluating distributed data systems, you have to consider the CAP theorem - you can pick two of the following: consistency, availability, and partition tolerance.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Cassandra is an available, partition-tolerant system that supports eventual consistency. For more information see my &amp;lt;a href=&amp;quot;http://blog.nahurst.com/visual-guide-to-nosql-systems&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Visual Guide to NoSQL Systems&amp;lt;/a&amp;gt;. &amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2677881" ParentId="2611362" CreationDate="2010-04-20T19:05:51.970" OwnerUserId="310465" Tags="[]" Body="&amp;lt;p&amp;gt;If you're trying to quickly get a grasp on the major trade-offs involved in NoSQL systems, check out my &amp;lt;a href=&amp;quot;http://blog.nahurst.com/visual-guide-to-nosql-systems&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Visual Guide to NoSQL Systems&amp;lt;/a&amp;gt;. Essentially, you must choose two of the following properties for you system to excel at: consistency, availability, or partition tolerance.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2684038" ParentId="2682205" CreationDate="2010-04-21T14:55:09.600" OwnerUserId="130168" Tags="[]" Body="&amp;lt;p&amp;gt;Denormalize.  See twissandra.com and the documentation at &amp;lt;a href=&amp;quot;http://github.com/ericflo/twissandra&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://github.com/ericflo/twissandra&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;More examples at &amp;lt;a href=&amp;quot;http://wiki.apache.org/cassandra/ArticlesAndPresentations&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://wiki.apache.org/cassandra/ArticlesAndPresentations&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2685181" ParentId="2682205" CreationDate="2010-04-21T17:33:34.660" OwnerUserId="223992" Tags="[]" Body="&amp;lt;p&amp;gt;Are you really competing with Google and Amazon in terms of traffic volumes? I'd recommend starting by looking at upgrading your current MySQL infrastructure - how many database servers do you currently run in your cluster(s)? Do you partition data?&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;C.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2688350" ParentId="2688305" CreationDate="2010-04-22T05:04:20.697" OwnerUserId="315670" Tags="[]" Body="&amp;lt;p&amp;gt;in fact you are.. because searching in a single huge field for text will take much more time than indexing the database and searching the proper sql way. The database was built to be used with sql and indexes, it does not have the capability to parse and index json, so whatever way you will find to search in the json (probably just hacky string matching) will be much slower. 500k rows is not that much to handle for mysql , you don't really need hadoop, just a good normalized schema , the right indices and optimized queries   &amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2694073" ParentId="2694044" CreationDate="2010-04-22T20:03:28.620" OwnerUserId="1220" Tags="[]" Body="&amp;lt;p&amp;gt;All you really need is a serializer/deserializer to make this work.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://github.com/atheken/NoRM&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Norm&amp;lt;/a&amp;gt; has done a great job of doing just that. Makes it easier to take straight poco objects and just save them to mongo with a single line of code.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;They call Norm an ORM, but its really just a poco to dictionary mongo wrapper.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;An orm is just extra ceremony for these operations. If your data operations are abstracted into a repository, its going to be a non-issue either way, because converting to another backing store is an object per object, basis.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2694112" ParentId="2694044" CreationDate="2010-04-22T20:09:57.657" OwnerUserId="38360" Tags="[]" Body="&amp;lt;p&amp;gt;Well, yes, Object-&amp;lt;strong&amp;gt;Relational&amp;lt;/strong&amp;gt; mappers are redundant with MongoDB because MongoDB isn't a &amp;lt;strong&amp;gt;relational&amp;lt;/strong&amp;gt; database, it's a Document-Oriented database.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;So instead of SQL, you write queries in JSON.  Unless you really, &amp;lt;em&amp;gt;really&amp;lt;/em&amp;gt; want to write raw JSON, as opposed to, say, Linq, then you're still going to want to use a mapper.  And if you don't want to create coupling against MongoDB itself, then you don't want to pass actual &amp;lt;code&amp;gt;Document&amp;lt;/code&amp;gt; objects around, you want to map them to real POCOs.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;The mapping is much &amp;lt;em&amp;gt;easier&amp;lt;/em&amp;gt; with a document-oriented DB like MongoDB, because you have nested documents instead of relations, but that doesn't mean it goes away completely.  It just means you've substituted one type of &amp;quot;impedance mismatch&amp;quot; for a different, slightly-less-dramatic mismatch.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2694961" ParentId="2688305" CreationDate="2010-04-22T22:25:19.227" OwnerUserId="256376" Tags="[]" Body="&amp;lt;p&amp;gt;Few pointers to consider:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;ul&amp;gt;&#10;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;Hadoop (HDFS specifically) distributes data around a cluster of machines. Using MapReduce to analyze/process this data requires that the data is stored on the HDFS to make use of the parallel processing power Hadoop offers. &amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&#10;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;Hadoop/MapReduce is no where near real-time. Even when running on small amounts of data the time Hadoop takes to set-up a Job can be 30+ seconds. This is something that can't be stopped.&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&#10;&amp;lt;/ul&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Maybe something to look into would be using Lucene to index your JSON objects as documents. You could store the index in solr and easily query on anything you want.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2699879" ParentId="2694044" CreationDate="2010-04-23T15:37:26.730" OwnerUserId="295964" Tags="[]" Body="&amp;lt;p&amp;gt;I think an &amp;quot;ORM&amp;quot; on MongoDb can be useful, not only for &amp;quot;serializing&amp;quot; and &amp;quot;deserializing&amp;quot; objects into the db (Norm seems to do a great job) but also for making it more easy to execute aggregation queries. &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;It is nice if an &amp;quot;ORM&amp;quot; can generate MapReduce jobs for grouping and detecting duplicates. Some people have written code to automatically convert an sql statement into a mapreduce job: &amp;lt;a href=&amp;quot;http://rickosborne.org/blog/index.php/2010/02/19/yes-virginia-thats-automated-sql-to-mongodb-mapreduce/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://rickosborne.org/blog/index.php/2010/02/19/yes-virginia-thats-automated-sql-to-mongodb-mapreduce/&amp;lt;/a&amp;gt;  &amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2700318" ParentId="2699932" CreationDate="2010-04-23T16:39:43.247" OwnerUserId="6844" Tags="[]" Body="&amp;lt;p&amp;gt;I assume you are storing these contacts to form some kind of address-book style application. Going with this assumption, I would say your second example is exactly what you want to be doing. The way I look at it, each &amp;quot;contact&amp;quot; is a single document. All the attributes for this contact belong within the document.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;{&#10;    name: &amp;quot;John Smith&amp;quot;,&#10;    number: &amp;quot;+44 1234 567890&amp;quot;&#10;}&#10;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;To take this a bit further, in the future you might decide you wish to store multiple numbers per person, perhaps of different types. I would embed these all inside the document for the particular contact:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;{&#10;    name: &amp;quot;John Smith&amp;quot;,&#10;    numbers: [&#10;        { number: &amp;quot;+44 1234 567890&amp;quot;, type: &amp;quot;home&amp;quot; },&#10;        { number: &amp;quot;+44 7798 987654&amp;quot;, type: &amp;quot;mobile&amp;quot; },&#10;        { number: &amp;quot;+44 1234 987123&amp;quot;, type: &amp;quot;work&amp;quot; }&#10;    ]&#10;}&#10;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;I find a good way to approach designing a model for use in a document database is to consider what items you will wish to use independently. For those which make sense on their own, they should probably go inside their own document. For those which only make sense when viewed in the context of their &amp;quot;container&amp;quot; object, embed them within it.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;I hope this helps you.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2703959" ParentId="2703828" CreationDate="2010-04-24T09:36:50.623" OwnerUserId="69083" Tags="[]" Body="&amp;lt;p&amp;gt;I suppose that you actually want the items that are scheduled, but not reviewed after that scheduling?&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Shouldn't the reviews be connected to the scheduled items instead of difrectly to the items? Now you have to compare the dates to see which reviews comes after one scheduled item but before the next. Also, if an item is scheduled twice with a short time between, you may end up with both reviews belonging to the second scheduling.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;With this change you could easily pick out the unreviewed schedulings:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;select i.id, i.name, s.execute_at&#10;from items i&#10;inner join scheduled_items s on s.item_id = i.id&#10;left join reviewed_items r on r.scheduled_items_id = s.id&#10;where r.id is null&#10;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;As to your question:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;blockquote&amp;gt;&#10;  &amp;lt;p&amp;gt;I suppose that adding index to the&#10;  datetime fields doesn't make any sense&#10;  because the cardinality or uniqueness&#10;  on that fields are very high and index&#10;  won't give any(?) speed-up. Is it&#10;  correct?&amp;lt;/p&amp;gt;&#10;&amp;lt;/blockquote&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;No, that is not correct. An index can be useful if the cardinality is high. An index is created by default for the unique id of a table, which of course has the highest cardinality possible.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2705842" ParentId="2634955" CreationDate="2010-04-24T19:30:22.863" OwnerUserId="55150" Tags="[]" Body="&amp;lt;p&amp;gt;Cassandra is the answer to a particular problem: What do you do when you have so much data that it does not fit on one server ? How do you store all your data on many servers and do not break your bank account and not make your developers insane ? Facebook gets 4 Terabyte of new compressed data EVERY DAY. And this number most likely will grow more than twice within a year.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;If you do not have this much data or if you have millions to pay for Enterprise Oracle/DB2 cluster installation and specialists required to set it up and maintain it, then you are fine with SQL database.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2707570" ParentId="2707558" CreationDate="2010-04-25T08:07:58.417" OwnerUserId="119280" Tags="[]" Body="&amp;lt;p&amp;gt;Your approach of separating them is good.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Your concern about code duplication is 100% valid.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;The solution is fairly straightfowrard - abstract away common functionality between the tests - e.g. &amp;quot;RunTest&amp;quot;, &amp;quot;AnalyzeResult&amp;quot;, &amp;quot;ConnectToDB&amp;quot; - into a common library (you did not specify which language but I assume it has a concept of a library) which can be passed configration details such as which database to connect to. &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Then use that library independently from the unit test driver and integrity test driver - which, if you are skilled/lucky enough, might have very little code of its own other than configuration (e.g. which database to connect to, how to report results, and which tests to run).&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Similarly, if needed, common inputs/datasets can be placed in common directory&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2707582" ParentId="2707558" CreationDate="2010-04-25T08:12:48.023" OwnerUserId="11361" Tags="[]" Body="&amp;lt;p&amp;gt;You should separate the database related tests from the &amp;quot;pure&amp;quot; unit tests.&amp;lt;br&amp;gt;&#10;The cost of having two different assemblies is very low considering the benefits - you have one suite of fast, no environment set required tests that you can run on any machine and a slower suite that tests the database integrity that can run only on specific places (e.g. build server).  &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Another benefit is that you can have two build processes (quick and nightly) that runs different tests suites.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;To avoid duplicating code you can create another assembly with the common methods/actions that both test suites needs. Don't worry too much about duplicatimng the actual tests because you're testing different things (either logic or database) so sooner or later your tests will become quite different depending on what you're trying to test.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2712721" ParentId="2609582" CreationDate="2010-04-26T10:35:26.650" OwnerUserId="255292" Tags="[]" Body="&amp;lt;p&amp;gt;Very excited about Pintura too, but I'm struggling getting this setup right now. Personally one of my requirements for something that's production ready would be good documentation. It's a bit confused right now, unsure of how much of the old Persevere docs are applicable, and I had to do a lot of manual changes before I could get the /example that came with Pintura to run. &amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;In conclusions: looks like Alpha software to me!&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2714655" ParentId="2707558" CreationDate="2010-04-26T15:26:19.583" OwnerUserId="47623" Tags="[]" Body="&amp;lt;p&amp;gt;One more answer. You have two types of tests. What I would like to do is address the integrity tests. What you may want to do is include the &amp;lt;strong&amp;gt;integrity tests&amp;lt;/strong&amp;gt; as a function of the &amp;lt;strong&amp;gt;production code&amp;lt;/strong&amp;gt;. IOW, have the integrity as part of the system.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;You already mentioned that duplication is an issue and that you are refactoring to remove the duplication. The refactored code of course has development tests?&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;System Monitoring can be production code. So what ever code you write becomes part of the system.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;The nice thing about this is that you evolve your code through your development tests.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2721292" ParentId="2720490" CreationDate="2010-04-27T12:54:03.913" OwnerUserId="232760" Tags="[]" Body="&amp;lt;p&amp;gt;consider also Redis DB.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;project page: &amp;lt;a href=&amp;quot;http://code.google.com/p/redis/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://code.google.com/p/redis/&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;and clojure client library for it: &amp;lt;a href=&amp;quot;http://github.com/ragnard/redis-clojure/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://github.com/ragnard/redis-clojure/&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2721623" ParentId="2720490" CreationDate="2010-04-27T13:34:28.720" OwnerUserId="36710" Tags="[]" Body="&amp;lt;p&amp;gt;I think the &amp;lt;a href=&amp;quot;http://wiki.github.com/tinkerpop/gremlin/defining-a-property-graph&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;property graph data model&amp;lt;/a&amp;gt; of &amp;lt;a href=&amp;quot;http://neo4j.org/&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Neo4j&amp;lt;/a&amp;gt; is a really nice fit to Clojure, see &amp;lt;a href=&amp;quot;http://wiki.neo4j.org/content/Clojure&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;this wiki page&amp;lt;/a&amp;gt; for links to more information. Regarding free, Neo4j is released under the &amp;lt;a href=&amp;quot;http://www.gnu.org/licenses/agpl.html&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;AGPL3&amp;lt;/a&amp;gt; license, which means it's free to use in open source projects using a compatible license. The commercial backing company &amp;lt;a href=&amp;quot;http://neotechnology.com/product-overview&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Neo Technology&amp;lt;/a&amp;gt; can provide commercial licenses.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2723620" ParentId="2720490" CreationDate="2010-04-27T17:49:21.060" OwnerUserId="295964" Tags="[]" Body="&amp;lt;p&amp;gt;MongoDB compared with CouchDB: &amp;lt;a href=&amp;quot;http://www.mongodb.org/display/DOCS/Comparing+Mongo+DB+and+Couch+DB&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;http://www.mongodb.org/display/DOCS/Comparing+Mongo+DB+and+Couch+DB&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2726809" ParentId="2634955" CreationDate="2010-04-28T04:31:41.807" OwnerUserId="327256" Tags="[]" Body="&amp;lt;p&amp;gt;another situation that makes the choice easier is when you want to use aggregate function like sum, min, max, etcetera and complex queries (like in the financial system mentioned above) then a relational database is probably more convenient then a nosql database since both are not possible on a nosql databse unless you use really a lot of Inverted indexes. When you do use nosql you would have to do the aggregate functions in code or store them seperatly in its own columnfamily but this makes it all quite complex and reduces the performance that you gained by using nosql.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2731714" ParentId="2684462" CreationDate="2010-04-28T17:22:07.213" OwnerUserId="18255" Tags="[]" Body="&amp;lt;p&amp;gt;Data Warehouses have very little in common with NoSQL - the main similarity is that any two data warehouses can have very different philosopohies or conventions just like any two NoSQL systems can be nearly unrelated.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;The only concept they share is that they are both used to analyze large amounts of data.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;NoSQL solutions usually manage relatively limited schemas with large cardinality in few entities, while data warehouses typically have lots of facts and dimensions (in a dimensional model) or lots of entities in a 3NF model.  DW systems usually manage multiple lines of business and attempt to combine that data.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;DW systems typically have reporting abilities in SQL which allows you to access all the data in a standard way.  NoSQL systems are typically more code-based - for instance Map/Reduce.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2731727" ParentId="2688305" CreationDate="2010-04-28T17:24:06.507" OwnerUserId="99665" Tags="[]" Body="&amp;lt;p&amp;gt;Sounds like you are trying to recreate CouchDB.  CouchDB is built with a map-reduce framework and is made to work specifically with JSON objects.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2733955" ParentId="2729981" CreationDate="2010-04-29T00:03:53.730" OwnerUserId="101970" Tags="[]" Body="&amp;lt;p&amp;gt;At one level document and key/value are quite similar - both will return an object when you request a key. In pure key/value that object will be a simple string, although it can be a serialized complex object. A document database extends this with functions to work with this object such as partial update functionality or search indexing.&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;Beyond that you will need to think about your specific requirements - NOSQL covers a lot of different systems, and unlike SQL databases they all have quite different advantages/disadvantages for a specific scenario.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2741364" ParentId="2581738" CreationDate="2010-04-29T23:18:25.097" OwnerUserId="244520" Tags="[]" Body="&amp;lt;p&amp;gt;You guys should check this out:&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://www.mongodb.org/display/DOCS/Replication#Replication-ReplicationAcknowledgementviagetlasterror&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Replication Acknowledgement via getlasterror&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#10;&#10;&amp;lt;p&amp;gt;MongoDB is on the verge of providing durable writes. I think that is the main issue with people discuss this topic w.r.t. money. The transactional part is less important due to the nested document features.&amp;lt;/p&amp;gt;&#10;"/>
  <row Id="2743418" ParentId="2720490" CreationDate="2010-04-30T09:07:04.487" OwnerUserId="222467" Tags="[]" Body="&amp;lt;p&amp;gt;We are using Clojure + MongoDB, and they are works very well together.&amp;lt;/p&amp;gt;&#10;"/>
</answers>
